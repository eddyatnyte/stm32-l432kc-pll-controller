
IWP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c418  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037a4  0800c5a8  0800c5a8  0001c5a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd4c  0800fd4c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800fd4c  0800fd4c  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fd4c  0800fd4c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  0800fd4c  0800fd4c  0001fd4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd68  0800fd68  0001fd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800fd6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c0  20000200  0800ff68  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000bc0  0800ff68  00020bc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f38d  00000000  00000000  0002026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004623  00000000  00000000  0003f5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  00043c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001141  00000000  00000000  000452a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002997b  00000000  00000000  000463e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d6c4  00000000  00000000  0006fd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5a60  00000000  00000000  0008d428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00011368  00000000  00000000  00172e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001841f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c590 	.word	0x0800c590

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800c590 	.word	0x0800c590

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <_ZN7SSH1106C1Ev>:
		SSD1306_Fill(SSD1306_COLOR_BLACK);
		break;
	}
}

SSH1106::SSH1106() {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	SSD1306_Init();
 8000ca4:	f000 f888 	bl	8000db8 <SSD1306_Init>
	clearDisplay();
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f000 f87b 	bl	8000da4 <_ZN7SSH110612clearDisplayEv>
	m_color = WHITE;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	705a      	strb	r2, [r3, #1]
	m_size = SMALL;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
}
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_ZN7SSH11065writeEPKc>:

void SSH1106::write(const char *text) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	switch (m_color) {
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	785b      	ldrb	r3, [r3, #1]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d01f      	beq.n	8000d16 <_ZN7SSH11065writeEPKc+0x52>
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d13e      	bne.n	8000d58 <_ZN7SSH11065writeEPKc+0x94>
	case WHITE:
		switch (m_size) {
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d012      	beq.n	8000d08 <_ZN7SSH11065writeEPKc+0x44>
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	dc35      	bgt.n	8000d52 <_ZN7SSH11065writeEPKc+0x8e>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <_ZN7SSH11065writeEPKc+0x2c>
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d006      	beq.n	8000cfc <_ZN7SSH11065writeEPKc+0x38>
			break;
		case LARGE:
			SSD1306_Puts(text, &Font_16x26, SSD1306_COLOR_WHITE);
			break;
		}
		break;
 8000cee:	e030      	b.n	8000d52 <_ZN7SSH11065writeEPKc+0x8e>
			SSD1306_Puts(text, &Font_7x10, SSD1306_COLOR_WHITE);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	491b      	ldr	r1, [pc, #108]	; (8000d60 <_ZN7SSH11065writeEPKc+0x9c>)
 8000cf4:	6838      	ldr	r0, [r7, #0]
 8000cf6:	f000 fa6d 	bl	80011d4 <SSD1306_Puts>
			break;
 8000cfa:	e00b      	b.n	8000d14 <_ZN7SSH11065writeEPKc+0x50>
			SSD1306_Puts(text, &Font_11x18, SSD1306_COLOR_WHITE);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4919      	ldr	r1, [pc, #100]	; (8000d64 <_ZN7SSH11065writeEPKc+0xa0>)
 8000d00:	6838      	ldr	r0, [r7, #0]
 8000d02:	f000 fa67 	bl	80011d4 <SSD1306_Puts>
			break;
 8000d06:	e005      	b.n	8000d14 <_ZN7SSH11065writeEPKc+0x50>
			SSD1306_Puts(text, &Font_16x26, SSD1306_COLOR_WHITE);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4917      	ldr	r1, [pc, #92]	; (8000d68 <_ZN7SSH11065writeEPKc+0xa4>)
 8000d0c:	6838      	ldr	r0, [r7, #0]
 8000d0e:	f000 fa61 	bl	80011d4 <SSD1306_Puts>
			break;
 8000d12:	bf00      	nop
		break;
 8000d14:	e01d      	b.n	8000d52 <_ZN7SSH11065writeEPKc+0x8e>
	case BLACK:
		switch (m_size) {
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d012      	beq.n	8000d44 <_ZN7SSH11065writeEPKc+0x80>
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	dc19      	bgt.n	8000d56 <_ZN7SSH11065writeEPKc+0x92>
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d002      	beq.n	8000d2c <_ZN7SSH11065writeEPKc+0x68>
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d006      	beq.n	8000d38 <_ZN7SSH11065writeEPKc+0x74>
			break;
		case LARGE:
			SSD1306_Puts(text, &Font_16x26, SSD1306_COLOR_BLACK);
			break;
		}
		break;
 8000d2a:	e014      	b.n	8000d56 <_ZN7SSH11065writeEPKc+0x92>
			SSD1306_Puts(text, &Font_7x10, SSD1306_COLOR_BLACK);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	490c      	ldr	r1, [pc, #48]	; (8000d60 <_ZN7SSH11065writeEPKc+0x9c>)
 8000d30:	6838      	ldr	r0, [r7, #0]
 8000d32:	f000 fa4f 	bl	80011d4 <SSD1306_Puts>
			break;
 8000d36:	e00b      	b.n	8000d50 <_ZN7SSH11065writeEPKc+0x8c>
			SSD1306_Puts(text, &Font_11x18, SSD1306_COLOR_BLACK);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	490a      	ldr	r1, [pc, #40]	; (8000d64 <_ZN7SSH11065writeEPKc+0xa0>)
 8000d3c:	6838      	ldr	r0, [r7, #0]
 8000d3e:	f000 fa49 	bl	80011d4 <SSD1306_Puts>
			break;
 8000d42:	e005      	b.n	8000d50 <_ZN7SSH11065writeEPKc+0x8c>
			SSD1306_Puts(text, &Font_16x26, SSD1306_COLOR_BLACK);
 8000d44:	2200      	movs	r2, #0
 8000d46:	4908      	ldr	r1, [pc, #32]	; (8000d68 <_ZN7SSH11065writeEPKc+0xa4>)
 8000d48:	6838      	ldr	r0, [r7, #0]
 8000d4a:	f000 fa43 	bl	80011d4 <SSD1306_Puts>
			break;
 8000d4e:	bf00      	nop
		break;
 8000d50:	e001      	b.n	8000d56 <_ZN7SSH11065writeEPKc+0x92>
		break;
 8000d52:	bf00      	nop
 8000d54:	e000      	b.n	8000d58 <_ZN7SSH11065writeEPKc+0x94>
		break;
 8000d56:	bf00      	nop
	}
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000004 	.word	0x20000004
 8000d64:	2000000c 	.word	0x2000000c
 8000d68:	20000014 	.word	0x20000014

08000d6c <_ZN7SSH11069setCursorEtt>:

void SSH1106::setCursor(uint16_t x, uint16_t y) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	807b      	strh	r3, [r7, #2]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	803b      	strh	r3, [r7, #0]
	SSD1306_GotoXY(x, y);
 8000d7c:	883a      	ldrh	r2, [r7, #0]
 8000d7e:	887b      	ldrh	r3, [r7, #2]
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f990 	bl	80010a8 <SSD1306_GotoXY>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <_ZN7SSH110613updateDisplayEv>:
		SSD1306_DrawLine(x0, y0, x1, y1, SSD1306_COLOR_BLACK);
		break;
	}
}

void SSH1106::updateDisplay() {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	SSD1306_UpdateScreen();
 8000d98:	f000 f8d2 	bl	8000f40 <SSD1306_UpdateScreen>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <_ZN7SSH110612clearDisplayEv>:


void SSH1106::clearDisplay() {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	SSD1306_Clear();
 8000dac:	f000 fa37 	bl	800121e <SSD1306_Clear>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000dbe:	f000 fa37 	bl	8001230 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000dc2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2178      	movs	r1, #120	; 0x78
 8000dca:	485b      	ldr	r0, [pc, #364]	; (8000f38 <SSD1306_Init+0x180>)
 8000dcc:	f003 fe66 	bl	8004a9c <HAL_I2C_IsDeviceReady>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e0a9      	b.n	8000f2e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000dda:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000dde:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000de0:	e002      	b.n	8000de8 <SSD1306_Init+0x30>
		p--;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3b01      	subs	r3, #1
 8000de6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1f9      	bne.n	8000de2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000dee:	22ae      	movs	r2, #174	; 0xae
 8000df0:	2100      	movs	r1, #0
 8000df2:	2078      	movs	r0, #120	; 0x78
 8000df4:	f000 fa98 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000df8:	2220      	movs	r2, #32
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2078      	movs	r0, #120	; 0x78
 8000dfe:	f000 fa93 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000e02:	2210      	movs	r2, #16
 8000e04:	2100      	movs	r1, #0
 8000e06:	2078      	movs	r0, #120	; 0x78
 8000e08:	f000 fa8e 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e0c:	22b0      	movs	r2, #176	; 0xb0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2078      	movs	r0, #120	; 0x78
 8000e12:	f000 fa89 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000e16:	22c8      	movs	r2, #200	; 0xc8
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2078      	movs	r0, #120	; 0x78
 8000e1c:	f000 fa84 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	2078      	movs	r0, #120	; 0x78
 8000e26:	f000 fa7f 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000e2a:	2210      	movs	r2, #16
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2078      	movs	r0, #120	; 0x78
 8000e30:	f000 fa7a 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000e34:	2240      	movs	r2, #64	; 0x40
 8000e36:	2100      	movs	r1, #0
 8000e38:	2078      	movs	r0, #120	; 0x78
 8000e3a:	f000 fa75 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000e3e:	2281      	movs	r2, #129	; 0x81
 8000e40:	2100      	movs	r1, #0
 8000e42:	2078      	movs	r0, #120	; 0x78
 8000e44:	f000 fa70 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000e48:	22ff      	movs	r2, #255	; 0xff
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2078      	movs	r0, #120	; 0x78
 8000e4e:	f000 fa6b 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000e52:	22a1      	movs	r2, #161	; 0xa1
 8000e54:	2100      	movs	r1, #0
 8000e56:	2078      	movs	r0, #120	; 0x78
 8000e58:	f000 fa66 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000e5c:	22a6      	movs	r2, #166	; 0xa6
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2078      	movs	r0, #120	; 0x78
 8000e62:	f000 fa61 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000e66:	22a8      	movs	r2, #168	; 0xa8
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2078      	movs	r0, #120	; 0x78
 8000e6c:	f000 fa5c 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000e70:	223f      	movs	r2, #63	; 0x3f
 8000e72:	2100      	movs	r1, #0
 8000e74:	2078      	movs	r0, #120	; 0x78
 8000e76:	f000 fa57 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000e7a:	22a4      	movs	r2, #164	; 0xa4
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2078      	movs	r0, #120	; 0x78
 8000e80:	f000 fa52 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000e84:	22d3      	movs	r2, #211	; 0xd3
 8000e86:	2100      	movs	r1, #0
 8000e88:	2078      	movs	r0, #120	; 0x78
 8000e8a:	f000 fa4d 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	2078      	movs	r0, #120	; 0x78
 8000e94:	f000 fa48 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000e98:	22d5      	movs	r2, #213	; 0xd5
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2078      	movs	r0, #120	; 0x78
 8000e9e:	f000 fa43 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000ea2:	22f0      	movs	r2, #240	; 0xf0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2078      	movs	r0, #120	; 0x78
 8000ea8:	f000 fa3e 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000eac:	22d9      	movs	r2, #217	; 0xd9
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2078      	movs	r0, #120	; 0x78
 8000eb2:	f000 fa39 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000eb6:	2222      	movs	r2, #34	; 0x22
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2078      	movs	r0, #120	; 0x78
 8000ebc:	f000 fa34 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000ec0:	22da      	movs	r2, #218	; 0xda
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2078      	movs	r0, #120	; 0x78
 8000ec6:	f000 fa2f 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000eca:	2212      	movs	r2, #18
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2078      	movs	r0, #120	; 0x78
 8000ed0:	f000 fa2a 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000ed4:	22db      	movs	r2, #219	; 0xdb
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2078      	movs	r0, #120	; 0x78
 8000eda:	f000 fa25 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000ede:	2220      	movs	r2, #32
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2078      	movs	r0, #120	; 0x78
 8000ee4:	f000 fa20 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000ee8:	228d      	movs	r2, #141	; 0x8d
 8000eea:	2100      	movs	r1, #0
 8000eec:	2078      	movs	r0, #120	; 0x78
 8000eee:	f000 fa1b 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000ef2:	2214      	movs	r2, #20
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2078      	movs	r0, #120	; 0x78
 8000ef8:	f000 fa16 	bl	8001328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000efc:	22af      	movs	r2, #175	; 0xaf
 8000efe:	2100      	movs	r1, #0
 8000f00:	2078      	movs	r0, #120	; 0x78
 8000f02:	f000 fa11 	bl	8001328 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000f06:	222e      	movs	r2, #46	; 0x2e
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2078      	movs	r0, #120	; 0x78
 8000f0c:	f000 fa0c 	bl	8001328 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000f10:	2000      	movs	r0, #0
 8000f12:	f000 f847 	bl	8000fa4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000f16:	f000 f813 	bl	8000f40 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <SSD1306_Init+0x184>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <SSD1306_Init+0x184>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <SSD1306_Init+0x184>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000f2c:	2301      	movs	r3, #1
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000087c 	.word	0x2000087c
 8000f3c:	2000062c 	.word	0x2000062c

08000f40 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	71fb      	strb	r3, [r7, #7]
 8000f4a:	e021      	b.n	8000f90 <SSD1306_UpdateScreen+0x50>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	3b50      	subs	r3, #80	; 0x50
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	461a      	mov	r2, r3
 8000f54:	2100      	movs	r1, #0
 8000f56:	2078      	movs	r0, #120	; 0x78
 8000f58:	f000 f9e6 	bl	8001328 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2078      	movs	r0, #120	; 0x78
 8000f62:	f000 f9e1 	bl	8001328 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000f66:	2210      	movs	r2, #16
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2078      	movs	r0, #120	; 0x78
 8000f6c:	f000 f9dc 	bl	8001328 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000f70:	79fa      	ldrb	r2, [r7, #7]
 8000f72:	4613      	mov	r3, r2
 8000f74:	019b      	lsls	r3, r3, #6
 8000f76:	4413      	add	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <SSD1306_UpdateScreen+0x60>)
 8000f7e:	441a      	add	r2, r3
 8000f80:	2382      	movs	r3, #130	; 0x82
 8000f82:	2140      	movs	r1, #64	; 0x40
 8000f84:	2078      	movs	r0, #120	; 0x78
 8000f86:	f000 f969 	bl	800125c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b07      	cmp	r3, #7
 8000f94:	d9da      	bls.n	8000f4c <SSD1306_UpdateScreen+0xc>
	}
}
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000021c 	.word	0x2000021c

08000fa4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <SSD1306_Fill+0x14>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e000      	b.n	8000fba <SSD1306_Fill+0x16>
 8000fb8:	23ff      	movs	r3, #255	; 0xff
 8000fba:	f44f 6282 	mov.w	r2, #1040	; 0x410
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <SSD1306_Fill+0x2c>)
 8000fc2:	f009 fab3 	bl	800a52c <memset>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000021c 	.word	0x2000021c

08000fd4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000fd4:	b490      	push	{r4, r7}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	80fb      	strh	r3, [r7, #6]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	80bb      	strh	r3, [r7, #4]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	70fb      	strb	r3, [r7, #3]
	if (
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	2b81      	cmp	r3, #129	; 0x81
 8000fea:	d854      	bhi.n	8001096 <SSD1306_DrawPixel+0xc2>
		x >= SSD1306_WIDTH ||
 8000fec:	88bb      	ldrh	r3, [r7, #4]
 8000fee:	2b3f      	cmp	r3, #63	; 0x3f
 8000ff0:	d851      	bhi.n	8001096 <SSD1306_DrawPixel+0xc2>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <SSD1306_DrawPixel+0xcc>)
 8000ff4:	791b      	ldrb	r3, [r3, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d006      	beq.n	8001008 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bf0c      	ite	eq
 8001000:	2301      	moveq	r3, #1
 8001002:	2300      	movne	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d120      	bne.n	8001050 <SSD1306_DrawPixel+0x7c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800100e:	88fa      	ldrh	r2, [r7, #6]
 8001010:	88bb      	ldrh	r3, [r7, #4]
 8001012:	08db      	lsrs	r3, r3, #3
 8001014:	b298      	uxth	r0, r3
 8001016:	4601      	mov	r1, r0
 8001018:	460b      	mov	r3, r1
 800101a:	019b      	lsls	r3, r3, #6
 800101c:	440b      	add	r3, r1
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	4a20      	ldr	r2, [pc, #128]	; (80010a4 <SSD1306_DrawPixel+0xd0>)
 8001024:	5cd3      	ldrb	r3, [r2, r3]
 8001026:	b25a      	sxtb	r2, r3
 8001028:	88bb      	ldrh	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	2101      	movs	r1, #1
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	b25b      	sxtb	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b25c      	sxtb	r4, r3
 800103a:	88fa      	ldrh	r2, [r7, #6]
 800103c:	4601      	mov	r1, r0
 800103e:	460b      	mov	r3, r1
 8001040:	019b      	lsls	r3, r3, #6
 8001042:	440b      	add	r3, r1
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4413      	add	r3, r2
 8001048:	b2e1      	uxtb	r1, r4
 800104a:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <SSD1306_DrawPixel+0xd0>)
 800104c:	54d1      	strb	r1, [r2, r3]
 800104e:	e023      	b.n	8001098 <SSD1306_DrawPixel+0xc4>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001050:	88fa      	ldrh	r2, [r7, #6]
 8001052:	88bb      	ldrh	r3, [r7, #4]
 8001054:	08db      	lsrs	r3, r3, #3
 8001056:	b298      	uxth	r0, r3
 8001058:	4601      	mov	r1, r0
 800105a:	460b      	mov	r3, r1
 800105c:	019b      	lsls	r3, r3, #6
 800105e:	440b      	add	r3, r1
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <SSD1306_DrawPixel+0xd0>)
 8001066:	5cd3      	ldrb	r3, [r2, r3]
 8001068:	b25a      	sxtb	r2, r3
 800106a:	88bb      	ldrh	r3, [r7, #4]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	2101      	movs	r1, #1
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	b25b      	sxtb	r3, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	b25b      	sxtb	r3, r3
 800107c:	4013      	ands	r3, r2
 800107e:	b25c      	sxtb	r4, r3
 8001080:	88fa      	ldrh	r2, [r7, #6]
 8001082:	4601      	mov	r1, r0
 8001084:	460b      	mov	r3, r1
 8001086:	019b      	lsls	r3, r3, #6
 8001088:	440b      	add	r3, r1
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	b2e1      	uxtb	r1, r4
 8001090:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <SSD1306_DrawPixel+0xd0>)
 8001092:	54d1      	strb	r1, [r2, r3]
 8001094:	e000      	b.n	8001098 <SSD1306_DrawPixel+0xc4>
		return;
 8001096:	bf00      	nop
	}
}
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bc90      	pop	{r4, r7}
 800109e:	4770      	bx	lr
 80010a0:	2000062c 	.word	0x2000062c
 80010a4:	2000021c 	.word	0x2000021c

080010a8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	460a      	mov	r2, r1
 80010b2:	80fb      	strh	r3, [r7, #6]
 80010b4:	4613      	mov	r3, r2
 80010b6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80010b8:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <SSD1306_GotoXY+0x28>)
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <SSD1306_GotoXY+0x28>)
 80010c0:	88bb      	ldrh	r3, [r7, #4]
 80010c2:	8053      	strh	r3, [r2, #2]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	2000062c 	.word	0x2000062c

080010d4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80010e4:	4b3a      	ldr	r3, [pc, #232]	; (80011d0 <SSD1306_Putc+0xfc>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
	if (
 80010f0:	2b81      	cmp	r3, #129	; 0x81
 80010f2:	dc07      	bgt.n	8001104 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80010f4:	4b36      	ldr	r3, [pc, #216]	; (80011d0 <SSD1306_Putc+0xfc>)
 80010f6:	885b      	ldrh	r3, [r3, #2]
 80010f8:	461a      	mov	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	785b      	ldrb	r3, [r3, #1]
 80010fe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001100:	2b3f      	cmp	r3, #63	; 0x3f
 8001102:	dd01      	ble.n	8001108 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001104:	2300      	movs	r3, #0
 8001106:	e05e      	b.n	80011c6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	e04b      	b.n	80011a6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	3b20      	subs	r3, #32
 8001116:	6839      	ldr	r1, [r7, #0]
 8001118:	7849      	ldrb	r1, [r1, #1]
 800111a:	fb01 f303 	mul.w	r3, r1, r3
 800111e:	4619      	mov	r1, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	440b      	add	r3, r1
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	e030      	b.n	8001194 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d010      	beq.n	8001164 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <SSD1306_Putc+0xfc>)
 8001144:	881a      	ldrh	r2, [r3, #0]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	b29b      	uxth	r3, r3
 800114a:	4413      	add	r3, r2
 800114c:	b298      	uxth	r0, r3
 800114e:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <SSD1306_Putc+0xfc>)
 8001150:	885a      	ldrh	r2, [r3, #2]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	b29b      	uxth	r3, r3
 8001156:	4413      	add	r3, r2
 8001158:	b29b      	uxth	r3, r3
 800115a:	79ba      	ldrb	r2, [r7, #6]
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff ff39 	bl	8000fd4 <SSD1306_DrawPixel>
 8001162:	e014      	b.n	800118e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <SSD1306_Putc+0xfc>)
 8001166:	881a      	ldrh	r2, [r3, #0]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	b29b      	uxth	r3, r3
 800116c:	4413      	add	r3, r2
 800116e:	b298      	uxth	r0, r3
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <SSD1306_Putc+0xfc>)
 8001172:	885a      	ldrh	r2, [r3, #2]
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4413      	add	r3, r2
 800117a:	b299      	uxth	r1, r3
 800117c:	79bb      	ldrb	r3, [r7, #6]
 800117e:	2b00      	cmp	r3, #0
 8001180:	bf0c      	ite	eq
 8001182:	2301      	moveq	r3, #1
 8001184:	2300      	movne	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	f7ff ff23 	bl	8000fd4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	3301      	adds	r3, #1
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4293      	cmp	r3, r2
 800119e:	d3c8      	bcc.n	8001132 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	785b      	ldrb	r3, [r3, #1]
 80011aa:	461a      	mov	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d3ad      	bcc.n	800110e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <SSD1306_Putc+0xfc>)
 80011b4:	881a      	ldrh	r2, [r3, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	4413      	add	r3, r2
 80011be:	b29a      	uxth	r2, r3
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <SSD1306_Putc+0xfc>)
 80011c2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80011c4:	79fb      	ldrb	r3, [r7, #7]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000062c 	.word	0x2000062c

080011d4 <SSD1306_Puts>:

char SSD1306_Puts(const char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	4613      	mov	r3, r2
 80011e0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80011e2:	e012      	b.n	800120a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	79fa      	ldrb	r2, [r7, #7]
 80011ea:	68b9      	ldr	r1, [r7, #8]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff71 	bl	80010d4 <SSD1306_Putc>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d002      	beq.n	8001204 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	e008      	b.n	8001216 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3301      	adds	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1e8      	bne.n	80011e4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	781b      	ldrb	r3, [r3, #0]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff febe 	bl	8000fa4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001228:	f7ff fe8a 	bl	8000f40 <SSD1306_UpdateScreen>
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}

08001230 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <ssd1306_I2C_Init+0x28>)
 8001238:	607b      	str	r3, [r7, #4]
	while(p>0)
 800123a:	e002      	b.n	8001242 <ssd1306_I2C_Init+0x12>
		p--;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f9      	bne.n	800123c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	0003d090 	.word	0x0003d090

0800125c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b0c7      	sub	sp, #284	; 0x11c
 8001260:	af02      	add	r7, sp, #8
 8001262:	4604      	mov	r4, r0
 8001264:	4608      	mov	r0, r1
 8001266:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800126a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800126e:	600a      	str	r2, [r1, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001276:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800127a:	4622      	mov	r2, r4
 800127c:	701a      	strb	r2, [r3, #0]
 800127e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001282:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001286:	4602      	mov	r2, r0
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800128e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001292:	460a      	mov	r2, r1
 8001294:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001296:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800129a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800129e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80012a2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80012a6:	7812      	ldrb	r2, [r2, #0]
 80012a8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80012b0:	e015      	b.n	80012de <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80012b2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80012b6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80012ba:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	441a      	add	r2, r3
 80012c2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80012c6:	3301      	adds	r3, #1
 80012c8:	7811      	ldrb	r1, [r2, #0]
 80012ca:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80012ce:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80012d2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80012d4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80012d8:	3301      	adds	r3, #1
 80012da:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80012de:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80012e8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80012ec:	8812      	ldrh	r2, [r2, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d8df      	bhi.n	80012b2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80012f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012f6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b299      	uxth	r1, r3
 80012fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001302:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	3301      	adds	r3, #1
 800130a:	b29b      	uxth	r3, r3
 800130c:	f107 020c 	add.w	r2, r7, #12
 8001310:	200a      	movs	r0, #10
 8001312:	9000      	str	r0, [sp, #0]
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <ssd1306_I2C_WriteMulti+0xc8>)
 8001316:	f003 faa9 	bl	800486c <HAL_I2C_Master_Transmit>
}
 800131a:	bf00      	nop
 800131c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001320:	46bd      	mov	sp, r7
 8001322:	bd90      	pop	{r4, r7, pc}
 8001324:	2000087c 	.word	0x2000087c

08001328 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af02      	add	r7, sp, #8
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
 8001332:	460b      	mov	r3, r1
 8001334:	71bb      	strb	r3, [r7, #6]
 8001336:	4613      	mov	r3, r2
 8001338:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800133a:	79bb      	ldrb	r3, [r7, #6]
 800133c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800133e:	797b      	ldrb	r3, [r7, #5]
 8001340:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	b299      	uxth	r1, r3
 8001346:	f107 020c 	add.w	r2, r7, #12
 800134a:	230a      	movs	r3, #10
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2302      	movs	r3, #2
 8001350:	4803      	ldr	r0, [pc, #12]	; (8001360 <ssd1306_I2C_Write+0x38>)
 8001352:	f003 fa8b 	bl	800486c <HAL_I2C_Master_Transmit>
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000087c 	.word	0x2000087c

08001364 <_ZN13RotaryEncoderC1EP17TIM_HandleTypeDefss>:
 *      Author: bolob
 */

#include "RotaryEncoder.h"

RotaryEncoder::RotaryEncoder(TIM_HandleTypeDef *htim, int16_t maxPosition,
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	4611      	mov	r1, r2
 8001370:	461a      	mov	r2, r3
 8001372:	460b      	mov	r3, r1
 8001374:	80fb      	strh	r3, [r7, #6]
 8001376:	4613      	mov	r3, r2
 8001378:	80bb      	strh	r3, [r7, #4]
		int16_t minPosition) {
	m_htim = htim;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	601a      	str	r2, [r3, #0]
	m_position = 0;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2200      	movs	r2, #0
 8001384:	605a      	str	r2, [r3, #4]
	m_maxPosition = maxPosition;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	88fa      	ldrh	r2, [r7, #6]
 800138a:	819a      	strh	r2, [r3, #12]
	m_minPosition = minPosition;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	88ba      	ldrh	r2, [r7, #4]
 8001390:	81da      	strh	r2, [r3, #14]
	m_lastEncoded = __HAL_TIM_GET_COUNTER(m_htim);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	609a      	str	r2, [r3, #8]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 800139e:	213c      	movs	r1, #60	; 0x3c
 80013a0:	68b8      	ldr	r0, [r7, #8]
 80013a2:	f005 fa8c 	bl	80068be <HAL_TIM_Encoder_Start>
}
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <_ZN13RotaryEncoder11getPositionEv>:

int32_t RotaryEncoder::getPosition() {
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	return m_position;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <_ZN13RotaryEncoder13resetPositionEv>:

void RotaryEncoder::resetPosition() {
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	m_position = 0;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	605a      	str	r2, [r3, #4]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <_ZN13RotaryEncoder14updatePositionEv>:

void RotaryEncoder::updatePosition() {
 80013e2:	b480      	push	{r7}
 80013e4:	b085      	sub	sp, #20
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
	uint32_t value = __HAL_TIM_GET_COUNTER(m_htim);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f2:	60fb      	str	r3, [r7, #12]
	int32_t diff = static_cast<int32_t>(value - m_lastEncoded);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	60bb      	str	r3, [r7, #8]
	if (diff > 0) {
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	2b00      	cmp	r3, #0
 8001402:	dd05      	ble.n	8001410 <_ZN13RotaryEncoder14updatePositionEv+0x2e>
		m_position++;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	e007      	b.n	8001420 <_ZN13RotaryEncoder14updatePositionEv+0x3e>
	} else if (diff < 0) {
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b00      	cmp	r3, #0
 8001414:	da04      	bge.n	8001420 <_ZN13RotaryEncoder14updatePositionEv+0x3e>
		m_position--;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	1e5a      	subs	r2, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	605a      	str	r2, [r3, #4]
	}

	// Limit the position in it's range
	if (m_position > m_maxPosition) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800142a:	4293      	cmp	r3, r2
 800142c:	dd06      	ble.n	800143c <_ZN13RotaryEncoder14updatePositionEv+0x5a>
		m_position = m_maxPosition;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001434:	461a      	mov	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	e00c      	b.n	8001456 <_ZN13RotaryEncoder14updatePositionEv+0x74>
	} else if (m_position < m_minPosition) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001446:	4293      	cmp	r3, r2
 8001448:	da05      	bge.n	8001456 <_ZN13RotaryEncoder14updatePositionEv+0x74>
		m_position = m_minPosition;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001450:	461a      	mov	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	605a      	str	r2, [r3, #4]
	}

	m_lastEncoded = value;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	609a      	str	r2, [r3, #8]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <rt_roundd>:
ExtY_PLL_T PLL_Y;

/* Real-time model */
static RT_MODEL_PLL_T PLL_M_;
RT_MODEL_PLL_T *const PLL_M = &PLL_M_;
real_T rt_roundd(real_T u) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	ed87 0b00 	vstr	d0, [r7]
	real_T y;
	if (fabs(u) < 4.503599627370496E+15) {
 8001472:	6838      	ldr	r0, [r7, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <rt_roundd+0xc8>)
 8001480:	f7ff fb36 	bl	8000af0 <__aeabi_dcmplt>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d042      	beq.n	8001510 <rt_roundd+0xa8>
		if (u >= 0.5) {
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b29      	ldr	r3, [pc, #164]	; (8001534 <rt_roundd+0xcc>)
 8001490:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001494:	f7ff fb40 	bl	8000b18 <__aeabi_dcmpge>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d013      	beq.n	80014c6 <rt_roundd+0x5e>
			y = floor(u + 0.5);
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	4b24      	ldr	r3, [pc, #144]	; (8001534 <rt_roundd+0xcc>)
 80014a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014a8:	f7fe fefa 	bl	80002a0 <__adddf3>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	ec43 2b17 	vmov	d7, r2, r3
 80014b4:	eeb0 0a47 	vmov.f32	s0, s14
 80014b8:	eef0 0a67 	vmov.f32	s1, s15
 80014bc:	f006 fe38 	bl	8008130 <floor>
 80014c0:	ed87 0b02 	vstr	d0, [r7, #8]
 80014c4:	e028      	b.n	8001518 <rt_roundd+0xb0>
		} else if (u > -0.5) {
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <rt_roundd+0xd0>)
 80014cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014d0:	f7ff fb2c 	bl	8000b2c <__aeabi_dcmpgt>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <rt_roundd+0x80>
			y = 0.0;
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80014e6:	e017      	b.n	8001518 <rt_roundd+0xb0>
		} else {
			y = ceil(u - 0.5);
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <rt_roundd+0xcc>)
 80014ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014f2:	f7fe fed3 	bl	800029c <__aeabi_dsub>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	ec43 2b17 	vmov	d7, r2, r3
 80014fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001502:	eef0 0a67 	vmov.f32	s1, s15
 8001506:	f006 fd93 	bl	8008030 <ceil>
 800150a:	ed87 0b02 	vstr	d0, [r7, #8]
 800150e:	e003      	b.n	8001518 <rt_roundd+0xb0>
		}
	} else {
		y = u;
 8001510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001514:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}

	return y;
 8001518:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800151c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001520:	eeb0 0a47 	vmov.f32	s0, s14
 8001524:	eef0 0a67 	vmov.f32	s1, s15
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	43300000 	.word	0x43300000
 8001534:	3fe00000 	.word	0x3fe00000
 8001538:	bfe00000 	.word	0xbfe00000
 800153c:	00000000 	.word	0x00000000

08001540 <PLL_step>:

/* Model step function */
void PLL_step(void) {
 8001540:	b5b0      	push	{r4, r5, r7, lr}
 8001542:	b090      	sub	sp, #64	; 0x40
 8001544:	af00      	add	r7, sp, #0

	/* Outport: '<Root>/Frequency' incorporates:
	 *  Gain: '<Root>/Gain1'
	 *  UnitDelay: '<S2>/Unit Delay'
	 */
	PLL_Y.Frequency = (real32_T) (PLL_DW.UnitDelay_DSTATE);
 8001546:	4b84      	ldr	r3, [pc, #528]	; (8001758 <PLL_step+0x218>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff fb54 	bl	8000bfc <__aeabi_d2f>
 8001554:	4603      	mov	r3, r0
 8001556:	4a81      	ldr	r2, [pc, #516]	; (800175c <PLL_step+0x21c>)
 8001558:	6013      	str	r3, [r2, #0]

	/* RelationalOperator: '<S2>/Relational Operator' incorporates:
	 *  Constant: '<S2>/Constant2'
	 */
	rtb_RelationalOperator = (PLL_DW.DiscreteTimeIntegrator_DSTATE
 800155a:	4b7f      	ldr	r3, [pc, #508]	; (8001758 <PLL_step+0x218>)
 800155c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			> 6.2831853071795862);
 8001560:	2301      	movs	r3, #1
 8001562:	461c      	mov	r4, r3
 8001564:	a374      	add	r3, pc, #464	; (adr r3, 8001738 <PLL_step+0x1f8>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7ff fadf 	bl	8000b2c <__aeabi_dcmpgt>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <PLL_step+0x38>
 8001574:	2300      	movs	r3, #0
 8001576:	461c      	mov	r4, r3
 8001578:	b2e3      	uxtb	r3, r4
	rtb_RelationalOperator = (PLL_DW.DiscreteTimeIntegrator_DSTATE
 800157a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* InitialCondition: '<S2>/Initial' */
	if (PLL_DW.Initial_FirstOutputTime) {
 800157e:	4b76      	ldr	r3, [pc, #472]	; (8001758 <PLL_step+0x218>)
 8001580:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00a      	beq.n	800159e <PLL_step+0x5e>
		PLL_DW.Initial_FirstOutputTime = false;
 8001588:	4b73      	ldr	r3, [pc, #460]	; (8001758 <PLL_step+0x218>)
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

		/* InitialCondition: '<S2>/Initial' */
		Initial = 0.0;
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800159c:	e00b      	b.n	80015b6 <PLL_step+0x76>
	} else {
		/* InitialCondition: '<S2>/Initial' incorporates:
		 *  Constant: '<S2>/Constant2'
		 *  Sum: '<S2>/Subtract'
		 */
		Initial = PLL_DW.DiscreteTimeIntegrator_DSTATE - 6.2831853071795862;
 800159e:	4b6e      	ldr	r3, [pc, #440]	; (8001758 <PLL_step+0x218>)
 80015a0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80015a4:	a364      	add	r3, pc, #400	; (adr r3, 8001738 <PLL_step+0x1f8>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7fe fe77 	bl	800029c <__aeabi_dsub>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}

	/* End of InitialCondition: '<S2>/Initial' */

	/* DiscreteIntegrator: '<S2>/Discrete-Time Integrator' */
	if (rtb_RelationalOperator
 80015b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d009      	beq.n	80015d2 <PLL_step+0x92>
			&& (PLL_DW.DiscreteTimeIntegrator_PrevRese <= 0)) {
 80015be:	4b66      	ldr	r3, [pc, #408]	; (8001758 <PLL_step+0x218>)
 80015c0:	f993 3050 	ldrsb.w	r3, [r3, #80]	; 0x50
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	dc04      	bgt.n	80015d2 <PLL_step+0x92>
		PLL_DW.DiscreteTimeIntegrator_DSTATE = Initial;
 80015c8:	4963      	ldr	r1, [pc, #396]	; (8001758 <PLL_step+0x218>)
 80015ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015ce:	e9c1 2302 	strd	r2, r3, [r1, #8]

	/* Outport: '<Root>/Phase' incorporates:
	 *  DiscreteIntegrator: '<S2>/Discrete-Time Integrator'
	 *  Gain: '<Root>/Gain2'
	 */
	PLL_Y.Phase = (real32_T) (1000.0 * PLL_DW.DiscreteTimeIntegrator_DSTATE);
 80015d2:	4b61      	ldr	r3, [pc, #388]	; (8001758 <PLL_step+0x218>)
 80015d4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	4b60      	ldr	r3, [pc, #384]	; (8001760 <PLL_step+0x220>)
 80015de:	f7ff f815 	bl	800060c <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff fb07 	bl	8000bfc <__aeabi_d2f>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4a5a      	ldr	r2, [pc, #360]	; (800175c <PLL_step+0x21c>)
 80015f2:	6053      	str	r3, [r2, #4]

	/* Saturate: '<S6>/Saturation' incorporates:
	 *  UnitDelay: '<S2>/Unit Delay'
	 */
	rtb_Saturation = fmax(PLL_DW.UnitDelay_DSTATE, 2.2204460492503131E-16);
 80015f4:	4b58      	ldr	r3, [pc, #352]	; (8001758 <PLL_step+0x218>)
 80015f6:	ed93 7b00 	vldr	d7, [r3]
 80015fa:	ed9f 1b51 	vldr	d1, [pc, #324]	; 8001740 <PLL_step+0x200>
 80015fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001602:	eef0 0a67 	vmov.f32	s1, s15
 8001606:	f006 ff69 	bl	80084dc <fmax>
 800160a:	ed87 0b06 	vstr	d0, [r7, #24]
	 *  DataTypeConversion: '<Root>/Cast To Double'
	 *  DiscreteIntegrator: '<S2>/Discrete-Time Integrator'
	 *  Inport: '<Root>/ADC_IN'
	 *  Trigonometry: '<S2>/Trigonometric Function2'
	 */
	 Initial = (0.00004884004884F * (real32_T)PLL_U.ADC_IN - 0.1F) * cos
 800160e:	4b55      	ldr	r3, [pc, #340]	; (8001764 <PLL_step+0x224>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800161a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001768 <PLL_step+0x228>
 800161e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001622:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800176c <PLL_step+0x22c>
 8001626:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800162a:	ee17 0a90 	vmov	r0, s15
 800162e:	f7fe ff95 	bl	800055c <__aeabi_f2d>
 8001632:	4604      	mov	r4, r0
 8001634:	460d      	mov	r5, r1
 8001636:	4b48      	ldr	r3, [pc, #288]	; (8001758 <PLL_step+0x218>)
 8001638:	ed93 7b02 	vldr	d7, [r3, #8]
 800163c:	eeb0 0a47 	vmov.f32	s0, s14
 8001640:	eef0 0a67 	vmov.f32	s1, s15
 8001644:	f006 fca0 	bl	8007f88 <cos>
 8001648:	ec53 2b10 	vmov	r2, r3, d0
 800164c:	4620      	mov	r0, r4
 800164e:	4629      	mov	r1, r5
 8001650:	f7fe ffdc 	bl	800060c <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	    (PLL_DW.DiscreteTimeIntegrator_DSTATE);

	/* DiscreteIntegrator: '<S6>/Discrete-Time Integrator' */
	if (PLL_DW.DiscreteTimeIntegrator_SYSTEM_E == 0) {
 800165c:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <PLL_step+0x218>)
 800165e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001662:	2b00      	cmp	r3, #0
 8001664:	d114      	bne.n	8001690 <PLL_step+0x150>
		/* DiscreteIntegrator: '<S6>/Discrete-Time Integrator' */
		PLL_DW.DiscreteTimeIntegrator_DSTATE_p += 0.00025 * Initial;
 8001666:	4b3c      	ldr	r3, [pc, #240]	; (8001758 <PLL_step+0x218>)
 8001668:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800166c:	a336      	add	r3, pc, #216	; (adr r3, 8001748 <PLL_step+0x208>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001676:	f7fe ffc9 	bl	800060c <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4620      	mov	r0, r4
 8001680:	4629      	mov	r1, r5
 8001682:	f7fe fe0d 	bl	80002a0 <__adddf3>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4933      	ldr	r1, [pc, #204]	; (8001758 <PLL_step+0x218>)
 800168c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	 *  Product: '<S6>/Product2'
	 *
	 * About '<S6>/Math Function1':
	 *  Operator: reciprocal
	 */
	rtb_MathFunction1 = 1.0 / (PLL_B.Probe[0] * rtb_Saturation);
 8001690:	4b37      	ldr	r3, [pc, #220]	; (8001770 <PLL_step+0x230>)
 8001692:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001696:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800169a:	f7fe ffb7 	bl	800060c <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	f04f 0000 	mov.w	r0, #0
 80016a6:	4933      	ldr	r1, [pc, #204]	; (8001774 <PLL_step+0x234>)
 80016a8:	f7ff f8da 	bl	8000860 <__aeabi_ddiv>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	/* Rounding: '<S6>/Rounding Function1' */
	rtb_RoundingFunction1 = rt_roundd(rtb_MathFunction1);
 80016b4:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80016b8:	f7ff fed6 	bl	8001468 <rt_roundd>
 80016bc:	ed87 0b04 	vstr	d0, [r7, #16]
	 *  ForEach: '<S7>/For Each'
	 */
	/* Delay: '<S7>/Variable Integer Delay' incorporates:
	 *  Sum: '<S6>/Sum4'
	 */
	if (rtb_RoundingFunction1 < 1.0) {
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <PLL_step+0x234>)
 80016c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016ca:	f7ff fa11 	bl	8000af0 <__aeabi_dcmplt>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <PLL_step+0x1a0>
		/* ForEachSliceAssignment generated from: '<S7>/Out1' incorporates:
		 *  ForEachSliceSelector generated from: '<S7>/In1'
		 */
		rtb_ImpAsg_InsertedFor_Out1_at_ =
 80016d4:	4b20      	ldr	r3, [pc, #128]	; (8001758 <PLL_step+0x218>)
 80016d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016da:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80016de:	e025      	b.n	800172c <PLL_step+0x1ec>
				PLL_DW.DiscreteTimeIntegrator_DSTATE_p;
	} else {
		if (rtb_RoundingFunction1 > 45.0) {
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <PLL_step+0x238>)
 80016e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016ea:	f7ff fa1f 	bl	8000b2c <__aeabi_dcmpgt>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <PLL_step+0x1ba>
			idxDelay = 45;
 80016f4:	232d      	movs	r3, #45	; 0x2d
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
 80016f8:	e00d      	b.n	8001716 <PLL_step+0x1d6>
		} else {
			idxDelay = (int32_T) (uint32_T) fmod(rtb_RoundingFunction1,
 80016fa:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001750 <PLL_step+0x210>
 80016fe:	ed97 0b04 	vldr	d0, [r7, #16]
 8001702:	f006 fc11 	bl	8007f28 <fmod>
 8001706:	ec53 2b10 	vmov	r2, r3, d0
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f7ff fa55 	bl	8000bbc <__aeabi_d2uiz>
 8001712:	4603      	mov	r3, r0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
		}

		/* ForEachSliceAssignment generated from: '<S7>/Out1' */
		rtb_ImpAsg_InsertedFor_Out1_at_ =
				PLL_DW.CoreSubsys[0].VariableIntegerDelay_DSTATE[45U
						- (uint32_T) idxDelay];
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	f1c3 032d 	rsb	r3, r3, #45	; 0x2d
		rtb_ImpAsg_InsertedFor_Out1_at_ =
 800171c:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <PLL_step+0x218>)
 800171e:	330b      	adds	r3, #11
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	4413      	add	r3, r2
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	/* End of Delay: '<S7>/Variable Integer Delay' */

	/* Update for Delay: '<S7>/Variable Integer Delay' incorporates:
	 *  ForEachSliceSelector generated from: '<S7>/In1'
	 */
	for (idxDelay = 0; idxDelay < 44; idxDelay++) {
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
 8001730:	e036      	b.n	80017a0 <PLL_step+0x260>
 8001732:	bf00      	nop
 8001734:	f3af 8000 	nop.w
 8001738:	54442d18 	.word	0x54442d18
 800173c:	401921fb 	.word	0x401921fb
 8001740:	00000000 	.word	0x00000000
 8001744:	3cb00000 	.word	0x3cb00000
 8001748:	d2f1a9fc 	.word	0xd2f1a9fc
 800174c:	3f30624d 	.word	0x3f30624d
 8001750:	00000000 	.word	0x00000000
 8001754:	41f00000 	.word	0x41f00000
 8001758:	20000648 	.word	0x20000648
 800175c:	2000080c 	.word	0x2000080c
 8001760:	408f4000 	.word	0x408f4000
 8001764:	20000808 	.word	0x20000808
 8001768:	384cd99a 	.word	0x384cd99a
 800176c:	3dcccccd 	.word	0x3dcccccd
 8001770:	20000638 	.word	0x20000638
 8001774:	3ff00000 	.word	0x3ff00000
 8001778:	40468000 	.word	0x40468000
		PLL_DW.CoreSubsys[0].VariableIntegerDelay_DSTATE[idxDelay] =
				PLL_DW.CoreSubsys[0].VariableIntegerDelay_DSTATE[idxDelay + 1];
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	3301      	adds	r3, #1
 8001780:	4a87      	ldr	r2, [pc, #540]	; (80019a0 <PLL_step+0x460>)
 8001782:	330b      	adds	r3, #11
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4413      	add	r3, r2
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
		PLL_DW.CoreSubsys[0].VariableIntegerDelay_DSTATE[idxDelay] =
 800178c:	4884      	ldr	r0, [pc, #528]	; (80019a0 <PLL_step+0x460>)
 800178e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001790:	310b      	adds	r1, #11
 8001792:	00c9      	lsls	r1, r1, #3
 8001794:	4401      	add	r1, r0
 8001796:	e9c1 2300 	strd	r2, r3, [r1]
	for (idxDelay = 0; idxDelay < 44; idxDelay++) {
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	3301      	adds	r3, #1
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	2b2b      	cmp	r3, #43	; 0x2b
 80017a4:	ddea      	ble.n	800177c <PLL_step+0x23c>
	}

	PLL_DW.CoreSubsys[0].VariableIntegerDelay_DSTATE[44] =
			PLL_DW.DiscreteTimeIntegrator_DSTATE_p;
 80017a6:	4b7e      	ldr	r3, [pc, #504]	; (80019a0 <PLL_step+0x460>)
 80017a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	PLL_DW.CoreSubsys[0].VariableIntegerDelay_DSTATE[44] =
 80017ac:	497c      	ldr	r1, [pc, #496]	; (80019a0 <PLL_step+0x460>)
 80017ae:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8

	/* Sum: '<S6>/Sum3' incorporates:
	 *  Constant: '<S6>/Constant2'
	 *  UnitDelay: '<S6>/Unit Delay'
	 */
	PLL_DW.UnitDelay_DSTATE_n++;
 80017b2:	4b7b      	ldr	r3, [pc, #492]	; (80019a0 <PLL_step+0x460>)
 80017b4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	4b79      	ldr	r3, [pc, #484]	; (80019a4 <PLL_step+0x464>)
 80017be:	f7fe fd6f 	bl	80002a0 <__adddf3>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4976      	ldr	r1, [pc, #472]	; (80019a0 <PLL_step+0x460>)
 80017c8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	 *  UnitDelay: '<S6>/Unit Delay1'
	 *
	 * About '<S6>/Math Function2':
	 *  Operator: reciprocal
	 */
	if (PLL_DW.UnitDelay_DSTATE_n >= rt_roundd(1.0 / (50.0 * PLL_B.Probe[0]))) {
 80017cc:	4b74      	ldr	r3, [pc, #464]	; (80019a0 <PLL_step+0x460>)
 80017ce:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80017d2:	4b75      	ldr	r3, [pc, #468]	; (80019a8 <PLL_step+0x468>)
 80017d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	4b73      	ldr	r3, [pc, #460]	; (80019ac <PLL_step+0x46c>)
 80017de:	f7fe ff15 	bl	800060c <__aeabi_dmul>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	f04f 0000 	mov.w	r0, #0
 80017ea:	496e      	ldr	r1, [pc, #440]	; (80019a4 <PLL_step+0x464>)
 80017ec:	f7ff f838 	bl	8000860 <__aeabi_ddiv>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	ec43 2b17 	vmov	d7, r2, r3
 80017f8:	eeb0 0a47 	vmov.f32	s0, s14
 80017fc:	eef0 0a67 	vmov.f32	s1, s15
 8001800:	f7ff fe32 	bl	8001468 <rt_roundd>
 8001804:	ec53 2b10 	vmov	r2, r3, d0
 8001808:	4620      	mov	r0, r4
 800180a:	4629      	mov	r1, r5
 800180c:	f7ff f984 	bl	8000b18 <__aeabi_dcmpge>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d033      	beq.n	800187e <PLL_step+0x33e>
		PLL_DW.UnitDelay1_DSTATE = (rtb_MathFunction1 - rtb_RoundingFunction1)
 8001816:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800181a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800181e:	f7fe fd3d 	bl	800029c <__aeabi_dsub>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
				* Initial / rtb_MathFunction1
 800182a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800182e:	f7fe feed 	bl	800060c <__aeabi_dmul>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800183e:	f7ff f80f 	bl	8000860 <__aeabi_ddiv>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4614      	mov	r4, r2
 8001848:	461d      	mov	r5, r3
				+ (PLL_DW.DiscreteTimeIntegrator_DSTATE_p
 800184a:	4b55      	ldr	r3, [pc, #340]	; (80019a0 <PLL_step+0x460>)
 800184c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
						- rtb_ImpAsg_InsertedFor_Out1_at_) * rtb_Saturation;
 8001850:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001854:	f7fe fd22 	bl	800029c <__aeabi_dsub>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001864:	f7fe fed2 	bl	800060c <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
				+ (PLL_DW.DiscreteTimeIntegrator_DSTATE_p
 800186c:	4620      	mov	r0, r4
 800186e:	4629      	mov	r1, r5
 8001870:	f7fe fd16 	bl	80002a0 <__adddf3>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
		PLL_DW.UnitDelay1_DSTATE = (rtb_MathFunction1 - rtb_RoundingFunction1)
 8001878:	4949      	ldr	r1, [pc, #292]	; (80019a0 <PLL_step+0x460>)
 800187a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	/* End of Switch: '<S6>/Switch' */

	/* DiscreteTransferFcn: '<S3>/Discrete Derivative ' incorporates:
	 *  UnitDelay: '<S6>/Unit Delay1'
	 */
	rtb_ImpAsg_InsertedFor_Out1_at_ = (PLL_DW.UnitDelay1_DSTATE
 800187e:	4b48      	ldr	r3, [pc, #288]	; (80019a0 <PLL_step+0x460>)
 8001880:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
			- -0.0005 * PLL_DW.DiscreteDerivative_states) / 0.001;
 8001884:	4b46      	ldr	r3, [pc, #280]	; (80019a0 <PLL_step+0x460>)
 8001886:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800188a:	a33b      	add	r3, pc, #236	; (adr r3, 8001978 <PLL_step+0x438>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f7fe febc 	bl	800060c <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4620      	mov	r0, r4
 800189a:	4629      	mov	r1, r5
 800189c:	f7fe fd00 	bl	80002a0 <__adddf3>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
	rtb_ImpAsg_InsertedFor_Out1_at_ = (PLL_DW.UnitDelay1_DSTATE
 80018a8:	a335      	add	r3, pc, #212	; (adr r3, 8001980 <PLL_step+0x440>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	f7fe ffd7 	bl	8000860 <__aeabi_ddiv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	 *  Gain: '<S3>/Kp4'
	 *  Sum: '<S3>/Sum6'
	 *  UnitDelay: '<S6>/Unit Delay1'
	 */
	rtb_Saturation = fmax(
			(180.0 * PLL_DW.UnitDelay1_DSTATE
 80018ba:	4b39      	ldr	r3, [pc, #228]	; (80019a0 <PLL_step+0x460>)
 80018bc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	4b3a      	ldr	r3, [pc, #232]	; (80019b0 <PLL_step+0x470>)
 80018c6:	f7fe fea1 	bl	800060c <__aeabi_dmul>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
					+ PLL_DW.DiscreteTimeIntegrator_DSTATE_c)
 80018d2:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <PLL_step+0x460>)
 80018d4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80018d8:	f7fe fce2 	bl	80002a0 <__adddf3>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4614      	mov	r4, r2
 80018e2:	461d      	mov	r5, r3
					+ (rtb_ImpAsg_InsertedFor_Out1_at_
							- PLL_DW.DiscreteDerivative_states), 0.0);
 80018e4:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <PLL_step+0x460>)
 80018e6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80018ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80018ee:	f7fe fcd5 	bl	800029c <__aeabi_dsub>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
	rtb_Saturation = fmax(
 80018f6:	4620      	mov	r0, r4
 80018f8:	4629      	mov	r1, r5
 80018fa:	f7fe fcd1 	bl	80002a0 <__adddf3>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	ec43 2b17 	vmov	d7, r2, r3
 8001906:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8001988 <PLL_step+0x448>
 800190a:	eeb0 0a47 	vmov.f32	s0, s14
 800190e:	eef0 0a67 	vmov.f32	s1, s15
 8001912:	f006 fde3 	bl	80084dc <fmax>
 8001916:	ed87 0b06 	vstr	d0, [r7, #24]

	/* Gain: '<S2>/Gain10' */
	rtb_MathFunction1 = 0.15915494309189535 * rtb_Saturation;
 800191a:	a31d      	add	r3, pc, #116	; (adr r3, 8001990 <PLL_step+0x450>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001924:	f7fe fe72 	bl	800060c <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	/* RateLimiter: '<S2>/Rate Limiter' */
	rtb_RoundingFunction1 = rtb_MathFunction1 - PLL_DW.PrevY;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <PLL_step+0x460>)
 8001932:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001936:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800193a:	f7fe fcaf 	bl	800029c <__aeabi_dsub>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (rtb_RoundingFunction1 > 0.006) {
 8001946:	a314      	add	r3, pc, #80	; (adr r3, 8001998 <PLL_step+0x458>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001950:	f7ff f8ec 	bl	8000b2c <__aeabi_dcmpgt>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d02c      	beq.n	80019b4 <PLL_step+0x474>
		rtb_MathFunction1 = PLL_DW.PrevY + 0.006;
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <PLL_step+0x460>)
 800195c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001960:	a30d      	add	r3, pc, #52	; (adr r3, 8001998 <PLL_step+0x458>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7fe fc9b 	bl	80002a0 <__adddf3>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001972:	e035      	b.n	80019e0 <PLL_step+0x4a0>
 8001974:	f3af 8000 	nop.w
 8001978:	d2f1a9fc 	.word	0xd2f1a9fc
 800197c:	3f40624d 	.word	0x3f40624d
 8001980:	d2f1a9fc 	.word	0xd2f1a9fc
 8001984:	3f50624d 	.word	0x3f50624d
	...
 8001990:	6dc9c883 	.word	0x6dc9c883
 8001994:	3fc45f30 	.word	0x3fc45f30
 8001998:	bc6a7efa 	.word	0xbc6a7efa
 800199c:	3f789374 	.word	0x3f789374
 80019a0:	20000648 	.word	0x20000648
 80019a4:	3ff00000 	.word	0x3ff00000
 80019a8:	20000638 	.word	0x20000638
 80019ac:	40490000 	.word	0x40490000
 80019b0:	40668000 	.word	0x40668000
	} else if (rtb_RoundingFunction1 < -0.006) {
 80019b4:	a3a9      	add	r3, pc, #676	; (adr r3, 8001c5c <PLL_step+0x71c>)
 80019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019be:	f7ff f897 	bl	8000af0 <__aeabi_dcmplt>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00b      	beq.n	80019e0 <PLL_step+0x4a0>
		rtb_MathFunction1 = PLL_DW.PrevY - 0.006;
 80019c8:	4ba3      	ldr	r3, [pc, #652]	; (8001c58 <PLL_step+0x718>)
 80019ca:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80019ce:	a388      	add	r3, pc, #544	; (adr r3, 8001bf0 <PLL_step+0x6b0>)
 80019d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d4:	f7fe fc62 	bl	800029c <__aeabi_dsub>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}

	PLL_DW.PrevY = rtb_MathFunction1;
 80019e0:	499d      	ldr	r1, [pc, #628]	; (8001c58 <PLL_step+0x718>)
 80019e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019e6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	/* End of RateLimiter: '<S2>/Rate Limiter' */

	/* UnitDelay: '<S8>/Delay_x1' */
	rtb_RoundingFunction1 = PLL_DW.Delay_x1_DSTATE;
 80019ea:	4b9b      	ldr	r3, [pc, #620]	; (8001c58 <PLL_step+0x718>)
 80019ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80019f0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	/* UnitDelay: '<S8>/Delay_x2' */
	rtb_x2k = PLL_DW.Delay_x2_DSTATE;
 80019f4:	4b98      	ldr	r3, [pc, #608]	; (8001c58 <PLL_step+0x718>)
 80019f6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80019fa:	e9c7 2302 	strd	r2, r3, [r7, #8]

	/* Gain: '<S9>/A21' incorporates:
	 *  UnitDelay: '<S8>/Delay_x1'
	 */
	rtb_A21 = -11.682623176051715 * PLL_DW.Delay_x1_DSTATE;
 80019fe:	4b96      	ldr	r3, [pc, #600]	; (8001c58 <PLL_step+0x718>)
 8001a00:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001a04:	a37c      	add	r3, pc, #496	; (adr r3, 8001bf8 <PLL_step+0x6b8>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	f7fe fdff 	bl	800060c <__aeabi_dmul>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	e9c7 2300 	strd	r2, r3, [r7]
	 *  Gain: '<S9>/A12'
	 *  Sum: '<S9>/sum2'
	 *  UnitDelay: '<S8>/Delay_x1'
	 *  UnitDelay: '<S8>/Delay_x2'
	 */
	PLL_DW.Delay_x1_DSTATE = (0.99707934420598721 * PLL_DW.Delay_x1_DSTATE
 8001a16:	4b90      	ldr	r3, [pc, #576]	; (8001c58 <PLL_step+0x718>)
 8001a18:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001a1c:	a378      	add	r3, pc, #480	; (adr r3, 8001c00 <PLL_step+0x6c0>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fdf3 	bl	800060c <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4614      	mov	r4, r2
 8001a2c:	461d      	mov	r5, r3
			+ 0.00047299218241765627 * PLL_DW.Delay_x2_DSTATE)
 8001a2e:	4b8a      	ldr	r3, [pc, #552]	; (8001c58 <PLL_step+0x718>)
 8001a30:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001a34:	a374      	add	r3, pc, #464	; (adr r3, 8001c08 <PLL_step+0x6c8>)
 8001a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3a:	f7fe fde7 	bl	800060c <__aeabi_dmul>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4620      	mov	r0, r4
 8001a44:	4629      	mov	r1, r5
 8001a46:	f7fe fc2b 	bl	80002a0 <__adddf3>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4614      	mov	r4, r2
 8001a50:	461d      	mov	r5, r3
			+ 0.00023649609120882098 * rtb_MathFunction1;
 8001a52:	a36f      	add	r3, pc, #444	; (adr r3, 8001c10 <PLL_step+0x6d0>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a5c:	f7fe fdd6 	bl	800060c <__aeabi_dmul>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4620      	mov	r0, r4
 8001a66:	4629      	mov	r1, r5
 8001a68:	f7fe fc1a 	bl	80002a0 <__adddf3>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
	PLL_DW.Delay_x1_DSTATE = (0.99707934420598721 * PLL_DW.Delay_x1_DSTATE
 8001a70:	4979      	ldr	r1, [pc, #484]	; (8001c58 <PLL_step+0x718>)
 8001a72:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	 *  Gain: '<S10>/B21'
	 *  Gain: '<S9>/A22'
	 *  Sum: '<S9>/sum3'
	 *  UnitDelay: '<S8>/Delay_x2'
	 */
	PLL_DW.Delay_x2_DSTATE = (0.89196872967067631 * PLL_DW.Delay_x2_DSTATE
 8001a76:	4b78      	ldr	r3, [pc, #480]	; (8001c58 <PLL_step+0x718>)
 8001a78:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001a7c:	a366      	add	r3, pc, #408	; (adr r3, 8001c18 <PLL_step+0x6d8>)
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	f7fe fdc3 	bl	800060c <__aeabi_dmul>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
			+ rtb_A21) + 0.94598436483533821 * rtb_MathFunction1;
 8001a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a92:	f7fe fc05 	bl	80002a0 <__adddf3>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4614      	mov	r4, r2
 8001a9c:	461d      	mov	r5, r3
 8001a9e:	a360      	add	r3, pc, #384	; (adr r3, 8001c20 <PLL_step+0x6e0>)
 8001aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001aa8:	f7fe fdb0 	bl	800060c <__aeabi_dmul>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	f7fe fbf4 	bl	80002a0 <__adddf3>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
	PLL_DW.Delay_x2_DSTATE = (0.89196872967067631 * PLL_DW.Delay_x2_DSTATE
 8001abc:	4966      	ldr	r1, [pc, #408]	; (8001c58 <PLL_step+0x718>)
 8001abe:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 *  Gain: '<S11>/C12'
	 *  Gain: '<S8>/D*u(k)'
	 *  Sum: '<S11>/sum2'
	 *  UnitDelay: '<S2>/Unit Delay'
	 */
	PLL_DW.UnitDelay_DSTATE = (12.331665457862051 * rtb_RoundingFunction1
 8001ac2:	a359      	add	r3, pc, #356	; (adr r3, 8001c28 <PLL_step+0x6e8>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001acc:	f7fe fd9e 	bl	800060c <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4614      	mov	r4, r2
 8001ad6:	461d      	mov	r5, r3
			+ 0.0029206557940127608 * rtb_x2k)
 8001ad8:	a355      	add	r3, pc, #340	; (adr r3, 8001c30 <PLL_step+0x6f0>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ae2:	f7fe fd93 	bl	800060c <__aeabi_dmul>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4620      	mov	r0, r4
 8001aec:	4629      	mov	r1, r5
 8001aee:	f7fe fbd7 	bl	80002a0 <__adddf3>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4614      	mov	r4, r2
 8001af8:	461d      	mov	r5, r3
			+ 0.0014603278970063804 * rtb_MathFunction1;
 8001afa:	a34f      	add	r3, pc, #316	; (adr r3, 8001c38 <PLL_step+0x6f8>)
 8001afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b00:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b04:	f7fe fd82 	bl	800060c <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	4629      	mov	r1, r5
 8001b10:	f7fe fbc6 	bl	80002a0 <__adddf3>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
	PLL_DW.UnitDelay_DSTATE = (12.331665457862051 * rtb_RoundingFunction1
 8001b18:	494f      	ldr	r1, [pc, #316]	; (8001c58 <PLL_step+0x718>)
 8001b1a:	e9c1 2300 	strd	r2, r3, [r1]

	/* Update for DiscreteIntegrator: '<S2>/Discrete-Time Integrator' */
	PLL_DW.DiscreteTimeIntegrator_DSTATE += 0.0005 * rtb_Saturation;
 8001b1e:	4b4e      	ldr	r3, [pc, #312]	; (8001c58 <PLL_step+0x718>)
 8001b20:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001b24:	a346      	add	r3, pc, #280	; (adr r3, 8001c40 <PLL_step+0x700>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b2e:	f7fe fd6d 	bl	800060c <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4620      	mov	r0, r4
 8001b38:	4629      	mov	r1, r5
 8001b3a:	f7fe fbb1 	bl	80002a0 <__adddf3>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4945      	ldr	r1, [pc, #276]	; (8001c58 <PLL_step+0x718>)
 8001b44:	e9c1 2302 	strd	r2, r3, [r1, #8]
	PLL_DW.DiscreteTimeIntegrator_PrevRese = (int8_T) rtb_RelationalOperator;
 8001b48:	f997 2023 	ldrsb.w	r2, [r7, #35]	; 0x23
 8001b4c:	4b42      	ldr	r3, [pc, #264]	; (8001c58 <PLL_step+0x718>)
 8001b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/* Update for DiscreteIntegrator: '<S6>/Discrete-Time Integrator' */
	PLL_DW.DiscreteTimeIntegrator_SYSTEM_E = 0U;
 8001b52:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <PLL_step+0x718>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	PLL_DW.DiscreteTimeIntegrator_DSTATE_p += 0.00025 * Initial;
 8001b5a:	4b3f      	ldr	r3, [pc, #252]	; (8001c58 <PLL_step+0x718>)
 8001b5c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001b60:	a339      	add	r3, pc, #228	; (adr r3, 8001c48 <PLL_step+0x708>)
 8001b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b66:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b6a:	f7fe fd4f 	bl	800060c <__aeabi_dmul>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4620      	mov	r0, r4
 8001b74:	4629      	mov	r1, r5
 8001b76:	f7fe fb93 	bl	80002a0 <__adddf3>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4936      	ldr	r1, [pc, #216]	; (8001c58 <PLL_step+0x718>)
 8001b80:	e9c1 2304 	strd	r2, r3, [r1, #16]

	/* Update for DiscreteTransferFcn: '<S3>/Discrete Derivative ' */
	PLL_DW.DiscreteDerivative_states = rtb_ImpAsg_InsertedFor_Out1_at_;
 8001b84:	4934      	ldr	r1, [pc, #208]	; (8001c58 <PLL_step+0x718>)
 8001b86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b8a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	/* Update for DiscreteIntegrator: '<S3>/Discrete-Time Integrator' incorporates:
	 *  UnitDelay: '<S6>/Unit Delay1'
	 */
	PLL_DW.DiscreteTimeIntegrator_DSTATE_c += 1.6 * PLL_DW.UnitDelay1_DSTATE;
 8001b8e:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <PLL_step+0x718>)
 8001b90:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <PLL_step+0x718>)
 8001b96:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001b9a:	a32d      	add	r3, pc, #180	; (adr r3, 8001c50 <PLL_step+0x710>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	f7fe fd34 	bl	800060c <__aeabi_dmul>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4620      	mov	r0, r4
 8001baa:	4629      	mov	r1, r5
 8001bac:	f7fe fb78 	bl	80002a0 <__adddf3>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4928      	ldr	r1, [pc, #160]	; (8001c58 <PLL_step+0x718>)
 8001bb6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	if (PLL_DW.DiscreteTimeIntegrator_DSTATE_c < 0.0) {
 8001bba:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <PLL_step+0x718>)
 8001bbc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	f7fe ff92 	bl	8000af0 <__aeabi_dcmplt>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d100      	bne.n	8001bd4 <PLL_step+0x694>
		PLL_DW.DiscreteTimeIntegrator_DSTATE_c = 0.0;
	}

	/* End of Update for DiscreteIntegrator: '<S3>/Discrete-Time Integrator' */
}
 8001bd2:	e006      	b.n	8001be2 <PLL_step+0x6a2>
		PLL_DW.DiscreteTimeIntegrator_DSTATE_c = 0.0;
 8001bd4:	4920      	ldr	r1, [pc, #128]	; (8001c58 <PLL_step+0x718>)
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8001be2:	bf00      	nop
 8001be4:	3740      	adds	r7, #64	; 0x40
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bea:	bf00      	nop
 8001bec:	f3af 8000 	nop.w
 8001bf0:	bc6a7efa 	.word	0xbc6a7efa
 8001bf4:	3f789374 	.word	0x3f789374
 8001bf8:	c8f1447d 	.word	0xc8f1447d
 8001bfc:	c0275d80 	.word	0xc0275d80
 8001c00:	f0dc380d 	.word	0xf0dc380d
 8001c04:	3fefe812 	.word	0x3fefe812
 8001c08:	f46a5508 	.word	0xf46a5508
 8001c0c:	3f3eff7d 	.word	0x3f3eff7d
 8001c10:	f46a5400 	.word	0xf46a5400
 8001c14:	3f2eff7d 	.word	0x3f2eff7d
 8001c18:	015fafe1 	.word	0x015fafe1
 8001c1c:	3fec8b02 	.word	0x3fec8b02
 8001c20:	00afd7f1 	.word	0x00afd7f1
 8001c24:	3fee4581 	.word	0x3fee4581
 8001c28:	0e0d75f4 	.word	0x0e0d75f4
 8001c2c:	4028a9d0 	.word	0x4028a9d0
 8001c30:	23c7f2b3 	.word	0x23c7f2b3
 8001c34:	3f67ed0f 	.word	0x3f67ed0f
 8001c38:	23c7f2b3 	.word	0x23c7f2b3
 8001c3c:	3f57ed0f 	.word	0x3f57ed0f
 8001c40:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c44:	3f40624d 	.word	0x3f40624d
 8001c48:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c4c:	3f30624d 	.word	0x3f30624d
 8001c50:	9999999a 	.word	0x9999999a
 8001c54:	3ff99999 	.word	0x3ff99999
 8001c58:	20000648 	.word	0x20000648
 8001c5c:	bc6a7efa 	.word	0xbc6a7efa
 8001c60:	bf789374 	.word	0xbf789374
 8001c64:	00000000 	.word	0x00000000

08001c68 <PLL_initialize>:

/* Model initialize function */
void PLL_initialize(void) {
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
	/* Start for InitialCondition: '<S2>/Initial' */
	PLL_DW.Initial_FirstOutputTime = true;
 8001c6c:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <PLL_initialize+0x88>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

	/* Start for Probe: '<S6>/Probe' */
	PLL_B.Probe[0] = 0.0005;
 8001c74:	491f      	ldr	r1, [pc, #124]	; (8001cf4 <PLL_initialize+0x8c>)
 8001c76:	a318      	add	r3, pc, #96	; (adr r3, 8001cd8 <PLL_initialize+0x70>)
 8001c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7c:	e9c1 2300 	strd	r2, r3, [r1]
	PLL_B.Probe[1] = 0.0;
 8001c80:	491c      	ldr	r1, [pc, #112]	; (8001cf4 <PLL_initialize+0x8c>)
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	e9c1 2302 	strd	r2, r3, [r1, #8]

	/* InitializeConditions for UnitDelay: '<S2>/Unit Delay' */
	PLL_DW.UnitDelay_DSTATE = 50.0;
 8001c8e:	4918      	ldr	r1, [pc, #96]	; (8001cf0 <PLL_initialize+0x88>)
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <PLL_initialize+0x90>)
 8001c96:	e9c1 2300 	strd	r2, r3, [r1]

	/* InitializeConditions for DiscreteIntegrator: '<S2>/Discrete-Time Integrator' */
	PLL_DW.DiscreteTimeIntegrator_PrevRese = 2;
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <PLL_initialize+0x88>)
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/* InitializeConditions for DiscreteIntegrator: '<S3>/Discrete-Time Integrator' */
	PLL_DW.DiscreteTimeIntegrator_DSTATE_c = 314.15926535897933;
 8001ca2:	4913      	ldr	r1, [pc, #76]	; (8001cf0 <PLL_initialize+0x88>)
 8001ca4:	a30e      	add	r3, pc, #56	; (adr r3, 8001ce0 <PLL_initialize+0x78>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	/* InitializeConditions for RateLimiter: '<S2>/Rate Limiter' */
	PLL_DW.PrevY = 50.0;
 8001cae:	4910      	ldr	r1, [pc, #64]	; (8001cf0 <PLL_initialize+0x88>)
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <PLL_initialize+0x90>)
 8001cb6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	/* InitializeConditions for UnitDelay: '<S8>/Delay_x1' */
	PLL_DW.Delay_x1_DSTATE = 4.0486813217365336;
 8001cba:	490d      	ldr	r1, [pc, #52]	; (8001cf0 <PLL_initialize+0x88>)
 8001cbc:	a30a      	add	r3, pc, #40	; (adr r3, 8001ce8 <PLL_initialize+0x80>)
 8001cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* Enable for DiscreteIntegrator: '<S6>/Discrete-Time Integrator' */
	PLL_DW.DiscreteTimeIntegrator_SYSTEM_E = 1U;
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <PLL_initialize+0x88>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001cdc:	3f40624d 	.word	0x3f40624d
 8001ce0:	59d5433b 	.word	0x59d5433b
 8001ce4:	4073a28c 	.word	0x4073a28c
 8001ce8:	8433234b 	.word	0x8433234b
 8001cec:	401031d9 	.word	0x401031d9
 8001cf0:	20000648 	.word	0x20000648
 8001cf4:	20000638 	.word	0x20000638
 8001cf8:	40490000 	.word	0x40490000

08001cfc <runTest>:
};

/**
 * Runs the chosen tests
 */
extern "C" void runTest() {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
	TestApplication myTest;
//	myTest.testPeriphals();
//	myTest.testPLL();
//	myTest.testInput();
	myTest.testPhaseDetection();
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 f807 	bl	8001d18 <_ZN15TestApplication18testPhaseDetectionEv>

}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	0000      	movs	r0, r0
 8001d14:	0000      	movs	r0, r0
	...

08001d18 <_ZN15TestApplication18testPhaseDetectionEv>:
			prevState[i] = currState[i];
		}
	}
}

void TestApplication::testPhaseDetection() {
 8001d18:	b5b0      	push	{r4, r5, r7, lr}
 8001d1a:	b09a      	sub	sp, #104	; 0x68
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	6078      	str	r0, [r7, #4]
	RotaryEncoder encoder(&htim1);
 8001d20:	f107 0020 	add.w	r0, r7, #32
 8001d24:	2300      	movs	r3, #0
 8001d26:	2278      	movs	r2, #120	; 0x78
 8001d28:	49bf      	ldr	r1, [pc, #764]	; (8002028 <_ZN15TestApplication18testPhaseDetectionEv+0x310>)
 8001d2a:	f7ff fb1b 	bl	8001364 <_ZN13RotaryEncoderC1EP17TIM_HandleTypeDefss>
	SSH1106 display;
 8001d2e:	f107 031c 	add.w	r3, r7, #28
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe ffb2 	bl	8000c9c <_ZN7SSH1106C1Ev>

	// Initialize next update time
	uint32_t nextUpdate = HAL_GetTick() + 100;
 8001d38:	f000 ffd6 	bl	8002ce8 <HAL_GetTick>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	3364      	adds	r3, #100	; 0x64
 8001d40:	65fb      	str	r3, [r7, #92]	; 0x5c

	// a buffer to save the numerical values
	char buffer[16];

	// time difference between the phase and zero-crossing of the input signal
	double phaseDiff = 0;
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	double offset = 0;
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	bool startTrig = false;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	// saves the previous input state for PA1[0], PA2[1] and PA7[2]
	GPIO_PinState prevState = GPIO_PIN_RESET;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a

	// saves the current input state for PA1[0], PA2[1] and PA7[2]
	GPIO_PinState currState = GPIO_PIN_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	while (true) {
		// Check if it's time to update the display
		if (HAL_GetTick() >= nextUpdate) {
 8001d6c:	f000 ffbc 	bl	8002ce8 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d74:	4293      	cmp	r3, r2
 8001d76:	bf94      	ite	ls
 8001d78:	2301      	movls	r3, #1
 8001d7a:	2300      	movhi	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80b8 	beq.w	8001ef4 <_ZN15TestApplication18testPhaseDetectionEv+0x1dc>
			// Get the current frequency
			double f = PLL_Y.Frequency;
 8001d84:	4ba9      	ldr	r3, [pc, #676]	; (800202c <_ZN15TestApplication18testPhaseDetectionEv+0x314>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fbe7 	bl	800055c <__aeabi_f2d>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

			// Calculate the current period time
			double T = 1000.0 / f;
 8001d96:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d9a:	f04f 0000 	mov.w	r0, #0
 8001d9e:	49a4      	ldr	r1, [pc, #656]	; (8002030 <_ZN15TestApplication18testPhaseDetectionEv+0x318>)
 8001da0:	f7fe fd5e 	bl	8000860 <__aeabi_ddiv>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

			// Round the numbers to two decimal places
			f = std::round(f * 100) / 100;
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	4ba0      	ldr	r3, [pc, #640]	; (8002034 <_ZN15TestApplication18testPhaseDetectionEv+0x31c>)
 8001db2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001db6:	f7fe fc29 	bl	800060c <__aeabi_dmul>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	ec43 2b17 	vmov	d7, r2, r3
 8001dc2:	eeb0 0a47 	vmov.f32	s0, s14
 8001dc6:	eef0 0a67 	vmov.f32	s1, s15
 8001dca:	f006 fb3f 	bl	800844c <round>
 8001dce:	ec51 0b10 	vmov	r0, r1, d0
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	4b97      	ldr	r3, [pc, #604]	; (8002034 <_ZN15TestApplication18testPhaseDetectionEv+0x31c>)
 8001dd8:	f7fe fd42 	bl	8000860 <__aeabi_ddiv>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			T = std::round(T * 100) / 100;
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	4b92      	ldr	r3, [pc, #584]	; (8002034 <_ZN15TestApplication18testPhaseDetectionEv+0x31c>)
 8001dea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001dee:	f7fe fc0d 	bl	800060c <__aeabi_dmul>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	ec43 2b17 	vmov	d7, r2, r3
 8001dfa:	eeb0 0a47 	vmov.f32	s0, s14
 8001dfe:	eef0 0a67 	vmov.f32	s1, s15
 8001e02:	f006 fb23 	bl	800844c <round>
 8001e06:	ec51 0b10 	vmov	r0, r1, d0
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	4b89      	ldr	r3, [pc, #548]	; (8002034 <_ZN15TestApplication18testPhaseDetectionEv+0x31c>)
 8001e10:	f7fe fd26 	bl	8000860 <__aeabi_ddiv>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

			// Update display with frequency
			display.setCursor(1, 8);
 8001e1c:	f107 031c 	add.w	r3, r7, #28
 8001e20:	2208      	movs	r2, #8
 8001e22:	2101      	movs	r1, #1
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe ffa1 	bl	8000d6c <_ZN7SSH11069setCursorEtt>
			display.write("f: ");
 8001e2a:	f107 031c 	add.w	r3, r7, #28
 8001e2e:	4982      	ldr	r1, [pc, #520]	; (8002038 <_ZN15TestApplication18testPhaseDetectionEv+0x320>)
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe ff47 	bl	8000cc4 <_ZN7SSH11065writeEPKc>
			snprintf(buffer, sizeof(buffer), "%.1f Hz", f);
 8001e36:	f107 000c 	add.w	r0, r7, #12
 8001e3a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e3e:	e9cd 2300 	strd	r2, r3, [sp]
 8001e42:	4a7e      	ldr	r2, [pc, #504]	; (800203c <_ZN15TestApplication18testPhaseDetectionEv+0x324>)
 8001e44:	2110      	movs	r1, #16
 8001e46:	f008 f81f 	bl	8009e88 <sniprintf>
			display.write(buffer);
 8001e4a:	f107 020c 	add.w	r2, r7, #12
 8001e4e:	f107 031c 	add.w	r3, r7, #28
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe ff35 	bl	8000cc4 <_ZN7SSH11065writeEPKc>

			// Update display with period time
			display.setCursor(1, 18);
 8001e5a:	f107 031c 	add.w	r3, r7, #28
 8001e5e:	2212      	movs	r2, #18
 8001e60:	2101      	movs	r1, #1
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe ff82 	bl	8000d6c <_ZN7SSH11069setCursorEtt>
			display.write("T: ");
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4974      	ldr	r1, [pc, #464]	; (8002040 <_ZN15TestApplication18testPhaseDetectionEv+0x328>)
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe ff28 	bl	8000cc4 <_ZN7SSH11065writeEPKc>
			snprintf(buffer, sizeof(buffer), "%.1f ms", T);
 8001e74:	f107 000c 	add.w	r0, r7, #12
 8001e78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e7c:	e9cd 2300 	strd	r2, r3, [sp]
 8001e80:	4a70      	ldr	r2, [pc, #448]	; (8002044 <_ZN15TestApplication18testPhaseDetectionEv+0x32c>)
 8001e82:	2110      	movs	r1, #16
 8001e84:	f008 f800 	bl	8009e88 <sniprintf>
			display.write(buffer);
 8001e88:	f107 020c 	add.w	r2, r7, #12
 8001e8c:	f107 031c 	add.w	r3, r7, #28
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe ff16 	bl	8000cc4 <_ZN7SSH11065writeEPKc>

			// Update display with phase
			display.setCursor(1, 28);
 8001e98:	f107 031c 	add.w	r3, r7, #28
 8001e9c:	221c      	movs	r2, #28
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe ff63 	bl	8000d6c <_ZN7SSH11069setCursorEtt>
			display.write("Phase: ");
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	4967      	ldr	r1, [pc, #412]	; (8002048 <_ZN15TestApplication18testPhaseDetectionEv+0x330>)
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe ff09 	bl	8000cc4 <_ZN7SSH11065writeEPKc>
			snprintf(buffer, sizeof(buffer), "%03d Grad",
					(int) encoder.getPosition());
 8001eb2:	f107 0320 	add.w	r3, r7, #32
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fa7a 	bl	80013b0 <_ZN13RotaryEncoder11getPositionEv>
 8001ebc:	4603      	mov	r3, r0
			snprintf(buffer, sizeof(buffer), "%03d Grad",
 8001ebe:	f107 000c 	add.w	r0, r7, #12
 8001ec2:	4a62      	ldr	r2, [pc, #392]	; (800204c <_ZN15TestApplication18testPhaseDetectionEv+0x334>)
 8001ec4:	2110      	movs	r1, #16
 8001ec6:	f007 ffdf 	bl	8009e88 <sniprintf>
			display.write(buffer);
 8001eca:	f107 020c 	add.w	r2, r7, #12
 8001ece:	f107 031c 	add.w	r3, r7, #28
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fef5 	bl	8000cc4 <_ZN7SSH11065writeEPKc>

			// Update position periodically
			encoder.updatePosition();
 8001eda:	f107 0320 	add.w	r3, r7, #32
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fa7f 	bl	80013e2 <_ZN13RotaryEncoder14updatePositionEv>

			// Update the display and set time for next update
			display.updateDisplay();
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe ff51 	bl	8000d90 <_ZN7SSH110613updateDisplayEv>
			nextUpdate += 100;
 8001eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef0:	3364      	adds	r3, #100	; 0x64
 8001ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
		}

		currState = debounce(GPIOA, GPIO_PIN_7);
 8001ef4:	2280      	movs	r2, #128	; 0x80
 8001ef6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8d0 	bl	80020a0 <_ZN15TestApplication8debounceEP12GPIO_TypeDeft>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		//calculates the time shift
		phaseDiff = ((1e6 / PLL_Y.Frequency) / 360) * encoder.getPosition();
 8001f06:	4b49      	ldr	r3, [pc, #292]	; (800202c <_ZN15TestApplication18testPhaseDetectionEv+0x314>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fb26 	bl	800055c <__aeabi_f2d>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	a142      	add	r1, pc, #264	; (adr r1, 8002020 <_ZN15TestApplication18testPhaseDetectionEv+0x308>)
 8001f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f1a:	f7fe fca1 	bl	8000860 <__aeabi_ddiv>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	4b49      	ldr	r3, [pc, #292]	; (8002050 <_ZN15TestApplication18testPhaseDetectionEv+0x338>)
 8001f2c:	f7fe fc98 	bl	8000860 <__aeabi_ddiv>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4614      	mov	r4, r2
 8001f36:	461d      	mov	r5, r3
 8001f38:	f107 0320 	add.w	r3, r7, #32
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fa37 	bl	80013b0 <_ZN13RotaryEncoder11getPositionEv>
 8001f42:	4603      	mov	r3, r0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe faf7 	bl	8000538 <__aeabi_i2d>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4620      	mov	r0, r4
 8001f50:	4629      	mov	r1, r5
 8001f52:	f7fe fb5b 	bl	800060c <__aeabi_dmul>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

		// If the Start-Button was pressed,
		if ((currState == GPIO_PIN_SET) && (prevState == GPIO_PIN_RESET)) {
 8001f5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d106      	bne.n	8001f74 <_ZN15TestApplication18testPhaseDetectionEv+0x25c>
 8001f66:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d102      	bne.n	8001f74 <_ZN15TestApplication18testPhaseDetectionEv+0x25c>
			// save the trigger
			startTrig = true;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		}

		// If the phase angle is nearly zero,
		if ((PLL_Y.Phase >= 0) && (PLL_Y.Phase <= 10)) {
 8001f74:	4b2d      	ldr	r3, [pc, #180]	; (800202c <_ZN15TestApplication18testPhaseDetectionEv+0x314>)
 8001f76:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f82:	db69      	blt.n	8002058 <_ZN15TestApplication18testPhaseDetectionEv+0x340>
 8001f84:	4b29      	ldr	r3, [pc, #164]	; (800202c <_ZN15TestApplication18testPhaseDetectionEv+0x314>)
 8001f86:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f8a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f96:	d85f      	bhi.n	8002058 <_ZN15TestApplication18testPhaseDetectionEv+0x340>

			// and the Start-Button was once pressed
			if (startTrig) {
 8001f98:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d067      	beq.n	8002070 <_ZN15TestApplication18testPhaseDetectionEv+0x358>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa0:	b672      	cpsid	i
}
 8001fa2:	bf00      	nop
				// turn all Interrupts off
				__disable_irq();

				// compensate the offset between the input signal and PLL
				offset = (1e6 / PLL_Y.Frequency) - 930;
 8001fa4:	4b21      	ldr	r3, [pc, #132]	; (800202c <_ZN15TestApplication18testPhaseDetectionEv+0x314>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fad7 	bl	800055c <__aeabi_f2d>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	a11b      	add	r1, pc, #108	; (adr r1, 8002020 <_ZN15TestApplication18testPhaseDetectionEv+0x308>)
 8001fb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001fb8:	f7fe fc52 	bl	8000860 <__aeabi_ddiv>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	4b22      	ldr	r3, [pc, #136]	; (8002054 <_ZN15TestApplication18testPhaseDetectionEv+0x33c>)
 8001fca:	f7fe f967 	bl	800029c <__aeabi_dsub>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				delay_us(offset);
 8001fd6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fda:	f7fe fdef 	bl	8000bbc <__aeabi_d2uiz>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f870 	bl	80020c8 <_ZN15TestApplication8delay_usEm>

				// A pulse is given on PA5 (A4)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001fe8:	2201      	movs	r2, #1
 8001fea:	2120      	movs	r1, #32
 8001fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff0:	f002 fb88 	bl	8004704 <HAL_GPIO_WritePin>
				delay_us(phaseDiff);
 8001ff4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001ff8:	f7fe fde0 	bl	8000bbc <__aeabi_d2uiz>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4619      	mov	r1, r3
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f861 	bl	80020c8 <_ZN15TestApplication8delay_usEm>

				// A pulse is given on PA6 (A5)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8002006:	2201      	movs	r2, #1
 8002008:	2140      	movs	r1, #64	; 0x40
 800200a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800200e:	f002 fb79 	bl	8004704 <HAL_GPIO_WritePin>

				startTrig = false;
 8002012:	2300      	movs	r3, #0
 8002014:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  __ASM volatile ("cpsie i" : : : "memory");
 8002018:	b662      	cpsie	i
}
 800201a:	bf00      	nop
			if (startTrig) {
 800201c:	e028      	b.n	8002070 <_ZN15TestApplication18testPhaseDetectionEv+0x358>
 800201e:	bf00      	nop
 8002020:	00000000 	.word	0x00000000
 8002024:	412e8480 	.word	0x412e8480
 8002028:	200008d8 	.word	0x200008d8
 800202c:	2000080c 	.word	0x2000080c
 8002030:	408f4000 	.word	0x408f4000
 8002034:	40590000 	.word	0x40590000
 8002038:	0800c5b8 	.word	0x0800c5b8
 800203c:	0800c60c 	.word	0x0800c60c
 8002040:	0800c5c0 	.word	0x0800c5c0
 8002044:	0800c614 	.word	0x0800c614
 8002048:	0800c5a8 	.word	0x0800c5a8
 800204c:	0800c61c 	.word	0x0800c61c
 8002050:	40768000 	.word	0x40768000
 8002054:	408d1000 	.word	0x408d1000
				__enable_irq();
			}

		} else {
			// Otherwise, a LOW level is applied
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002058:	2200      	movs	r2, #0
 800205a:	2120      	movs	r1, #32
 800205c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002060:	f002 fb50 	bl	8004704 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8002064:	2200      	movs	r2, #0
 8002066:	2140      	movs	r1, #64	; 0x40
 8002068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800206c:	f002 fb4a 	bl	8004704 <HAL_GPIO_WritePin>
		}

		// If the Encoder was pressed,
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) {
 8002070:	2110      	movs	r1, #16
 8002072:	480a      	ldr	r0, [pc, #40]	; (800209c <_ZN15TestApplication18testPhaseDetectionEv+0x384>)
 8002074:	f002 fb2e 	bl	80046d4 <HAL_GPIO_ReadPin>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	bf0c      	ite	eq
 800207e:	2301      	moveq	r3, #1
 8002080:	2300      	movne	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d004      	beq.n	8002092 <_ZN15TestApplication18testPhaseDetectionEv+0x37a>
			// reset the current value
			encoder.resetPosition();
 8002088:	f107 0320 	add.w	r3, r7, #32
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff f99b 	bl	80013c8 <_ZN13RotaryEncoder13resetPositionEv>
		}

		prevState = currState;
 8002092:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002096:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	}
 800209a:	e667      	b.n	8001d6c <_ZN15TestApplication18testPhaseDetectionEv+0x54>
 800209c:	48000400 	.word	0x48000400

080020a0 <_ZN15TestApplication8debounceEP12GPIO_TypeDeft>:
}

GPIO_PinState TestApplication::debounce(GPIO_TypeDef *GPIOx,
		uint16_t GPIO_Pin) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	4613      	mov	r3, r2
 80020ac:	80fb      	strh	r3, [r7, #6]

	// Wait for debounce time
	HAL_Delay(DEBOUNCE_DELAY_MS);
 80020ae:	2003      	movs	r0, #3
 80020b0:	f000 fe26 	bl	8002d00 <HAL_Delay>
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	4619      	mov	r1, r3
 80020b8:	68b8      	ldr	r0, [r7, #8]
 80020ba:	f002 fb0b 	bl	80046d4 <HAL_GPIO_ReadPin>
 80020be:	4603      	mov	r3, r0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <_ZN15TestApplication8delay_usEm>:

void TestApplication::delay_us(uint32_t us) {
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COUNTER(&htim6, 0);  // set the counter value a 0
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <_ZN15TestApplication8delay_usEm+0x38>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6) < us)
 80020da:	bf00      	nop
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <_ZN15TestApplication8delay_usEm+0x38>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	bf8c      	ite	hi
 80020e8:	2301      	movhi	r3, #1
 80020ea:	2300      	movls	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f4      	bne.n	80020dc <_ZN15TestApplication8delay_usEm+0x14>
		;  // wait for the counter to reach the us input in the parameter
}
 80020f2:	bf00      	nop
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	20000970 	.word	0x20000970

08002104 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800210a:	463b      	mov	r3, r7
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
 8002118:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800211a:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <MX_ADC1_Init+0xbc>)
 800211c:	4a29      	ldr	r2, [pc, #164]	; (80021c4 <MX_ADC1_Init+0xc0>)
 800211e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002120:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <MX_ADC1_Init+0xbc>)
 8002122:	2200      	movs	r2, #0
 8002124:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002126:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <MX_ADC1_Init+0xbc>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800212c:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <MX_ADC1_Init+0xbc>)
 800212e:	2200      	movs	r2, #0
 8002130:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002132:	4b23      	ldr	r3, [pc, #140]	; (80021c0 <MX_ADC1_Init+0xbc>)
 8002134:	2200      	movs	r2, #0
 8002136:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002138:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <MX_ADC1_Init+0xbc>)
 800213a:	2204      	movs	r2, #4
 800213c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800213e:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <MX_ADC1_Init+0xbc>)
 8002140:	2200      	movs	r2, #0
 8002142:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002144:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <MX_ADC1_Init+0xbc>)
 8002146:	2200      	movs	r2, #0
 8002148:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <MX_ADC1_Init+0xbc>)
 800214c:	2201      	movs	r2, #1
 800214e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <MX_ADC1_Init+0xbc>)
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <MX_ADC1_Init+0xbc>)
 800215a:	2200      	movs	r2, #0
 800215c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <MX_ADC1_Init+0xbc>)
 8002160:	2200      	movs	r2, #0
 8002162:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <MX_ADC1_Init+0xbc>)
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <MX_ADC1_Init+0xbc>)
 800216e:	2200      	movs	r2, #0
 8002170:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <MX_ADC1_Init+0xbc>)
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800217a:	4811      	ldr	r0, [pc, #68]	; (80021c0 <MX_ADC1_Init+0xbc>)
 800217c:	f000 ffbe 	bl	80030fc <HAL_ADC_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002186:	f000 fa47 	bl	8002618 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800218a:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <MX_ADC1_Init+0xc4>)
 800218c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800218e:	2306      	movs	r3, #6
 8002190:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002192:	2307      	movs	r3, #7
 8002194:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8002196:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <MX_ADC1_Init+0xc8>)
 8002198:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800219a:	2304      	movs	r3, #4
 800219c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021a2:	463b      	mov	r3, r7
 80021a4:	4619      	mov	r1, r3
 80021a6:	4806      	ldr	r0, [pc, #24]	; (80021c0 <MX_ADC1_Init+0xbc>)
 80021a8:	f001 fb7e 	bl	80038a8 <HAL_ADC_ConfigChannel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80021b2:	f000 fa31 	bl	8002618 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021b6:	bf00      	nop
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000818 	.word	0x20000818
 80021c4:	50040000 	.word	0x50040000
 80021c8:	21800100 	.word	0x21800100
 80021cc:	407f0000 	.word	0x407f0000

080021d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b09e      	sub	sp, #120	; 0x78
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021e8:	f107 0310 	add.w	r3, r7, #16
 80021ec:	2254      	movs	r2, #84	; 0x54
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f008 f99b 	bl	800a52c <memset>
  if(adcHandle->Instance==ADC1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a29      	ldr	r2, [pc, #164]	; (80022a0 <HAL_ADC_MspInit+0xd0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d14b      	bne.n	8002298 <HAL_ADC_MspInit+0xc8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002200:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002204:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002206:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800220a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800220c:	2301      	movs	r3, #1
 800220e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002210:	2301      	movs	r3, #1
 8002212:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002214:	2310      	movs	r3, #16
 8002216:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002218:	2307      	movs	r3, #7
 800221a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800221c:	2302      	movs	r3, #2
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002220:	2302      	movs	r3, #2
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800222a:	f107 0310 	add.w	r3, r7, #16
 800222e:	4618      	mov	r0, r3
 8002230:	f003 fe58 	bl	8005ee4 <HAL_RCCEx_PeriphCLKConfig>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800223a:	f000 f9ed 	bl	8002618 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800223e:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <HAL_ADC_MspInit+0xd4>)
 8002240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002242:	4a18      	ldr	r2, [pc, #96]	; (80022a4 <HAL_ADC_MspInit+0xd4>)
 8002244:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800224a:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <HAL_ADC_MspInit+0xd4>)
 800224c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <HAL_ADC_MspInit+0xd4>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <HAL_ADC_MspInit+0xd4>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <HAL_ADC_MspInit+0xd4>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = L1___Pin|L1__A4_Pin;
 800226e:	2318      	movs	r3, #24
 8002270:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002272:	230b      	movs	r3, #11
 8002274:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800227e:	4619      	mov	r1, r3
 8002280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002284:	f002 f8bc 	bl	8004400 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002288:	2200      	movs	r2, #0
 800228a:	2100      	movs	r1, #0
 800228c:	2012      	movs	r0, #18
 800228e:	f002 f880 	bl	8004392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002292:	2012      	movs	r0, #18
 8002294:	f002 f899 	bl	80043ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002298:	bf00      	nop
 800229a:	3778      	adds	r7, #120	; 0x78
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	50040000 	.word	0x50040000
 80022a4:	40021000 	.word	0x40021000

080022a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ae:	f107 030c 	add.w	r3, r7, #12
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	609a      	str	r2, [r3, #8]
 80022ba:	60da      	str	r2, [r3, #12]
 80022bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022be:	4b35      	ldr	r3, [pc, #212]	; (8002394 <MX_GPIO_Init+0xec>)
 80022c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c2:	4a34      	ldr	r2, [pc, #208]	; (8002394 <MX_GPIO_Init+0xec>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ca:	4b32      	ldr	r3, [pc, #200]	; (8002394 <MX_GPIO_Init+0xec>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	4b2f      	ldr	r3, [pc, #188]	; (8002394 <MX_GPIO_Init+0xec>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	4a2e      	ldr	r2, [pc, #184]	; (8002394 <MX_GPIO_Init+0xec>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022e2:	4b2c      	ldr	r3, [pc, #176]	; (8002394 <MX_GPIO_Init+0xec>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ee:	4b29      	ldr	r3, [pc, #164]	; (8002394 <MX_GPIO_Init+0xec>)
 80022f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f2:	4a28      	ldr	r2, [pc, #160]	; (8002394 <MX_GPIO_Init+0xec>)
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022fa:	4b26      	ldr	r3, [pc, #152]	; (8002394 <MX_GPIO_Init+0xec>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Zero_Crossing_Pin|Phase_Reached_Pin|GateUnit_Pin, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	f44f 6106 	mov.w	r1, #2144	; 0x860
 800230c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002310:	f002 f9f8 	bl	8004704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002314:	2200      	movs	r2, #0
 8002316:	2108      	movs	r1, #8
 8002318:	481f      	ldr	r0, [pc, #124]	; (8002398 <MX_GPIO_Init+0xf0>)
 800231a:	f002 f9f3 	bl	8004704 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Setting_Button_1_Pin|Setting_Button_2_Pin|Start_Button_Pin;
 800231e:	2386      	movs	r3, #134	; 0x86
 8002320:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002326:	2302      	movs	r3, #2
 8002328:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	4619      	mov	r1, r3
 8002330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002334:	f002 f864 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Zero_Crossing_Pin|Phase_Reached_Pin|GateUnit_Pin;
 8002338:	f44f 6306 	mov.w	r3, #2144	; 0x860
 800233c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233e:	2301      	movs	r3, #1
 8002340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234a:	f107 030c 	add.w	r3, r7, #12
 800234e:	4619      	mov	r1, r3
 8002350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002354:	f002 f854 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002358:	2308      	movs	r3, #8
 800235a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235c:	2301      	movs	r3, #1
 800235e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2300      	movs	r3, #0
 8002366:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	4619      	mov	r1, r3
 800236e:	480a      	ldr	r0, [pc, #40]	; (8002398 <MX_GPIO_Init+0xf0>)
 8002370:	f002 f846 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encoder_SW_Pin;
 8002374:	2310      	movs	r3, #16
 8002376:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002378:	2300      	movs	r3, #0
 800237a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800237c:	2302      	movs	r3, #2
 800237e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Encoder_SW_GPIO_Port, &GPIO_InitStruct);
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	4619      	mov	r1, r3
 8002386:	4804      	ldr	r0, [pc, #16]	; (8002398 <MX_GPIO_Init+0xf0>)
 8002388:	f002 f83a 	bl	8004400 <HAL_GPIO_Init>

}
 800238c:	bf00      	nop
 800238e:	3720      	adds	r7, #32
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	48000400 	.word	0x48000400

0800239c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023a0:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <MX_I2C1_Init+0x74>)
 80023a2:	4a1c      	ldr	r2, [pc, #112]	; (8002414 <MX_I2C1_Init+0x78>)
 80023a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80023a6:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <MX_I2C1_Init+0x74>)
 80023a8:	4a1b      	ldr	r2, [pc, #108]	; (8002418 <MX_I2C1_Init+0x7c>)
 80023aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80023ac:	4b18      	ldr	r3, [pc, #96]	; (8002410 <MX_I2C1_Init+0x74>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <MX_I2C1_Init+0x74>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <MX_I2C1_Init+0x74>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <MX_I2C1_Init+0x74>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <MX_I2C1_Init+0x74>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <MX_I2C1_Init+0x74>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023d0:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <MX_I2C1_Init+0x74>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023d6:	480e      	ldr	r0, [pc, #56]	; (8002410 <MX_I2C1_Init+0x74>)
 80023d8:	f002 f9ac 	bl	8004734 <HAL_I2C_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80023e2:	f000 f919 	bl	8002618 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023e6:	2100      	movs	r1, #0
 80023e8:	4809      	ldr	r0, [pc, #36]	; (8002410 <MX_I2C1_Init+0x74>)
 80023ea:	f002 fe6f 	bl	80050cc <HAL_I2CEx_ConfigAnalogFilter>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80023f4:	f000 f910 	bl	8002618 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80023f8:	2100      	movs	r1, #0
 80023fa:	4805      	ldr	r0, [pc, #20]	; (8002410 <MX_I2C1_Init+0x74>)
 80023fc:	f002 feb1 	bl	8005162 <HAL_I2CEx_ConfigDigitalFilter>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002406:	f000 f907 	bl	8002618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	2000087c 	.word	0x2000087c
 8002414:	40005400 	.word	0x40005400
 8002418:	00702991 	.word	0x00702991

0800241c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b0a0      	sub	sp, #128	; 0x80
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002434:	f107 0318 	add.w	r3, r7, #24
 8002438:	2254      	movs	r2, #84	; 0x54
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f008 f875 	bl	800a52c <memset>
  if(i2cHandle->Instance==I2C1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a2d      	ldr	r2, [pc, #180]	; (80024fc <HAL_I2C_MspInit+0xe0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d153      	bne.n	80024f4 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800244c:	2340      	movs	r3, #64	; 0x40
 800244e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002450:	2300      	movs	r3, #0
 8002452:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002454:	f107 0318 	add.w	r3, r7, #24
 8002458:	4618      	mov	r0, r3
 800245a:	f003 fd43 	bl	8005ee4 <HAL_RCCEx_PeriphCLKConfig>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002464:	f000 f8d8 	bl	8002618 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002468:	4b25      	ldr	r3, [pc, #148]	; (8002500 <HAL_I2C_MspInit+0xe4>)
 800246a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246c:	4a24      	ldr	r2, [pc, #144]	; (8002500 <HAL_I2C_MspInit+0xe4>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002474:	4b22      	ldr	r3, [pc, #136]	; (8002500 <HAL_I2C_MspInit+0xe4>)
 8002476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002480:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <HAL_I2C_MspInit+0xe4>)
 8002482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002484:	4a1e      	ldr	r2, [pc, #120]	; (8002500 <HAL_I2C_MspInit+0xe4>)
 8002486:	f043 0302 	orr.w	r3, r3, #2
 800248a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800248c:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <HAL_I2C_MspInit+0xe4>)
 800248e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA10     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = OLED_SDA_Pin;
 8002498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800249c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800249e:	2312      	movs	r3, #18
 80024a0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a6:	2303      	movs	r3, #3
 80024a8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024aa:	2304      	movs	r3, #4
 80024ac:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(OLED_SDA_GPIO_Port, &GPIO_InitStruct);
 80024ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024b2:	4619      	mov	r1, r3
 80024b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b8:	f001 ffa2 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OLED_SCK_Pin;
 80024bc:	2340      	movs	r3, #64	; 0x40
 80024be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024c0:	2312      	movs	r3, #18
 80024c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c8:	2303      	movs	r3, #3
 80024ca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024cc:	2304      	movs	r3, #4
 80024ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(OLED_SCK_GPIO_Port, &GPIO_InitStruct);
 80024d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024d4:	4619      	mov	r1, r3
 80024d6:	480b      	ldr	r0, [pc, #44]	; (8002504 <HAL_I2C_MspInit+0xe8>)
 80024d8:	f001 ff92 	bl	8004400 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_I2C_MspInit+0xe4>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	4a07      	ldr	r2, [pc, #28]	; (8002500 <HAL_I2C_MspInit+0xe4>)
 80024e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024e6:	6593      	str	r3, [r2, #88]	; 0x58
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_I2C_MspInit+0xe4>)
 80024ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80024f4:	bf00      	nop
 80024f6:	3780      	adds	r7, #128	; 0x80
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40005400 	.word	0x40005400
 8002500:	40021000 	.word	0x40021000
 8002504:	48000400 	.word	0x48000400

08002508 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800250c:	f000 fb83 	bl	8002c16 <HAL_Init>
	/* Initialize model */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002510:	f000 f820 	bl	8002554 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002514:	f7ff fec8 	bl	80022a8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002518:	f7ff ff40 	bl	800239c <MX_I2C1_Init>
	MX_TIM1_Init();
 800251c:	f000 f9e4 	bl	80028e8 <MX_TIM1_Init>
	MX_TIM2_Init();
 8002520:	f000 fa3c 	bl	800299c <MX_TIM2_Init>
	MX_ADC1_Init();
 8002524:	f7ff fdee 	bl	8002104 <MX_ADC1_Init>
	MX_TIM6_Init();
 8002528:	f000 fa8e 	bl	8002a48 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	// Initializes the PLL
	PLL_initialize();
 800252c:	f7ff fb9c 	bl	8001c68 <PLL_initialize>

	// Starts the first ADC-Conversion
	HAL_ADC_Start_IT(&hadc1);
 8002530:	4805      	ldr	r0, [pc, #20]	; (8002548 <main+0x40>)
 8002532:	f000 ff25 	bl	8003380 <HAL_ADC_Start_IT>

	// Starts the ISR for Timer 2
	HAL_TIM_Base_Start_IT(&htim2);
 8002536:	4805      	ldr	r0, [pc, #20]	; (800254c <main+0x44>)
 8002538:	f004 f870 	bl	800661c <HAL_TIM_Base_Start_IT>

	// Starts the Timr 6 for the delay_us() function
	HAL_TIM_Base_Start(&htim6);
 800253c:	4804      	ldr	r0, [pc, #16]	; (8002550 <main+0x48>)
 800253e:	f004 f821 	bl	8006584 <HAL_TIM_Base_Start>

	// executes Tests for the Application
	runTest();
 8002542:	f7ff fbdb 	bl	8001cfc <runTest>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8002546:	e7fe      	b.n	8002546 <main+0x3e>
 8002548:	20000818 	.word	0x20000818
 800254c:	20000924 	.word	0x20000924
 8002550:	20000970 	.word	0x20000970

08002554 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b096      	sub	sp, #88	; 0x58
 8002558:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	2244      	movs	r2, #68	; 0x44
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f007 ffe2 	bl	800a52c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002568:	463b      	mov	r3, r7
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
 8002574:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8002576:	f44f 7000 	mov.w	r0, #512	; 0x200
 800257a:	f002 fe5d 	bl	8005238 <HAL_PWREx_ControlVoltageScaling>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8002584:	f000 f848 	bl	8002618 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8002588:	f002 fe38 	bl	80051fc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800258c:	4b21      	ldr	r3, [pc, #132]	; (8002614 <SystemClock_Config+0xc0>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002592:	4a20      	ldr	r2, [pc, #128]	; (8002614 <SystemClock_Config+0xc0>)
 8002594:	f023 0318 	bic.w	r3, r3, #24
 8002598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 800259c:	2314      	movs	r3, #20
 800259e:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80025a0:	2301      	movs	r3, #1
 80025a2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80025a4:	2301      	movs	r3, #1
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80025ac:	2360      	movs	r3, #96	; 0x60
 80025ae:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025b0:	2302      	movs	r3, #2
 80025b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80025b4:	2301      	movs	r3, #1
 80025b6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80025b8:	2301      	movs	r3, #1
 80025ba:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 80025bc:	2328      	movs	r3, #40	; 0x28
 80025be:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80025c0:	2307      	movs	r3, #7
 80025c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80025c4:	2302      	movs	r3, #2
 80025c6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80025c8:	2302      	movs	r3, #2
 80025ca:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	4618      	mov	r0, r3
 80025d2:	f002 fe87 	bl	80052e4 <HAL_RCC_OscConfig>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <SystemClock_Config+0x8c>
		Error_Handler();
 80025dc:	f000 f81c 	bl	8002618 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80025e0:	230f      	movs	r3, #15
 80025e2:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025e4:	2303      	movs	r3, #3
 80025e6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80025f4:	463b      	mov	r3, r7
 80025f6:	2104      	movs	r1, #4
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 fa87 	bl	8005b0c <HAL_RCC_ClockConfig>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <SystemClock_Config+0xb4>
		Error_Handler();
 8002604:	f000 f808 	bl	8002618 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8002608:	f003 fe62 	bl	80062d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800260c:	bf00      	nop
 800260e:	3758      	adds	r7, #88	; 0x58
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000

08002618 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800261c:	b672      	cpsid	i
}
 800261e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002620:	e7fe      	b.n	8002620 <Error_Handler+0x8>
	...

08002624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262a:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <HAL_MspInit+0x44>)
 800262c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262e:	4a0e      	ldr	r2, [pc, #56]	; (8002668 <HAL_MspInit+0x44>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6613      	str	r3, [r2, #96]	; 0x60
 8002636:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <HAL_MspInit+0x44>)
 8002638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_MspInit+0x44>)
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002646:	4a08      	ldr	r2, [pc, #32]	; (8002668 <HAL_MspInit+0x44>)
 8002648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264c:	6593      	str	r3, [r2, #88]	; 0x58
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_MspInit+0x44>)
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000

0800266c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002670:	e7fe      	b.n	8002670 <NMI_Handler+0x4>

08002672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002676:	e7fe      	b.n	8002676 <HardFault_Handler+0x4>

08002678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800267c:	e7fe      	b.n	800267c <MemManage_Handler+0x4>

0800267e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002682:	e7fe      	b.n	8002682 <BusFault_Handler+0x4>

08002684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002688:	e7fe      	b.n	8002688 <UsageFault_Handler+0x4>

0800268a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026b8:	f000 fb02 	bl	8002cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}

080026c0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

	// Input is set by the current ADC-Value
	PLL_U.ADC_IN = HAL_ADC_GetValue(&hadc1);
 80026c4:	4805      	ldr	r0, [pc, #20]	; (80026dc <ADC1_IRQHandler+0x1c>)
 80026c6:	f000 ff0f 	bl	80034e8 <HAL_ADC_GetValue>
 80026ca:	4603      	mov	r3, r0
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <ADC1_IRQHandler+0x20>)
 80026d0:	801a      	strh	r2, [r3, #0]

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80026d2:	4802      	ldr	r0, [pc, #8]	; (80026dc <ADC1_IRQHandler+0x1c>)
 80026d4:	f000 ff15 	bl	8003502 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */
  /* USER CODE END ADC1_IRQn 1 */
}
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20000818 	.word	0x20000818
 80026e0:	20000808 	.word	0x20000808

080026e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	// executes a step for the model
	rt_OneStep();
 80026e8:	f000 f80c 	bl	8002704 <rt_OneStep>

	// Starts a new ADC-Conversion
	HAL_ADC_Start_IT(&hadc1);
 80026ec:	4803      	ldr	r0, [pc, #12]	; (80026fc <TIM2_IRQHandler+0x18>)
 80026ee:	f000 fe47 	bl	8003380 <HAL_ADC_Start_IT>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026f2:	4803      	ldr	r0, [pc, #12]	; (8002700 <TIM2_IRQHandler+0x1c>)
 80026f4:	f004 f971 	bl	80069da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000818 	.word	0x20000818
 8002700:	20000924 	.word	0x20000924

08002704 <rt_OneStep>:

/* USER CODE BEGIN 1 */
void rt_OneStep(void) {
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
	static boolean_T OverrunFlag = false;

	/* Disable interrupts here */

	/* Check for overrun */
	if (OverrunFlag) {
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <rt_OneStep+0x28>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d004      	beq.n	800271a <rt_OneStep+0x16>
		rtmSetErrorStatus(PLL_M, "Overrun");
 8002710:	4b07      	ldr	r3, [pc, #28]	; (8002730 <rt_OneStep+0x2c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a07      	ldr	r2, [pc, #28]	; (8002734 <rt_OneStep+0x30>)
 8002716:	601a      	str	r2, [r3, #0]
		return;
 8002718:	e007      	b.n	800272a <rt_OneStep+0x26>
	}

	OverrunFlag = true;
 800271a:	4b04      	ldr	r3, [pc, #16]	; (800272c <rt_OneStep+0x28>)
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
	/* Save FPU context here (if necessary) */
	/* Re-enable timer or interrupt here */
	/* Set model inputs here */

	/* Step the model */
	PLL_step();
 8002720:	f7fe ff0e 	bl	8001540 <PLL_step>

	/* Get model outputs here */

	/* Indicate task complete */
	OverrunFlag = false;
 8002724:	4b01      	ldr	r3, [pc, #4]	; (800272c <rt_OneStep+0x28>)
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]

	/* Disable interrupts here */
	/* Restore FPU context here (if necessary) */
	/* Enable interrupts here */
}
 800272a:	bd80      	pop	{r7, pc}
 800272c:	200008d0 	.word	0x200008d0
 8002730:	0800ee44 	.word	0x0800ee44
 8002734:	0800c628 	.word	0x0800c628

08002738 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return 1;
 800273c:	2301      	movs	r3, #1
}
 800273e:	4618      	mov	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_kill>:

int _kill(int pid, int sig)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002752:	f007 ff91 	bl	800a678 <__errno>
 8002756:	4603      	mov	r3, r0
 8002758:	2216      	movs	r2, #22
 800275a:	601a      	str	r2, [r3, #0]
  return -1;
 800275c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <_exit>:

void _exit (int status)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002770:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ffe7 	bl	8002748 <_kill>
  while (1) {}    /* Make sure we hang here */
 800277a:	e7fe      	b.n	800277a <_exit+0x12>

0800277c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	e00a      	b.n	80027a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800278e:	f3af 8000 	nop.w
 8002792:	4601      	mov	r1, r0
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	60ba      	str	r2, [r7, #8]
 800279a:	b2ca      	uxtb	r2, r1
 800279c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3301      	adds	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	dbf0      	blt.n	800278e <_read+0x12>
  }

  return len;
 80027ac:	687b      	ldr	r3, [r7, #4]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e009      	b.n	80027dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	60ba      	str	r2, [r7, #8]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	3301      	adds	r3, #1
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	dbf1      	blt.n	80027c8 <_write+0x12>
  }
  return len;
 80027e4:	687b      	ldr	r3, [r7, #4]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <_close>:

int _close(int file)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002816:	605a      	str	r2, [r3, #4]
  return 0;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <_isatty>:

int _isatty(int file)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800282e:	2301      	movs	r3, #1
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002860:	4a14      	ldr	r2, [pc, #80]	; (80028b4 <_sbrk+0x5c>)
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <_sbrk+0x60>)
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800286c:	4b13      	ldr	r3, [pc, #76]	; (80028bc <_sbrk+0x64>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d102      	bne.n	800287a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <_sbrk+0x64>)
 8002876:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <_sbrk+0x68>)
 8002878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800287a:	4b10      	ldr	r3, [pc, #64]	; (80028bc <_sbrk+0x64>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4413      	add	r3, r2
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	429a      	cmp	r2, r3
 8002886:	d207      	bcs.n	8002898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002888:	f007 fef6 	bl	800a678 <__errno>
 800288c:	4603      	mov	r3, r0
 800288e:	220c      	movs	r2, #12
 8002890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002896:	e009      	b.n	80028ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002898:	4b08      	ldr	r3, [pc, #32]	; (80028bc <_sbrk+0x64>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800289e:	4b07      	ldr	r3, [pc, #28]	; (80028bc <_sbrk+0x64>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	4a05      	ldr	r2, [pc, #20]	; (80028bc <_sbrk+0x64>)
 80028a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028aa:	68fb      	ldr	r3, [r7, #12]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20010000 	.word	0x20010000
 80028b8:	00000400 	.word	0x00000400
 80028bc:	200008d4 	.word	0x200008d4
 80028c0:	20000bc0 	.word	0x20000bc0

080028c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <SystemInit+0x20>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	4a05      	ldr	r2, [pc, #20]	; (80028e4 <SystemInit+0x20>)
 80028d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08c      	sub	sp, #48	; 0x30
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028ee:	f107 030c 	add.w	r3, r7, #12
 80028f2:	2224      	movs	r2, #36	; 0x24
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f007 fe18 	bl	800a52c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028fc:	463b      	mov	r3, r7
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	605a      	str	r2, [r3, #4]
 8002904:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002906:	4b23      	ldr	r3, [pc, #140]	; (8002994 <MX_TIM1_Init+0xac>)
 8002908:	4a23      	ldr	r2, [pc, #140]	; (8002998 <MX_TIM1_Init+0xb0>)
 800290a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800290c:	4b21      	ldr	r3, [pc, #132]	; (8002994 <MX_TIM1_Init+0xac>)
 800290e:	2200      	movs	r2, #0
 8002910:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002912:	4b20      	ldr	r3, [pc, #128]	; (8002994 <MX_TIM1_Init+0xac>)
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002918:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <MX_TIM1_Init+0xac>)
 800291a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800291e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002920:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <MX_TIM1_Init+0xac>)
 8002922:	2200      	movs	r2, #0
 8002924:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002926:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <MX_TIM1_Init+0xac>)
 8002928:	2200      	movs	r2, #0
 800292a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800292c:	4b19      	ldr	r3, [pc, #100]	; (8002994 <MX_TIM1_Init+0xac>)
 800292e:	2280      	movs	r2, #128	; 0x80
 8002930:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002932:	2303      	movs	r3, #3
 8002934:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002936:	2302      	movs	r3, #2
 8002938:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800293a:	2301      	movs	r3, #1
 800293c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002942:	230a      	movs	r3, #10
 8002944:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002946:	2302      	movs	r3, #2
 8002948:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800294a:	2301      	movs	r3, #1
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800294e:	2300      	movs	r3, #0
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002952:	230a      	movs	r3, #10
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002956:	f107 030c 	add.w	r3, r7, #12
 800295a:	4619      	mov	r1, r3
 800295c:	480d      	ldr	r0, [pc, #52]	; (8002994 <MX_TIM1_Init+0xac>)
 800295e:	f003 ff08 	bl	8006772 <HAL_TIM_Encoder_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002968:	f7ff fe56 	bl	8002618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800296c:	2300      	movs	r3, #0
 800296e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002970:	2300      	movs	r3, #0
 8002972:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002974:	2300      	movs	r3, #0
 8002976:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002978:	463b      	mov	r3, r7
 800297a:	4619      	mov	r1, r3
 800297c:	4805      	ldr	r0, [pc, #20]	; (8002994 <MX_TIM1_Init+0xac>)
 800297e:	f004 fce3 	bl	8007348 <HAL_TIMEx_MasterConfigSynchronization>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002988:	f7ff fe46 	bl	8002618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800298c:	bf00      	nop
 800298e:	3730      	adds	r7, #48	; 0x30
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	200008d8 	.word	0x200008d8
 8002998:	40012c00 	.word	0x40012c00

0800299c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a2:	f107 031c 	add.w	r3, r7, #28
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029ae:	463b      	mov	r3, r7
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
 80029bc:	615a      	str	r2, [r3, #20]
 80029be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029c0:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <MX_TIM2_Init+0xa8>)
 80029c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20 - 1;
 80029c8:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <MX_TIM2_Init+0xa8>)
 80029ca:	2213      	movs	r2, #19
 80029cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <MX_TIM2_Init+0xa8>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000 - 1;
 80029d4:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <MX_TIM2_Init+0xa8>)
 80029d6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80029da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <MX_TIM2_Init+0xa8>)
 80029de:	2200      	movs	r2, #0
 80029e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e2:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <MX_TIM2_Init+0xa8>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80029e8:	4816      	ldr	r0, [pc, #88]	; (8002a44 <MX_TIM2_Init+0xa8>)
 80029ea:	f003 fe6b 	bl	80066c4 <HAL_TIM_OC_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80029f4:	f7ff fe10 	bl	8002618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029fc:	2300      	movs	r3, #0
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a00:	f107 031c 	add.w	r3, r7, #28
 8002a04:	4619      	mov	r1, r3
 8002a06:	480f      	ldr	r0, [pc, #60]	; (8002a44 <MX_TIM2_Init+0xa8>)
 8002a08:	f004 fc9e 	bl	8007348 <HAL_TIMEx_MasterConfigSynchronization>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002a12:	f7ff fe01 	bl	8002618 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002a16:	2300      	movs	r3, #0
 8002a18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a26:	463b      	mov	r3, r7
 8002a28:	2200      	movs	r2, #0
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4805      	ldr	r0, [pc, #20]	; (8002a44 <MX_TIM2_Init+0xa8>)
 8002a2e:	f004 f8d7 	bl	8006be0 <HAL_TIM_OC_ConfigChannel>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002a38:	f7ff fdee 	bl	8002618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a3c:	bf00      	nop
 8002a3e:	3728      	adds	r7, #40	; 0x28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000924 	.word	0x20000924

08002a48 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a4e:	1d3b      	adds	r3, r7, #4
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <MX_TIM6_Init+0x64>)
 8002a5a:	4a15      	ldr	r2, [pc, #84]	; (8002ab0 <MX_TIM6_Init+0x68>)
 8002a5c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80 - 1;
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <MX_TIM6_Init+0x64>)
 8002a60:	224f      	movs	r2, #79	; 0x4f
 8002a62:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <MX_TIM6_Init+0x64>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <MX_TIM6_Init+0x64>)
 8002a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a70:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <MX_TIM6_Init+0x64>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a78:	480c      	ldr	r0, [pc, #48]	; (8002aac <MX_TIM6_Init+0x64>)
 8002a7a:	f003 fd2b 	bl	80064d4 <HAL_TIM_Base_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002a84:	f7ff fdc8 	bl	8002618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	4619      	mov	r1, r3
 8002a94:	4805      	ldr	r0, [pc, #20]	; (8002aac <MX_TIM6_Init+0x64>)
 8002a96:	f004 fc57 	bl	8007348 <HAL_TIMEx_MasterConfigSynchronization>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002aa0:	f7ff fdba 	bl	8002618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002aa4:	bf00      	nop
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000970 	.word	0x20000970
 8002ab0:	40001000 	.word	0x40001000

08002ab4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	; 0x28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_TIM_Encoder_MspInit+0x80>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d129      	bne.n	8002b2a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ad6:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <HAL_TIM_Encoder_MspInit+0x84>)
 8002ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ada:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <HAL_TIM_Encoder_MspInit+0x84>)
 8002adc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ae0:	6613      	str	r3, [r2, #96]	; 0x60
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <HAL_TIM_Encoder_MspInit+0x84>)
 8002ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <HAL_TIM_Encoder_MspInit+0x84>)
 8002af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af2:	4a11      	ldr	r2, [pc, #68]	; (8002b38 <HAL_TIM_Encoder_MspInit+0x84>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002afa:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <HAL_TIM_Encoder_MspInit+0x84>)
 8002afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_CLK_Pin|Encoder_DT_Pin;
 8002b06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b14:	2300      	movs	r3, #0
 8002b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	4619      	mov	r1, r3
 8002b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b26:	f001 fc6b 	bl	8004400 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	3728      	adds	r7, #40	; 0x28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	40021000 	.word	0x40021000

08002b3c <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM2)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4c:	d113      	bne.n	8002b76 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <HAL_TIM_OC_MspInit+0x44>)
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	4a0b      	ldr	r2, [pc, #44]	; (8002b80 <HAL_TIM_OC_MspInit+0x44>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	6593      	str	r3, [r2, #88]	; 0x58
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_TIM_OC_MspInit+0x44>)
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2100      	movs	r1, #0
 8002b6a:	201c      	movs	r0, #28
 8002b6c:	f001 fc11 	bl	8004392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b70:	201c      	movs	r0, #28
 8002b72:	f001 fc2a 	bl	80043ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000

08002b84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <HAL_TIM_Base_MspInit+0x38>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d10b      	bne.n	8002bae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b96:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <HAL_TIM_Base_MspInit+0x3c>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9a:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <HAL_TIM_Base_MspInit+0x3c>)
 8002b9c:	f043 0310 	orr.w	r3, r3, #16
 8002ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba2:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <HAL_TIM_Base_MspInit+0x3c>)
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40001000 	.word	0x40001000
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bc8:	f7ff fe7c 	bl	80028c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bcc:	480c      	ldr	r0, [pc, #48]	; (8002c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bce:	490d      	ldr	r1, [pc, #52]	; (8002c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bd0:	4a0d      	ldr	r2, [pc, #52]	; (8002c08 <LoopForever+0xe>)
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bd4:	e002      	b.n	8002bdc <LoopCopyDataInit>

08002bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bda:	3304      	adds	r3, #4

08002bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be0:	d3f9      	bcc.n	8002bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002be2:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002be4:	4c0a      	ldr	r4, [pc, #40]	; (8002c10 <LoopForever+0x16>)
  movs r3, #0
 8002be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be8:	e001      	b.n	8002bee <LoopFillZerobss>

08002bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bec:	3204      	adds	r2, #4

08002bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf0:	d3fb      	bcc.n	8002bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bf2:	f007 fd47 	bl	800a684 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bf6:	f7ff fc87 	bl	8002508 <main>

08002bfa <LoopForever>:

LoopForever:
    b LoopForever
 8002bfa:	e7fe      	b.n	8002bfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002bfc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c04:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002c08:	0800fd6c 	.word	0x0800fd6c
  ldr r2, =_sbss
 8002c0c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002c10:	20000bc0 	.word	0x20000bc0

08002c14 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c14:	e7fe      	b.n	8002c14 <CAN1_RX0_IRQHandler>

08002c16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c20:	2003      	movs	r0, #3
 8002c22:	f001 fbab 	bl	800437c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c26:	200f      	movs	r0, #15
 8002c28:	f000 f80e 	bl	8002c48 <HAL_InitTick>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	71fb      	strb	r3, [r7, #7]
 8002c36:	e001      	b.n	8002c3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c38:	f7ff fcf4 	bl	8002624 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c54:	4b17      	ldr	r3, [pc, #92]	; (8002cb4 <HAL_InitTick+0x6c>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d023      	beq.n	8002ca4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c5c:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <HAL_InitTick+0x70>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <HAL_InitTick+0x6c>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4619      	mov	r1, r3
 8002c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c72:	4618      	mov	r0, r3
 8002c74:	f001 fbb7 	bl	80043e6 <HAL_SYSTICK_Config>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10f      	bne.n	8002c9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b0f      	cmp	r3, #15
 8002c82:	d809      	bhi.n	8002c98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c84:	2200      	movs	r2, #0
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c8c:	f001 fb81 	bl	8004392 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c90:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <HAL_InitTick+0x74>)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e007      	b.n	8002ca8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
 8002c9c:	e004      	b.n	8002ca8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
 8002ca2:	e001      	b.n	8002ca8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000024 	.word	0x20000024
 8002cb8:	2000001c 	.word	0x2000001c
 8002cbc:	20000020 	.word	0x20000020

08002cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_IncTick+0x20>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_IncTick+0x24>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4413      	add	r3, r2
 8002cd0:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <HAL_IncTick+0x24>)
 8002cd2:	6013      	str	r3, [r2, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000024 	.word	0x20000024
 8002ce4:	200009bc 	.word	0x200009bc

08002ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return uwTick;
 8002cec:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <HAL_GetTick+0x14>)
 8002cee:	681b      	ldr	r3, [r3, #0]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	200009bc 	.word	0x200009bc

08002d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d08:	f7ff ffee 	bl	8002ce8 <HAL_GetTick>
 8002d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d18:	d005      	beq.n	8002d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <HAL_Delay+0x44>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4413      	add	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d26:	bf00      	nop
 8002d28:	f7ff ffde 	bl	8002ce8 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d8f7      	bhi.n	8002d28 <HAL_Delay+0x28>
  {
  }
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000024 	.word	0x20000024

08002d48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	609a      	str	r2, [r3, #8]
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	609a      	str	r2, [r3, #8]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	3360      	adds	r3, #96	; 0x60
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <LL_ADC_SetOffset+0x44>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002de8:	bf00      	nop
 8002dea:	371c      	adds	r7, #28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	03fff000 	.word	0x03fff000

08002df8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3360      	adds	r3, #96	; 0x60
 8002e06:	461a      	mov	r2, r3
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	3360      	adds	r3, #96	; 0x60
 8002e34:	461a      	mov	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e4e:	bf00      	nop
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3330      	adds	r3, #48	; 0x30
 8002e90:	461a      	mov	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	0a1b      	lsrs	r3, r3, #8
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	4413      	add	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	211f      	movs	r1, #31
 8002eac:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	0e9b      	lsrs	r3, r3, #26
 8002eb8:	f003 011f 	and.w	r1, r3, #31
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ecc:	bf00      	nop
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b087      	sub	sp, #28
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	3314      	adds	r3, #20
 8002f0e:	461a      	mov	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	0e5b      	lsrs	r3, r3, #25
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	4413      	add	r3, r2
 8002f1c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	0d1b      	lsrs	r3, r3, #20
 8002f26:	f003 031f 	and.w	r3, r3, #31
 8002f2a:	2107      	movs	r1, #7
 8002f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	401a      	ands	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	0d1b      	lsrs	r3, r3, #20
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f42:	431a      	orrs	r2, r3
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f48:	bf00      	nop
 8002f4a:	371c      	adds	r7, #28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	401a      	ands	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f003 0318 	and.w	r3, r3, #24
 8002f76:	4908      	ldr	r1, [pc, #32]	; (8002f98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f78:	40d9      	lsrs	r1, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	400b      	ands	r3, r1
 8002f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f82:	431a      	orrs	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	0007ffff 	.word	0x0007ffff

08002f9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002fac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6093      	str	r3, [r2, #8]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fd4:	d101      	bne.n	8002fda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002ff8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ffc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003020:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003024:	d101      	bne.n	800302a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003048:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <LL_ADC_IsEnabled+0x18>
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <LL_ADC_IsEnabled+0x1a>
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003096:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800309a:	f043 0204 	orr.w	r2, r3, #4
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d101      	bne.n	80030c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d101      	bne.n	80030ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
	...

080030fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e126      	b.n	8003364 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003120:	2b00      	cmp	r3, #0
 8003122:	d109      	bne.n	8003138 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff f853 	bl	80021d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff ff3f 	bl	8002fc0 <LL_ADC_IsDeepPowerDownEnabled>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d004      	beq.n	8003152 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff25 	bl	8002f9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff ff5a 	bl	8003010 <LL_ADC_IsInternalRegulatorEnabled>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d115      	bne.n	800318e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff ff3e 	bl	8002fe8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800316c:	4b7f      	ldr	r3, [pc, #508]	; (800336c <HAL_ADC_Init+0x270>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	099b      	lsrs	r3, r3, #6
 8003172:	4a7f      	ldr	r2, [pc, #508]	; (8003370 <HAL_ADC_Init+0x274>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	099b      	lsrs	r3, r3, #6
 800317a:	3301      	adds	r3, #1
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003180:	e002      	b.n	8003188 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3b01      	subs	r3, #1
 8003186:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f9      	bne.n	8003182 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff ff3c 	bl	8003010 <LL_ADC_IsInternalRegulatorEnabled>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10d      	bne.n	80031ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	f043 0210 	orr.w	r2, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	f043 0201 	orr.w	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff ff75 	bl	80030ae <LL_ADC_REG_IsConversionOngoing>
 80031c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f040 80bf 	bne.w	8003352 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f040 80bb 	bne.w	8003352 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80031e4:	f043 0202 	orr.w	r2, r3, #2
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff35 	bl	8003060 <LL_ADC_IsEnabled>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10b      	bne.n	8003214 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031fc:	485d      	ldr	r0, [pc, #372]	; (8003374 <HAL_ADC_Init+0x278>)
 80031fe:	f7ff ff2f 	bl	8003060 <LL_ADC_IsEnabled>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d105      	bne.n	8003214 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4619      	mov	r1, r3
 800320e:	485a      	ldr	r0, [pc, #360]	; (8003378 <HAL_ADC_Init+0x27c>)
 8003210:	f7ff fd9a 	bl	8002d48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	7e5b      	ldrb	r3, [r3, #25]
 8003218:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800321e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003224:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800322a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003232:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d106      	bne.n	8003250 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	3b01      	subs	r3, #1
 8003248:	045b      	lsls	r3, r3, #17
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	2b00      	cmp	r3, #0
 8003256:	d009      	beq.n	800326c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	4b42      	ldr	r3, [pc, #264]	; (800337c <HAL_ADC_Init+0x280>)
 8003274:	4013      	ands	r3, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6812      	ldr	r2, [r2, #0]
 800327a:	69b9      	ldr	r1, [r7, #24]
 800327c:	430b      	orrs	r3, r1
 800327e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff ff25 	bl	80030d4 <LL_ADC_INJ_IsConversionOngoing>
 800328a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d13d      	bne.n	800330e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d13a      	bne.n	800330e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800329c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032a4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032b4:	f023 0302 	bic.w	r3, r3, #2
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	69b9      	ldr	r1, [r7, #24]
 80032be:	430b      	orrs	r3, r1
 80032c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d118      	bne.n	80032fe <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80032d6:	f023 0304 	bic.w	r3, r3, #4
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032e2:	4311      	orrs	r1, r2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032e8:	4311      	orrs	r1, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032ee:	430a      	orrs	r2, r1
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	611a      	str	r2, [r3, #16]
 80032fc:	e007      	b.n	800330e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0201 	bic.w	r2, r2, #1
 800330c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d10c      	bne.n	8003330 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	f023 010f 	bic.w	r1, r3, #15
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	1e5a      	subs	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
 800332e:	e007      	b.n	8003340 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 020f 	bic.w	r2, r2, #15
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003344:	f023 0303 	bic.w	r3, r3, #3
 8003348:	f043 0201 	orr.w	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	655a      	str	r2, [r3, #84]	; 0x54
 8003350:	e007      	b.n	8003362 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003356:	f043 0210 	orr.w	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003362:	7ffb      	ldrb	r3, [r7, #31]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3720      	adds	r7, #32
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	2000001c 	.word	0x2000001c
 8003370:	053e2d63 	.word	0x053e2d63
 8003374:	50040000 	.word	0x50040000
 8003378:	50040300 	.word	0x50040300
 800337c:	fff0c007 	.word	0xfff0c007

08003380 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fe8e 	bl	80030ae <LL_ADC_REG_IsConversionOngoing>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	f040 80a0 	bne.w	80034da <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_ADC_Start_IT+0x28>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e09b      	b.n	80034e0 <HAL_ADC_Start_IT+0x160>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fe5b 	bl	800406c <ADC_Enable>
 80033b6:	4603      	mov	r3, r0
 80033b8:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f040 8087 	bne.w	80034d0 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d006      	beq.n	80033f0 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e6:	f023 0206 	bic.w	r2, r3, #6
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	659a      	str	r2, [r3, #88]	; 0x58
 80033ee:	e002      	b.n	80033f6 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	221c      	movs	r2, #28
 80033fc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 021c 	bic.w	r2, r2, #28
 8003414:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	2b08      	cmp	r3, #8
 800341c:	d108      	bne.n	8003430 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0208 	orr.w	r2, r2, #8
 800342c:	605a      	str	r2, [r3, #4]
          break;
 800342e:	e008      	b.n	8003442 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0204 	orr.w	r2, r2, #4
 800343e:	605a      	str	r2, [r3, #4]
          break;
 8003440:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003446:	2b00      	cmp	r3, #0
 8003448:	d107      	bne.n	800345a <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0210 	orr.w	r2, r2, #16
 8003458:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d02d      	beq.n	80034c4 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003470:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	655a      	str	r2, [r3, #84]	; 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	2b08      	cmp	r3, #8
 800347e:	d110      	bne.n	80034a2 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0220 	bic.w	r2, r2, #32
 800348e:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800349e:	605a      	str	r2, [r3, #4]
            break;
 80034a0:	e010      	b.n	80034c4 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034b0:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 0220 	orr.w	r2, r2, #32
 80034c0:	605a      	str	r2, [r3, #4]
            break;
 80034c2:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fddc 	bl	8003086 <LL_ADC_REG_StartConversion>
 80034ce:	e006      	b.n	80034de <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80034d8:	e001      	b.n	80034de <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034da:	2302      	movs	r3, #2
 80034dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80034de:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b088      	sub	sp, #32
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d017      	beq.n	8003558 <HAL_ADC_IRQHandler+0x56>
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d012      	beq.n	8003558 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003536:	f003 0310 	and.w	r3, r3, #16
 800353a:	2b00      	cmp	r3, #0
 800353c:	d105      	bne.n	800354a <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003542:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fe3c 	bl	80041c8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2202      	movs	r2, #2
 8003556:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b00      	cmp	r3, #0
 8003560:	d004      	beq.n	800356c <HAL_ADC_IRQHandler+0x6a>
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d109      	bne.n	8003580 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003572:	2b00      	cmp	r3, #0
 8003574:	d05e      	beq.n	8003634 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	d059      	beq.n	8003634 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d105      	bne.n	8003598 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003590:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fc5c 	bl	8002e5a <LL_ADC_REG_IsTriggerSourceSWStart>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d03e      	beq.n	8003626 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d135      	bne.n	8003626 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d12e      	bne.n	8003626 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff fd6e 	bl	80030ae <LL_ADC_REG_IsConversionOngoing>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d11a      	bne.n	800360e <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 020c 	bic.w	r2, r2, #12
 80035e6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d112      	bne.n	8003626 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	f043 0201 	orr.w	r2, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	655a      	str	r2, [r3, #84]	; 0x54
 800360c:	e00b      	b.n	8003626 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	f043 0210 	orr.w	r2, r3, #16
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	f043 0201 	orr.w	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f91f 	bl	800386a <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	220c      	movs	r2, #12
 8003632:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d004      	beq.n	8003648 <HAL_ADC_IRQHandler+0x146>
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b00      	cmp	r3, #0
 8003646:	d109      	bne.n	800365c <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800364e:	2b00      	cmp	r3, #0
 8003650:	d072      	beq.n	8003738 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003658:	2b00      	cmp	r3, #0
 800365a:	d06d      	beq.n	8003738 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b00      	cmp	r3, #0
 8003666:	d105      	bne.n	8003674 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fc2d 	bl	8002ed8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800367e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fbe8 	bl	8002e5a <LL_ADC_REG_IsTriggerSourceSWStart>
 800368a:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d047      	beq.n	800372a <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d007      	beq.n	80036b4 <HAL_ADC_IRQHandler+0x1b2>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d03f      	beq.n	800372a <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d13a      	bne.n	800372a <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036be:	2b40      	cmp	r3, #64	; 0x40
 80036c0:	d133      	bne.n	800372a <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d12e      	bne.n	800372a <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fcff 	bl	80030d4 <LL_ADC_INJ_IsConversionOngoing>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d11a      	bne.n	8003712 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036ea:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d112      	bne.n	800372a <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003708:	f043 0201 	orr.w	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	655a      	str	r2, [r3, #84]	; 0x54
 8003710:	e00b      	b.n	800372a <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003716:	f043 0210 	orr.w	r2, r3, #16
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003722:	f043 0201 	orr.w	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fd24 	bl	8004178 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2260      	movs	r2, #96	; 0x60
 8003736:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373e:	2b00      	cmp	r3, #0
 8003740:	d011      	beq.n	8003766 <HAL_ADC_IRQHandler+0x264>
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00c      	beq.n	8003766 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003750:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f890 	bl	800387e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2280      	movs	r2, #128	; 0x80
 8003764:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	d012      	beq.n	8003796 <HAL_ADC_IRQHandler+0x294>
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00d      	beq.n	8003796 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fd0a 	bl	80041a0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003794:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800379c:	2b00      	cmp	r3, #0
 800379e:	d012      	beq.n	80037c6 <HAL_ADC_IRQHandler+0x2c4>
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00d      	beq.n	80037c6 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fcfc 	bl	80041b4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d02a      	beq.n	8003826 <HAL_ADC_IRQHandler+0x324>
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f003 0310 	and.w	r3, r3, #16
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d025      	beq.n	8003826 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d102      	bne.n	80037e8 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80037e2:	2301      	movs	r3, #1
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	e008      	b.n	80037fa <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80037f6:	2301      	movs	r3, #1
 80037f8:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d10e      	bne.n	800381e <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003804:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003810:	f043 0202 	orr.w	r2, r3, #2
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f83a 	bl	8003892 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2210      	movs	r2, #16
 8003824:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382c:	2b00      	cmp	r3, #0
 800382e:	d018      	beq.n	8003862 <HAL_ADC_IRQHandler+0x360>
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003836:	2b00      	cmp	r3, #0
 8003838:	d013      	beq.n	8003862 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384a:	f043 0208 	orr.w	r2, r3, #8
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800385a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fc95 	bl	800418c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003862:	bf00      	nop
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b0b6      	sub	sp, #216	; 0xd8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x22>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e3bb      	b.n	8004042 <HAL_ADC_ConfigChannel+0x79a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fbe9 	bl	80030ae <LL_ADC_REG_IsConversionOngoing>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f040 83a0 	bne.w	8004024 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b05      	cmp	r3, #5
 80038f2:	d824      	bhi.n	800393e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	3b02      	subs	r3, #2
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d81b      	bhi.n	8003936 <HAL_ADC_ConfigChannel+0x8e>
 80038fe:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <HAL_ADC_ConfigChannel+0x5c>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	08003915 	.word	0x08003915
 8003908:	0800391d 	.word	0x0800391d
 800390c:	08003925 	.word	0x08003925
 8003910:	0800392d 	.word	0x0800392d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003914:	230c      	movs	r3, #12
 8003916:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800391a:	e010      	b.n	800393e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800391c:	2312      	movs	r3, #18
 800391e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003922:	e00c      	b.n	800393e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003924:	2318      	movs	r3, #24
 8003926:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800392a:	e008      	b.n	800393e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800392c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003930:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003934:	e003      	b.n	800393e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003936:	2306      	movs	r3, #6
 8003938:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800393c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800394c:	f7ff fa98 	bl	8002e80 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fbaa 	bl	80030ae <LL_ADC_REG_IsConversionOngoing>
 800395a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff fbb6 	bl	80030d4 <LL_ADC_INJ_IsConversionOngoing>
 8003968:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800396c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003970:	2b00      	cmp	r3, #0
 8003972:	f040 81a4 	bne.w	8003cbe <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003976:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800397a:	2b00      	cmp	r3, #0
 800397c:	f040 819f 	bne.w	8003cbe <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	6819      	ldr	r1, [r3, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	461a      	mov	r2, r3
 800398e:	f7ff fab6 	bl	8002efe <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	695a      	ldr	r2, [r3, #20]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	08db      	lsrs	r3, r3, #3
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d00a      	beq.n	80039ca <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	6919      	ldr	r1, [r3, #16]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039c4:	f7ff f9f4 	bl	8002db0 <LL_ADC_SetOffset>
 80039c8:	e179      	b.n	8003cbe <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2100      	movs	r1, #0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fa11 	bl	8002df8 <LL_ADC_GetOffsetChannel>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x14e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff fa06 	bl	8002df8 <LL_ADC_GetOffsetChannel>
 80039ec:	4603      	mov	r3, r0
 80039ee:	0e9b      	lsrs	r3, r3, #26
 80039f0:	f003 021f 	and.w	r2, r3, #31
 80039f4:	e01e      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x18c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2100      	movs	r1, #0
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff f9fb 	bl	8002df8 <LL_ADC_GetOffsetChannel>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a0c:	fa93 f3a3 	rbit	r3, r3
 8003a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003a24:	2320      	movs	r3, #32
 8003a26:	e004      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003a28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a2c:	fab3 f383 	clz	r3, r3
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d105      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x1a4>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	0e9b      	lsrs	r3, r3, #26
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	e018      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x1d6>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003a60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003a68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003a70:	2320      	movs	r3, #32
 8003a72:	e004      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003a74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003a78:	fab3 f383 	clz	r3, r3
 8003a7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d106      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2200      	movs	r2, #0
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff f9ca 	bl	8002e24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2101      	movs	r1, #1
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff f9ae 	bl	8002df8 <LL_ADC_GetOffsetChannel>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x214>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2101      	movs	r1, #1
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff f9a3 	bl	8002df8 <LL_ADC_GetOffsetChannel>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	0e9b      	lsrs	r3, r3, #26
 8003ab6:	f003 021f 	and.w	r2, r3, #31
 8003aba:	e01e      	b.n	8003afa <HAL_ADC_ConfigChannel+0x252>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff f998 	bl	8002df8 <LL_ADC_GetOffsetChannel>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003ada:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003ae2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003aea:	2320      	movs	r3, #32
 8003aec:	e004      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003aee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d105      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x26a>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	0e9b      	lsrs	r3, r3, #26
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	e018      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x29c>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b1e:	fa93 f3a3 	rbit	r3, r3
 8003b22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003b26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003b2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003b36:	2320      	movs	r3, #32
 8003b38:	e004      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003b3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b3e:	fab3 f383 	clz	r3, r3
 8003b42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d106      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2101      	movs	r1, #1
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff f967 	bl	8002e24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2102      	movs	r1, #2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff f94b 	bl	8002df8 <LL_ADC_GetOffsetChannel>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10a      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x2da>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2102      	movs	r1, #2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff f940 	bl	8002df8 <LL_ADC_GetOffsetChannel>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	0e9b      	lsrs	r3, r3, #26
 8003b7c:	f003 021f 	and.w	r2, r3, #31
 8003b80:	e01e      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x318>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2102      	movs	r1, #2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff f935 	bl	8002df8 <LL_ADC_GetOffsetChannel>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b98:	fa93 f3a3 	rbit	r3, r3
 8003b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ba4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	e004      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bb8:	fab3 f383 	clz	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d105      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x330>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	0e9b      	lsrs	r3, r3, #26
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	e014      	b.n	8003c02 <HAL_ADC_ConfigChannel+0x35a>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003be0:	fa93 f3a3 	rbit	r3, r3
 8003be4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003be8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003bec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003bf4:	2320      	movs	r3, #32
 8003bf6:	e004      	b.n	8003c02 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003bf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bfc:	fab3 f383 	clz	r3, r3
 8003c00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d106      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2102      	movs	r1, #2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff f908 	bl	8002e24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2103      	movs	r1, #3
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff f8ec 	bl	8002df8 <LL_ADC_GetOffsetChannel>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10a      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x398>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2103      	movs	r1, #3
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff f8e1 	bl	8002df8 <LL_ADC_GetOffsetChannel>
 8003c36:	4603      	mov	r3, r0
 8003c38:	0e9b      	lsrs	r3, r3, #26
 8003c3a:	f003 021f 	and.w	r2, r3, #31
 8003c3e:	e017      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x3c8>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2103      	movs	r1, #3
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff f8d6 	bl	8002df8 <LL_ADC_GetOffsetChannel>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c52:	fa93 f3a3 	rbit	r3, r3
 8003c56:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003c62:	2320      	movs	r3, #32
 8003c64:	e003      	b.n	8003c6e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c68:	fab3 f383 	clz	r3, r3
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d105      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x3e0>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	0e9b      	lsrs	r3, r3, #26
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	e011      	b.n	8003cac <HAL_ADC_ConfigChannel+0x404>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c90:	fa93 f3a3 	rbit	r3, r3
 8003c94:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c98:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003c9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003ca0:	2320      	movs	r3, #32
 8003ca2:	e003      	b.n	8003cac <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003ca4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ca6:	fab3 f383 	clz	r3, r3
 8003caa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d106      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2103      	movs	r1, #3
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff f8b3 	bl	8002e24 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff f9cc 	bl	8003060 <LL_ADC_IsEnabled>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f040 8140 	bne.w	8003f50 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	6819      	ldr	r1, [r3, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	f7ff f939 	bl	8002f54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	4a8f      	ldr	r2, [pc, #572]	; (8003f24 <HAL_ADC_ConfigChannel+0x67c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	f040 8131 	bne.w	8003f50 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10b      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x46e>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	0e9b      	lsrs	r3, r3, #26
 8003d04:	3301      	adds	r3, #1
 8003d06:	f003 031f 	and.w	r3, r3, #31
 8003d0a:	2b09      	cmp	r3, #9
 8003d0c:	bf94      	ite	ls
 8003d0e:	2301      	movls	r3, #1
 8003d10:	2300      	movhi	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	e019      	b.n	8003d4a <HAL_ADC_ConfigChannel+0x4a2>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d1e:	fa93 f3a3 	rbit	r3, r3
 8003d22:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d26:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003d2e:	2320      	movs	r3, #32
 8003d30:	e003      	b.n	8003d3a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d34:	fab3 f383 	clz	r3, r3
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	f003 031f 	and.w	r3, r3, #31
 8003d40:	2b09      	cmp	r3, #9
 8003d42:	bf94      	ite	ls
 8003d44:	2301      	movls	r3, #1
 8003d46:	2300      	movhi	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d079      	beq.n	8003e42 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d107      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x4c2>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	0e9b      	lsrs	r3, r3, #26
 8003d60:	3301      	adds	r3, #1
 8003d62:	069b      	lsls	r3, r3, #26
 8003d64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d68:	e015      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x4ee>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d72:	fa93 f3a3 	rbit	r3, r3
 8003d76:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d7a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003d82:	2320      	movs	r3, #32
 8003d84:	e003      	b.n	8003d8e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d88:	fab3 f383 	clz	r3, r3
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	3301      	adds	r3, #1
 8003d90:	069b      	lsls	r3, r3, #26
 8003d92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <HAL_ADC_ConfigChannel+0x50e>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	0e9b      	lsrs	r3, r3, #26
 8003da8:	3301      	adds	r3, #1
 8003daa:	f003 031f 	and.w	r3, r3, #31
 8003dae:	2101      	movs	r1, #1
 8003db0:	fa01 f303 	lsl.w	r3, r1, r3
 8003db4:	e017      	b.n	8003de6 <HAL_ADC_ConfigChannel+0x53e>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dbe:	fa93 f3a3 	rbit	r3, r3
 8003dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003dce:	2320      	movs	r3, #32
 8003dd0:	e003      	b.n	8003dda <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd4:	fab3 f383 	clz	r3, r3
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	3301      	adds	r3, #1
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	2101      	movs	r1, #1
 8003de2:	fa01 f303 	lsl.w	r3, r1, r3
 8003de6:	ea42 0103 	orr.w	r1, r2, r3
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x564>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	0e9b      	lsrs	r3, r3, #26
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	f003 021f 	and.w	r2, r3, #31
 8003e02:	4613      	mov	r3, r2
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	4413      	add	r3, r2
 8003e08:	051b      	lsls	r3, r3, #20
 8003e0a:	e018      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x596>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e14:	fa93 f3a3 	rbit	r3, r3
 8003e18:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003e24:	2320      	movs	r3, #32
 8003e26:	e003      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2a:	fab3 f383 	clz	r3, r3
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	3301      	adds	r3, #1
 8003e32:	f003 021f 	and.w	r2, r3, #31
 8003e36:	4613      	mov	r3, r2
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	4413      	add	r3, r2
 8003e3c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e3e:	430b      	orrs	r3, r1
 8003e40:	e081      	b.n	8003f46 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d107      	bne.n	8003e5e <HAL_ADC_ConfigChannel+0x5b6>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	0e9b      	lsrs	r3, r3, #26
 8003e54:	3301      	adds	r3, #1
 8003e56:	069b      	lsls	r3, r3, #26
 8003e58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e5c:	e015      	b.n	8003e8a <HAL_ADC_ConfigChannel+0x5e2>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	fa93 f3a3 	rbit	r3, r3
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003e76:	2320      	movs	r3, #32
 8003e78:	e003      	b.n	8003e82 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7c:	fab3 f383 	clz	r3, r3
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	3301      	adds	r3, #1
 8003e84:	069b      	lsls	r3, r3, #26
 8003e86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x602>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	0e9b      	lsrs	r3, r3, #26
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea8:	e017      	b.n	8003eda <HAL_ADC_ConfigChannel+0x632>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	fa93 f3a3 	rbit	r3, r3
 8003eb6:	61bb      	str	r3, [r7, #24]
  return result;
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003ec2:	2320      	movs	r3, #32
 8003ec4:	e003      	b.n	8003ece <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	fab3 f383 	clz	r3, r3
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eda:	ea42 0103 	orr.w	r1, r2, r3
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10d      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x65e>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	0e9b      	lsrs	r3, r3, #26
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	f003 021f 	and.w	r2, r3, #31
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	4413      	add	r3, r2
 8003efc:	3b1e      	subs	r3, #30
 8003efe:	051b      	lsls	r3, r3, #20
 8003f00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f04:	e01e      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x69c>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	fa93 f3a3 	rbit	r3, r3
 8003f12:	60fb      	str	r3, [r7, #12]
  return result;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d104      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003f1e:	2320      	movs	r3, #32
 8003f20:	e006      	b.n	8003f30 <HAL_ADC_ConfigChannel+0x688>
 8003f22:	bf00      	nop
 8003f24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	fab3 f383 	clz	r3, r3
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	3301      	adds	r3, #1
 8003f32:	f003 021f 	and.w	r2, r3, #31
 8003f36:	4613      	mov	r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3b1e      	subs	r3, #30
 8003f3e:	051b      	lsls	r3, r3, #20
 8003f40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f44:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	f7fe ffd7 	bl	8002efe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4b3d      	ldr	r3, [pc, #244]	; (800404c <HAL_ADC_ConfigChannel+0x7a4>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d06c      	beq.n	8004036 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f5c:	483c      	ldr	r0, [pc, #240]	; (8004050 <HAL_ADC_ConfigChannel+0x7a8>)
 8003f5e:	f7fe ff19 	bl	8002d94 <LL_ADC_GetCommonPathInternalCh>
 8003f62:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a3a      	ldr	r2, [pc, #232]	; (8004054 <HAL_ADC_ConfigChannel+0x7ac>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d127      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d121      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a35      	ldr	r2, [pc, #212]	; (8004058 <HAL_ADC_ConfigChannel+0x7b0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d157      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f8e:	4619      	mov	r1, r3
 8003f90:	482f      	ldr	r0, [pc, #188]	; (8004050 <HAL_ADC_ConfigChannel+0x7a8>)
 8003f92:	f7fe feec 	bl	8002d6e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f96:	4b31      	ldr	r3, [pc, #196]	; (800405c <HAL_ADC_ConfigChannel+0x7b4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	099b      	lsrs	r3, r3, #6
 8003f9c:	4a30      	ldr	r2, [pc, #192]	; (8004060 <HAL_ADC_ConfigChannel+0x7b8>)
 8003f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa2:	099b      	lsrs	r3, r3, #6
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003fb0:	e002      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f9      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fbe:	e03a      	b.n	8004036 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a27      	ldr	r2, [pc, #156]	; (8004064 <HAL_ADC_ConfigChannel+0x7bc>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d113      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003fca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10d      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a1f      	ldr	r2, [pc, #124]	; (8004058 <HAL_ADC_ConfigChannel+0x7b0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d12a      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fe0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fe4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4819      	ldr	r0, [pc, #100]	; (8004050 <HAL_ADC_ConfigChannel+0x7a8>)
 8003fec:	f7fe febf 	bl	8002d6e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ff0:	e021      	b.n	8004036 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1c      	ldr	r2, [pc, #112]	; (8004068 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d11c      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ffc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d116      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a12      	ldr	r2, [pc, #72]	; (8004058 <HAL_ADC_ConfigChannel+0x7b0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d111      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004012:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004016:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800401a:	4619      	mov	r1, r3
 800401c:	480c      	ldr	r0, [pc, #48]	; (8004050 <HAL_ADC_ConfigChannel+0x7a8>)
 800401e:	f7fe fea6 	bl	8002d6e <LL_ADC_SetCommonPathInternalCh>
 8004022:	e008      	b.n	8004036 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004028:	f043 0220 	orr.w	r2, r3, #32
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800403e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004042:	4618      	mov	r0, r3
 8004044:	37d8      	adds	r7, #216	; 0xd8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	80080000 	.word	0x80080000
 8004050:	50040300 	.word	0x50040300
 8004054:	c7520000 	.word	0xc7520000
 8004058:	50040000 	.word	0x50040000
 800405c:	2000001c 	.word	0x2000001c
 8004060:	053e2d63 	.word	0x053e2d63
 8004064:	cb840000 	.word	0xcb840000
 8004068:	80000001 	.word	0x80000001

0800406c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004074:	2300      	movs	r3, #0
 8004076:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f7fe ffef 	bl	8003060 <LL_ADC_IsEnabled>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d169      	bne.n	800415c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	4b36      	ldr	r3, [pc, #216]	; (8004168 <ADC_Enable+0xfc>)
 8004090:	4013      	ands	r3, r2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00d      	beq.n	80040b2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409a:	f043 0210 	orr.w	r2, r3, #16
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a6:	f043 0201 	orr.w	r2, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e055      	b.n	800415e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fe ffbe 	bl	8003038 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80040bc:	482b      	ldr	r0, [pc, #172]	; (800416c <ADC_Enable+0x100>)
 80040be:	f7fe fe69 	bl	8002d94 <LL_ADC_GetCommonPathInternalCh>
 80040c2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80040c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d013      	beq.n	80040f4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040cc:	4b28      	ldr	r3, [pc, #160]	; (8004170 <ADC_Enable+0x104>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	099b      	lsrs	r3, r3, #6
 80040d2:	4a28      	ldr	r2, [pc, #160]	; (8004174 <ADC_Enable+0x108>)
 80040d4:	fba2 2303 	umull	r2, r3, r2, r3
 80040d8:	099b      	lsrs	r3, r3, #6
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	4613      	mov	r3, r2
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80040e6:	e002      	b.n	80040ee <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f9      	bne.n	80040e8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80040f4:	f7fe fdf8 	bl	8002ce8 <HAL_GetTick>
 80040f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040fa:	e028      	b.n	800414e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f7fe ffad 	bl	8003060 <LL_ADC_IsEnabled>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d104      	bne.n	8004116 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f7fe ff91 	bl	8003038 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004116:	f7fe fde7 	bl	8002ce8 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d914      	bls.n	800414e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b01      	cmp	r3, #1
 8004130:	d00d      	beq.n	800414e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004136:	f043 0210 	orr.w	r2, r3, #16
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	f043 0201 	orr.w	r2, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e007      	b.n	800415e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b01      	cmp	r3, #1
 800415a:	d1cf      	bne.n	80040fc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	8000003f 	.word	0x8000003f
 800416c:	50040300 	.word	0x50040300
 8004170:	2000001c 	.word	0x2000001c
 8004174:	053e2d63 	.word	0x053e2d63

08004178 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <__NVIC_SetPriorityGrouping+0x44>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041f8:	4013      	ands	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800420c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800420e:	4a04      	ldr	r2, [pc, #16]	; (8004220 <__NVIC_SetPriorityGrouping+0x44>)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	60d3      	str	r3, [r2, #12]
}
 8004214:	bf00      	nop
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004228:	4b04      	ldr	r3, [pc, #16]	; (800423c <__NVIC_GetPriorityGrouping+0x18>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	0a1b      	lsrs	r3, r3, #8
 800422e:	f003 0307 	and.w	r3, r3, #7
}
 8004232:	4618      	mov	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	e000ed00 	.word	0xe000ed00

08004240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800424a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424e:	2b00      	cmp	r3, #0
 8004250:	db0b      	blt.n	800426a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	f003 021f 	and.w	r2, r3, #31
 8004258:	4907      	ldr	r1, [pc, #28]	; (8004278 <__NVIC_EnableIRQ+0x38>)
 800425a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425e:	095b      	lsrs	r3, r3, #5
 8004260:	2001      	movs	r0, #1
 8004262:	fa00 f202 	lsl.w	r2, r0, r2
 8004266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	e000e100 	.word	0xe000e100

0800427c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	6039      	str	r1, [r7, #0]
 8004286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428c:	2b00      	cmp	r3, #0
 800428e:	db0a      	blt.n	80042a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	b2da      	uxtb	r2, r3
 8004294:	490c      	ldr	r1, [pc, #48]	; (80042c8 <__NVIC_SetPriority+0x4c>)
 8004296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429a:	0112      	lsls	r2, r2, #4
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	440b      	add	r3, r1
 80042a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042a4:	e00a      	b.n	80042bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	4908      	ldr	r1, [pc, #32]	; (80042cc <__NVIC_SetPriority+0x50>)
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	3b04      	subs	r3, #4
 80042b4:	0112      	lsls	r2, r2, #4
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	440b      	add	r3, r1
 80042ba:	761a      	strb	r2, [r3, #24]
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	e000e100 	.word	0xe000e100
 80042cc:	e000ed00 	.word	0xe000ed00

080042d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b089      	sub	sp, #36	; 0x24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f1c3 0307 	rsb	r3, r3, #7
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	bf28      	it	cs
 80042ee:	2304      	movcs	r3, #4
 80042f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	3304      	adds	r3, #4
 80042f6:	2b06      	cmp	r3, #6
 80042f8:	d902      	bls.n	8004300 <NVIC_EncodePriority+0x30>
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	3b03      	subs	r3, #3
 80042fe:	e000      	b.n	8004302 <NVIC_EncodePriority+0x32>
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43da      	mvns	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	401a      	ands	r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004318:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	fa01 f303 	lsl.w	r3, r1, r3
 8004322:	43d9      	mvns	r1, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004328:	4313      	orrs	r3, r2
         );
}
 800432a:	4618      	mov	r0, r3
 800432c:	3724      	adds	r7, #36	; 0x24
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3b01      	subs	r3, #1
 8004344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004348:	d301      	bcc.n	800434e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800434a:	2301      	movs	r3, #1
 800434c:	e00f      	b.n	800436e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800434e:	4a0a      	ldr	r2, [pc, #40]	; (8004378 <SysTick_Config+0x40>)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3b01      	subs	r3, #1
 8004354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004356:	210f      	movs	r1, #15
 8004358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800435c:	f7ff ff8e 	bl	800427c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <SysTick_Config+0x40>)
 8004362:	2200      	movs	r2, #0
 8004364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004366:	4b04      	ldr	r3, [pc, #16]	; (8004378 <SysTick_Config+0x40>)
 8004368:	2207      	movs	r2, #7
 800436a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	e000e010 	.word	0xe000e010

0800437c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff ff29 	bl	80041dc <__NVIC_SetPriorityGrouping>
}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b086      	sub	sp, #24
 8004396:	af00      	add	r7, sp, #0
 8004398:	4603      	mov	r3, r0
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043a4:	f7ff ff3e 	bl	8004224 <__NVIC_GetPriorityGrouping>
 80043a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	6978      	ldr	r0, [r7, #20]
 80043b0:	f7ff ff8e 	bl	80042d0 <NVIC_EncodePriority>
 80043b4:	4602      	mov	r2, r0
 80043b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ba:	4611      	mov	r1, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff ff5d 	bl	800427c <__NVIC_SetPriority>
}
 80043c2:	bf00      	nop
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b082      	sub	sp, #8
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	4603      	mov	r3, r0
 80043d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff ff31 	bl	8004240 <__NVIC_EnableIRQ>
}
 80043de:	bf00      	nop
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b082      	sub	sp, #8
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7ff ffa2 	bl	8004338 <SysTick_Config>
 80043f4:	4603      	mov	r3, r0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800440e:	e148      	b.n	80046a2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	2101      	movs	r1, #1
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	fa01 f303 	lsl.w	r3, r1, r3
 800441c:	4013      	ands	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 813a 	beq.w	800469c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f003 0303 	and.w	r3, r3, #3
 8004430:	2b01      	cmp	r3, #1
 8004432:	d005      	beq.n	8004440 <HAL_GPIO_Init+0x40>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d130      	bne.n	80044a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	2203      	movs	r2, #3
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	43db      	mvns	r3, r3
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4013      	ands	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004476:	2201      	movs	r2, #1
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43db      	mvns	r3, r3
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4013      	ands	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	091b      	lsrs	r3, r3, #4
 800448c:	f003 0201 	and.w	r2, r3, #1
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d017      	beq.n	80044de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	2203      	movs	r2, #3
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43db      	mvns	r3, r3
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4013      	ands	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d123      	bne.n	8004532 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	08da      	lsrs	r2, r3, #3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3208      	adds	r2, #8
 80044f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	220f      	movs	r2, #15
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43db      	mvns	r3, r3
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4013      	ands	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	08da      	lsrs	r2, r3, #3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3208      	adds	r2, #8
 800452c:	6939      	ldr	r1, [r7, #16]
 800452e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	2203      	movs	r2, #3
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	43db      	mvns	r3, r3
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4013      	ands	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f003 0203 	and.w	r2, r3, #3
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 8094 	beq.w	800469c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004574:	4b52      	ldr	r3, [pc, #328]	; (80046c0 <HAL_GPIO_Init+0x2c0>)
 8004576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004578:	4a51      	ldr	r2, [pc, #324]	; (80046c0 <HAL_GPIO_Init+0x2c0>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	6613      	str	r3, [r2, #96]	; 0x60
 8004580:	4b4f      	ldr	r3, [pc, #316]	; (80046c0 <HAL_GPIO_Init+0x2c0>)
 8004582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800458c:	4a4d      	ldr	r2, [pc, #308]	; (80046c4 <HAL_GPIO_Init+0x2c4>)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	089b      	lsrs	r3, r3, #2
 8004592:	3302      	adds	r3, #2
 8004594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004598:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	220f      	movs	r2, #15
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	43db      	mvns	r3, r3
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4013      	ands	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045b6:	d00d      	beq.n	80045d4 <HAL_GPIO_Init+0x1d4>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a43      	ldr	r2, [pc, #268]	; (80046c8 <HAL_GPIO_Init+0x2c8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d007      	beq.n	80045d0 <HAL_GPIO_Init+0x1d0>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a42      	ldr	r2, [pc, #264]	; (80046cc <HAL_GPIO_Init+0x2cc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d101      	bne.n	80045cc <HAL_GPIO_Init+0x1cc>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e004      	b.n	80045d6 <HAL_GPIO_Init+0x1d6>
 80045cc:	2307      	movs	r3, #7
 80045ce:	e002      	b.n	80045d6 <HAL_GPIO_Init+0x1d6>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <HAL_GPIO_Init+0x1d6>
 80045d4:	2300      	movs	r3, #0
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	f002 0203 	and.w	r2, r2, #3
 80045dc:	0092      	lsls	r2, r2, #2
 80045de:	4093      	lsls	r3, r2
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045e6:	4937      	ldr	r1, [pc, #220]	; (80046c4 <HAL_GPIO_Init+0x2c4>)
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	089b      	lsrs	r3, r3, #2
 80045ec:	3302      	adds	r3, #2
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045f4:	4b36      	ldr	r3, [pc, #216]	; (80046d0 <HAL_GPIO_Init+0x2d0>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	43db      	mvns	r3, r3
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4013      	ands	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004618:	4a2d      	ldr	r2, [pc, #180]	; (80046d0 <HAL_GPIO_Init+0x2d0>)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800461e:	4b2c      	ldr	r3, [pc, #176]	; (80046d0 <HAL_GPIO_Init+0x2d0>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	43db      	mvns	r3, r3
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4013      	ands	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004642:	4a23      	ldr	r2, [pc, #140]	; (80046d0 <HAL_GPIO_Init+0x2d0>)
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004648:	4b21      	ldr	r3, [pc, #132]	; (80046d0 <HAL_GPIO_Init+0x2d0>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	43db      	mvns	r3, r3
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4013      	ands	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800466c:	4a18      	ldr	r2, [pc, #96]	; (80046d0 <HAL_GPIO_Init+0x2d0>)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004672:	4b17      	ldr	r3, [pc, #92]	; (80046d0 <HAL_GPIO_Init+0x2d0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	43db      	mvns	r3, r3
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4013      	ands	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004696:	4a0e      	ldr	r2, [pc, #56]	; (80046d0 <HAL_GPIO_Init+0x2d0>)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	3301      	adds	r3, #1
 80046a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f47f aeaf 	bne.w	8004410 <HAL_GPIO_Init+0x10>
  }
}
 80046b2:	bf00      	nop
 80046b4:	bf00      	nop
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	40021000 	.word	0x40021000
 80046c4:	40010000 	.word	0x40010000
 80046c8:	48000400 	.word	0x48000400
 80046cc:	48000800 	.word	0x48000800
 80046d0:	40010400 	.word	0x40010400

080046d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	887b      	ldrh	r3, [r7, #2]
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
 80046f0:	e001      	b.n	80046f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046f2:	2300      	movs	r3, #0
 80046f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	460b      	mov	r3, r1
 800470e:	807b      	strh	r3, [r7, #2]
 8004710:	4613      	mov	r3, r2
 8004712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004714:	787b      	ldrb	r3, [r7, #1]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800471a:	887a      	ldrh	r2, [r7, #2]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004720:	e002      	b.n	8004728 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004722:	887a      	ldrh	r2, [r7, #2]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e08d      	b.n	8004862 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fd fe5e 	bl	800241c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2224      	movs	r2, #36	; 0x24
 8004764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0201 	bic.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004784:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004794:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d107      	bne.n	80047ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047aa:	609a      	str	r2, [r3, #8]
 80047ac:	e006      	b.n	80047bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80047ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d108      	bne.n	80047d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047d2:	605a      	str	r2, [r3, #4]
 80047d4:	e007      	b.n	80047e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004808:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691a      	ldr	r2, [r3, #16]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69d9      	ldr	r1, [r3, #28]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1a      	ldr	r2, [r3, #32]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af02      	add	r7, sp, #8
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	607a      	str	r2, [r7, #4]
 8004876:	461a      	mov	r2, r3
 8004878:	460b      	mov	r3, r1
 800487a:	817b      	strh	r3, [r7, #10]
 800487c:	4613      	mov	r3, r2
 800487e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b20      	cmp	r3, #32
 800488a:	f040 80fd 	bne.w	8004a88 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_I2C_Master_Transmit+0x30>
 8004898:	2302      	movs	r3, #2
 800489a:	e0f6      	b.n	8004a8a <HAL_I2C_Master_Transmit+0x21e>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048a4:	f7fe fa20 	bl	8002ce8 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	2319      	movs	r3, #25
 80048b0:	2201      	movs	r2, #1
 80048b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 fa1d 	bl	8004cf6 <I2C_WaitOnFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e0e1      	b.n	8004a8a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2221      	movs	r2, #33	; 0x21
 80048ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2210      	movs	r2, #16
 80048d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	893a      	ldrh	r2, [r7, #8]
 80048e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2bff      	cmp	r3, #255	; 0xff
 80048f6:	d906      	bls.n	8004906 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	22ff      	movs	r2, #255	; 0xff
 80048fc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80048fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	e007      	b.n	8004916 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004910:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004914:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491a:	2b00      	cmp	r3, #0
 800491c:	d024      	beq.n	8004968 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	781a      	ldrb	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004938:	b29b      	uxth	r3, r3
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004952:	b2db      	uxtb	r3, r3
 8004954:	3301      	adds	r3, #1
 8004956:	b2da      	uxtb	r2, r3
 8004958:	8979      	ldrh	r1, [r7, #10]
 800495a:	4b4e      	ldr	r3, [pc, #312]	; (8004a94 <HAL_I2C_Master_Transmit+0x228>)
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fb81 	bl	8005068 <I2C_TransferConfig>
 8004966:	e066      	b.n	8004a36 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496c:	b2da      	uxtb	r2, r3
 800496e:	8979      	ldrh	r1, [r7, #10]
 8004970:	4b48      	ldr	r3, [pc, #288]	; (8004a94 <HAL_I2C_Master_Transmit+0x228>)
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 fb76 	bl	8005068 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800497c:	e05b      	b.n	8004a36 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	6a39      	ldr	r1, [r7, #32]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 fa06 	bl	8004d94 <I2C_WaitOnTXISFlagUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e07b      	b.n	8004a8a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	781a      	ldrb	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d034      	beq.n	8004a36 <HAL_I2C_Master_Transmit+0x1ca>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d130      	bne.n	8004a36 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	2200      	movs	r2, #0
 80049dc:	2180      	movs	r1, #128	; 0x80
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f989 	bl	8004cf6 <I2C_WaitOnFlagUntilTimeout>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e04d      	b.n	8004a8a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	2bff      	cmp	r3, #255	; 0xff
 80049f6:	d90e      	bls.n	8004a16 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	22ff      	movs	r2, #255	; 0xff
 80049fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	8979      	ldrh	r1, [r7, #10]
 8004a06:	2300      	movs	r3, #0
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 fb2a 	bl	8005068 <I2C_TransferConfig>
 8004a14:	e00f      	b.n	8004a36 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	8979      	ldrh	r1, [r7, #10]
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 fb19 	bl	8005068 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d19e      	bne.n	800497e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	6a39      	ldr	r1, [r7, #32]
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f9ec 	bl	8004e22 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e01a      	b.n	8004a8a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6859      	ldr	r1, [r3, #4]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <HAL_I2C_Master_Transmit+0x22c>)
 8004a68:	400b      	ands	r3, r1
 8004a6a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	e000      	b.n	8004a8a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004a88:	2302      	movs	r3, #2
  }
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	80002000 	.word	0x80002000
 8004a98:	fe00e800 	.word	0xfe00e800

08004a9c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08a      	sub	sp, #40	; 0x28
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	607a      	str	r2, [r7, #4]
 8004aa6:	603b      	str	r3, [r7, #0]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	f040 80f3 	bne.w	8004ca4 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004acc:	d101      	bne.n	8004ad2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e0e9      	b.n	8004ca6 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_I2C_IsDeviceReady+0x44>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e0e2      	b.n	8004ca6 <HAL_I2C_IsDeviceReady+0x20a>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2224      	movs	r2, #36	; 0x24
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d107      	bne.n	8004b0e <HAL_I2C_IsDeviceReady+0x72>
 8004afe:	897b      	ldrh	r3, [r7, #10]
 8004b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b0c:	e006      	b.n	8004b1c <HAL_I2C_IsDeviceReady+0x80>
 8004b0e:	897b      	ldrh	r3, [r7, #10]
 8004b10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b18:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004b22:	f7fe f8e1 	bl	8002ce8 <HAL_GetTick>
 8004b26:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	bf0c      	ite	eq
 8004b36:	2301      	moveq	r3, #1
 8004b38:	2300      	movne	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b10      	cmp	r3, #16
 8004b4a:	bf0c      	ite	eq
 8004b4c:	2301      	moveq	r3, #1
 8004b4e:	2300      	movne	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004b54:	e034      	b.n	8004bc0 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b5c:	d01a      	beq.n	8004b94 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b5e:	f7fe f8c3 	bl	8002ce8 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d302      	bcc.n	8004b74 <HAL_I2C_IsDeviceReady+0xd8>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10f      	bne.n	8004b94 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b80:	f043 0220 	orr.w	r2, r3, #32
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e088      	b.n	8004ca6 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	bf0c      	ite	eq
 8004ba2:	2301      	moveq	r3, #1
 8004ba4:	2300      	movne	r3, #0
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004bc0:	7ffb      	ldrb	r3, [r7, #31]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d102      	bne.n	8004bcc <HAL_I2C_IsDeviceReady+0x130>
 8004bc6:	7fbb      	ldrb	r3, [r7, #30]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0c4      	beq.n	8004b56 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	2b10      	cmp	r3, #16
 8004bd8:	d01a      	beq.n	8004c10 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2200      	movs	r2, #0
 8004be2:	2120      	movs	r1, #32
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f886 	bl	8004cf6 <I2C_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e058      	b.n	8004ca6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e04a      	b.n	8004ca6 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2200      	movs	r2, #0
 8004c18:	2120      	movs	r1, #32
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 f86b 	bl	8004cf6 <I2C_WaitOnFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e03d      	b.n	8004ca6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2210      	movs	r2, #16
 8004c30:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2220      	movs	r2, #32
 8004c38:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d118      	bne.n	8004c74 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c50:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2120      	movs	r1, #32
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 f84a 	bl	8004cf6 <I2C_WaitOnFlagUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e01c      	b.n	8004ca6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2220      	movs	r2, #32
 8004c72:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	3301      	adds	r3, #1
 8004c78:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	f63f af39 	bhi.w	8004af6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c90:	f043 0220 	orr.w	r2, r3, #32
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8004ca4:	2302      	movs	r3, #2
  }
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3720      	adds	r7, #32
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d103      	bne.n	8004ccc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d007      	beq.n	8004cea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	699a      	ldr	r2, [r3, #24]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0201 	orr.w	r2, r2, #1
 8004ce8:	619a      	str	r2, [r3, #24]
  }
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	603b      	str	r3, [r7, #0]
 8004d02:	4613      	mov	r3, r2
 8004d04:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d06:	e031      	b.n	8004d6c <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d0e:	d02d      	beq.n	8004d6c <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d10:	f7fd ffea 	bl	8002ce8 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d302      	bcc.n	8004d26 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d122      	bne.n	8004d6c <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699a      	ldr	r2, [r3, #24]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	bf0c      	ite	eq
 8004d36:	2301      	moveq	r3, #1
 8004d38:	2300      	movne	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d113      	bne.n	8004d6c <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d48:	f043 0220 	orr.w	r2, r3, #32
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e00f      	b.n	8004d8c <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	4013      	ands	r3, r2
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	bf0c      	ite	eq
 8004d7c:	2301      	moveq	r3, #1
 8004d7e:	2300      	movne	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	461a      	mov	r2, r3
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d0be      	beq.n	8004d08 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004da0:	e033      	b.n	8004e0a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f87e 	bl	8004ea8 <I2C_IsErrorOccurred>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e031      	b.n	8004e1a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dbc:	d025      	beq.n	8004e0a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dbe:	f7fd ff93 	bl	8002ce8 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d302      	bcc.n	8004dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d11a      	bne.n	8004e0a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d013      	beq.n	8004e0a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	f043 0220 	orr.w	r2, r3, #32
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e007      	b.n	8004e1a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d1c4      	bne.n	8004da2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e2e:	e02f      	b.n	8004e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 f837 	bl	8004ea8 <I2C_IsErrorOccurred>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e02d      	b.n	8004ea0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e44:	f7fd ff50 	bl	8002ce8 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d302      	bcc.n	8004e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d11a      	bne.n	8004e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	f003 0320 	and.w	r3, r3, #32
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d013      	beq.n	8004e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6c:	f043 0220 	orr.w	r2, r3, #32
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e007      	b.n	8004ea0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b20      	cmp	r3, #32
 8004e9c:	d1c8      	bne.n	8004e30 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08a      	sub	sp, #40	; 0x28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d068      	beq.n	8004fa6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2210      	movs	r2, #16
 8004eda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004edc:	e049      	b.n	8004f72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ee4:	d045      	beq.n	8004f72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ee6:	f7fd feff 	bl	8002ce8 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d302      	bcc.n	8004efc <I2C_IsErrorOccurred+0x54>
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d13a      	bne.n	8004f72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f1e:	d121      	bne.n	8004f64 <I2C_IsErrorOccurred+0xbc>
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f26:	d01d      	beq.n	8004f64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004f28:	7cfb      	ldrb	r3, [r7, #19]
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	d01a      	beq.n	8004f64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f3e:	f7fd fed3 	bl	8002ce8 <HAL_GetTick>
 8004f42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f44:	e00e      	b.n	8004f64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f46:	f7fd fecf 	bl	8002ce8 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b19      	cmp	r3, #25
 8004f52:	d907      	bls.n	8004f64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	f043 0320 	orr.w	r3, r3, #32
 8004f5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004f62:	e006      	b.n	8004f72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b20      	cmp	r3, #32
 8004f70:	d1e9      	bne.n	8004f46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	d003      	beq.n	8004f88 <I2C_IsErrorOccurred+0xe0>
 8004f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0aa      	beq.n	8004ede <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d103      	bne.n	8004f98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2220      	movs	r2, #32
 8004f96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	f043 0304 	orr.w	r3, r3, #4
 8004f9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00b      	beq.n	8004fd0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00b      	beq.n	8004ff2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	f043 0308 	orr.w	r3, r3, #8
 8004fe0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00b      	beq.n	8005014 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	f043 0302 	orr.w	r3, r3, #2
 8005002:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800500c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01c      	beq.n	8005056 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f7ff fe46 	bl	8004cae <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6859      	ldr	r1, [r3, #4]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <I2C_IsErrorOccurred+0x1bc>)
 800502e:	400b      	ands	r3, r1
 8005030:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	431a      	orrs	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2220      	movs	r2, #32
 8005042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800505a:	4618      	mov	r0, r3
 800505c:	3728      	adds	r7, #40	; 0x28
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	fe00e800 	.word	0xfe00e800

08005068 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	607b      	str	r3, [r7, #4]
 8005072:	460b      	mov	r3, r1
 8005074:	817b      	strh	r3, [r7, #10]
 8005076:	4613      	mov	r3, r2
 8005078:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800507a:	897b      	ldrh	r3, [r7, #10]
 800507c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005080:	7a7b      	ldrb	r3, [r7, #9]
 8005082:	041b      	lsls	r3, r3, #16
 8005084:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005088:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	4313      	orrs	r3, r2
 8005092:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005096:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	0d5b      	lsrs	r3, r3, #21
 80050a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80050a6:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <I2C_TransferConfig+0x60>)
 80050a8:	430b      	orrs	r3, r1
 80050aa:	43db      	mvns	r3, r3
 80050ac:	ea02 0103 	and.w	r1, r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	03ff63ff 	.word	0x03ff63ff

080050cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d138      	bne.n	8005154 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e032      	b.n	8005156 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2224      	movs	r2, #36	; 0x24
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0201 	bic.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800511e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6819      	ldr	r1, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	e000      	b.n	8005156 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005154:	2302      	movs	r3, #2
  }
}
 8005156:	4618      	mov	r0, r3
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005162:	b480      	push	{r7}
 8005164:	b085      	sub	sp, #20
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b20      	cmp	r3, #32
 8005176:	d139      	bne.n	80051ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005182:	2302      	movs	r3, #2
 8005184:	e033      	b.n	80051ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2224      	movs	r2, #36	; 0x24
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0201 	bic.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80051b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	e000      	b.n	80051ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051ec:	2302      	movs	r3, #2
  }
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
	...

080051fc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005200:	4b05      	ldr	r3, [pc, #20]	; (8005218 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a04      	ldr	r2, [pc, #16]	; (8005218 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800520a:	6013      	str	r3, [r2, #0]
}
 800520c:	bf00      	nop
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40007000 	.word	0x40007000

0800521c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005220:	4b04      	ldr	r3, [pc, #16]	; (8005234 <HAL_PWREx_GetVoltageRange+0x18>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005228:	4618      	mov	r0, r3
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40007000 	.word	0x40007000

08005238 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005246:	d130      	bne.n	80052aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005248:	4b23      	ldr	r3, [pc, #140]	; (80052d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005254:	d038      	beq.n	80052c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005256:	4b20      	ldr	r3, [pc, #128]	; (80052d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800525e:	4a1e      	ldr	r2, [pc, #120]	; (80052d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005260:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005264:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005266:	4b1d      	ldr	r3, [pc, #116]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2232      	movs	r2, #50	; 0x32
 800526c:	fb02 f303 	mul.w	r3, r2, r3
 8005270:	4a1b      	ldr	r2, [pc, #108]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005272:	fba2 2303 	umull	r2, r3, r2, r3
 8005276:	0c9b      	lsrs	r3, r3, #18
 8005278:	3301      	adds	r3, #1
 800527a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800527c:	e002      	b.n	8005284 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3b01      	subs	r3, #1
 8005282:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005284:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005290:	d102      	bne.n	8005298 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1f2      	bne.n	800527e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005298:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a4:	d110      	bne.n	80052c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e00f      	b.n	80052ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80052aa:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b6:	d007      	beq.n	80052c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80052b8:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052c0:	4a05      	ldr	r2, [pc, #20]	; (80052d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	40007000 	.word	0x40007000
 80052dc:	2000001c 	.word	0x2000001c
 80052e0:	431bde83 	.word	0x431bde83

080052e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d102      	bne.n	80052f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	f000 bc02 	b.w	8005afc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052f8:	4b96      	ldr	r3, [pc, #600]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f003 030c 	and.w	r3, r3, #12
 8005300:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005302:	4b94      	ldr	r3, [pc, #592]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0310 	and.w	r3, r3, #16
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 80e4 	beq.w	80054e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d007      	beq.n	8005330 <HAL_RCC_OscConfig+0x4c>
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2b0c      	cmp	r3, #12
 8005324:	f040 808b 	bne.w	800543e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2b01      	cmp	r3, #1
 800532c:	f040 8087 	bne.w	800543e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005330:	4b88      	ldr	r3, [pc, #544]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d005      	beq.n	8005348 <HAL_RCC_OscConfig+0x64>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e3d9      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	4b81      	ldr	r3, [pc, #516]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0308 	and.w	r3, r3, #8
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <HAL_RCC_OscConfig+0x7e>
 8005358:	4b7e      	ldr	r3, [pc, #504]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005360:	e005      	b.n	800536e <HAL_RCC_OscConfig+0x8a>
 8005362:	4b7c      	ldr	r3, [pc, #496]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 8005364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005368:	091b      	lsrs	r3, r3, #4
 800536a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800536e:	4293      	cmp	r3, r2
 8005370:	d223      	bcs.n	80053ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fd54 	bl	8005e24 <RCC_SetFlashLatencyFromMSIRange>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e3ba      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005386:	4b73      	ldr	r3, [pc, #460]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a72      	ldr	r2, [pc, #456]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 800538c:	f043 0308 	orr.w	r3, r3, #8
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	4b70      	ldr	r3, [pc, #448]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	496d      	ldr	r1, [pc, #436]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053a4:	4b6b      	ldr	r3, [pc, #428]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	4968      	ldr	r1, [pc, #416]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	604b      	str	r3, [r1, #4]
 80053b8:	e025      	b.n	8005406 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053ba:	4b66      	ldr	r3, [pc, #408]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a65      	ldr	r2, [pc, #404]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 80053c0:	f043 0308 	orr.w	r3, r3, #8
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	4b63      	ldr	r3, [pc, #396]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	4960      	ldr	r1, [pc, #384]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053d8:	4b5e      	ldr	r3, [pc, #376]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	495b      	ldr	r1, [pc, #364]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d109      	bne.n	8005406 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fd14 	bl	8005e24 <RCC_SetFlashLatencyFromMSIRange>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e37a      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005406:	f000 fc81 	bl	8005d0c <HAL_RCC_GetSysClockFreq>
 800540a:	4602      	mov	r2, r0
 800540c:	4b51      	ldr	r3, [pc, #324]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	091b      	lsrs	r3, r3, #4
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	4950      	ldr	r1, [pc, #320]	; (8005558 <HAL_RCC_OscConfig+0x274>)
 8005418:	5ccb      	ldrb	r3, [r1, r3]
 800541a:	f003 031f 	and.w	r3, r3, #31
 800541e:	fa22 f303 	lsr.w	r3, r2, r3
 8005422:	4a4e      	ldr	r2, [pc, #312]	; (800555c <HAL_RCC_OscConfig+0x278>)
 8005424:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005426:	4b4e      	ldr	r3, [pc, #312]	; (8005560 <HAL_RCC_OscConfig+0x27c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4618      	mov	r0, r3
 800542c:	f7fd fc0c 	bl	8002c48 <HAL_InitTick>
 8005430:	4603      	mov	r3, r0
 8005432:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005434:	7bfb      	ldrb	r3, [r7, #15]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d052      	beq.n	80054e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800543a:	7bfb      	ldrb	r3, [r7, #15]
 800543c:	e35e      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d032      	beq.n	80054ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005446:	4b43      	ldr	r3, [pc, #268]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a42      	ldr	r2, [pc, #264]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 800544c:	f043 0301 	orr.w	r3, r3, #1
 8005450:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005452:	f7fd fc49 	bl	8002ce8 <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800545a:	f7fd fc45 	bl	8002ce8 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e347      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800546c:	4b39      	ldr	r3, [pc, #228]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0f0      	beq.n	800545a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005478:	4b36      	ldr	r3, [pc, #216]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a35      	ldr	r2, [pc, #212]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 800547e:	f043 0308 	orr.w	r3, r3, #8
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	4b33      	ldr	r3, [pc, #204]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	4930      	ldr	r1, [pc, #192]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 8005492:	4313      	orrs	r3, r2
 8005494:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005496:	4b2f      	ldr	r3, [pc, #188]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	492b      	ldr	r1, [pc, #172]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	604b      	str	r3, [r1, #4]
 80054aa:	e01a      	b.n	80054e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80054ac:	4b29      	ldr	r3, [pc, #164]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a28      	ldr	r2, [pc, #160]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 80054b2:	f023 0301 	bic.w	r3, r3, #1
 80054b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054b8:	f7fd fc16 	bl	8002ce8 <HAL_GetTick>
 80054bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054be:	e008      	b.n	80054d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054c0:	f7fd fc12 	bl	8002ce8 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e314      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054d2:	4b20      	ldr	r3, [pc, #128]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1f0      	bne.n	80054c0 <HAL_RCC_OscConfig+0x1dc>
 80054de:	e000      	b.n	80054e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d073      	beq.n	80055d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d005      	beq.n	8005500 <HAL_RCC_OscConfig+0x21c>
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	2b0c      	cmp	r3, #12
 80054f8:	d10e      	bne.n	8005518 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d10b      	bne.n	8005518 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005500:	4b14      	ldr	r3, [pc, #80]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d063      	beq.n	80055d4 <HAL_RCC_OscConfig+0x2f0>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d15f      	bne.n	80055d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e2f1      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005520:	d106      	bne.n	8005530 <HAL_RCC_OscConfig+0x24c>
 8005522:	4b0c      	ldr	r3, [pc, #48]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a0b      	ldr	r2, [pc, #44]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 8005528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	e025      	b.n	800557c <HAL_RCC_OscConfig+0x298>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005538:	d114      	bne.n	8005564 <HAL_RCC_OscConfig+0x280>
 800553a:	4b06      	ldr	r3, [pc, #24]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a05      	ldr	r2, [pc, #20]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 8005540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	4b03      	ldr	r3, [pc, #12]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a02      	ldr	r2, [pc, #8]	; (8005554 <HAL_RCC_OscConfig+0x270>)
 800554c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	e013      	b.n	800557c <HAL_RCC_OscConfig+0x298>
 8005554:	40021000 	.word	0x40021000
 8005558:	0800ee48 	.word	0x0800ee48
 800555c:	2000001c 	.word	0x2000001c
 8005560:	20000020 	.word	0x20000020
 8005564:	4ba0      	ldr	r3, [pc, #640]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a9f      	ldr	r2, [pc, #636]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 800556a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	4b9d      	ldr	r3, [pc, #628]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a9c      	ldr	r2, [pc, #624]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 8005576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800557a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d013      	beq.n	80055ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005584:	f7fd fbb0 	bl	8002ce8 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800558c:	f7fd fbac 	bl	8002ce8 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b64      	cmp	r3, #100	; 0x64
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e2ae      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800559e:	4b92      	ldr	r3, [pc, #584]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f0      	beq.n	800558c <HAL_RCC_OscConfig+0x2a8>
 80055aa:	e014      	b.n	80055d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ac:	f7fd fb9c 	bl	8002ce8 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055b4:	f7fd fb98 	bl	8002ce8 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b64      	cmp	r3, #100	; 0x64
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e29a      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055c6:	4b88      	ldr	r3, [pc, #544]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1f0      	bne.n	80055b4 <HAL_RCC_OscConfig+0x2d0>
 80055d2:	e000      	b.n	80055d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d060      	beq.n	80056a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d005      	beq.n	80055f4 <HAL_RCC_OscConfig+0x310>
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	2b0c      	cmp	r3, #12
 80055ec:	d119      	bne.n	8005622 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d116      	bne.n	8005622 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055f4:	4b7c      	ldr	r3, [pc, #496]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d005      	beq.n	800560c <HAL_RCC_OscConfig+0x328>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e277      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800560c:	4b76      	ldr	r3, [pc, #472]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	061b      	lsls	r3, r3, #24
 800561a:	4973      	ldr	r1, [pc, #460]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 800561c:	4313      	orrs	r3, r2
 800561e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005620:	e040      	b.n	80056a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d023      	beq.n	8005672 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800562a:	4b6f      	ldr	r3, [pc, #444]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a6e      	ldr	r2, [pc, #440]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 8005630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005636:	f7fd fb57 	bl	8002ce8 <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800563e:	f7fd fb53 	bl	8002ce8 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e255      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005650:	4b65      	ldr	r3, [pc, #404]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800565c:	4b62      	ldr	r3, [pc, #392]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	061b      	lsls	r3, r3, #24
 800566a:	495f      	ldr	r1, [pc, #380]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 800566c:	4313      	orrs	r3, r2
 800566e:	604b      	str	r3, [r1, #4]
 8005670:	e018      	b.n	80056a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005672:	4b5d      	ldr	r3, [pc, #372]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a5c      	ldr	r2, [pc, #368]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 8005678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800567c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567e:	f7fd fb33 	bl	8002ce8 <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005686:	f7fd fb2f 	bl	8002ce8 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e231      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005698:	4b53      	ldr	r3, [pc, #332]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1f0      	bne.n	8005686 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d03c      	beq.n	800572a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d01c      	beq.n	80056f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056b8:	4b4b      	ldr	r3, [pc, #300]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 80056ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056be:	4a4a      	ldr	r2, [pc, #296]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 80056c0:	f043 0301 	orr.w	r3, r3, #1
 80056c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c8:	f7fd fb0e 	bl	8002ce8 <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056d0:	f7fd fb0a 	bl	8002ce8 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e20c      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056e2:	4b41      	ldr	r3, [pc, #260]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 80056e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0ef      	beq.n	80056d0 <HAL_RCC_OscConfig+0x3ec>
 80056f0:	e01b      	b.n	800572a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056f2:	4b3d      	ldr	r3, [pc, #244]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 80056f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056f8:	4a3b      	ldr	r2, [pc, #236]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 80056fa:	f023 0301 	bic.w	r3, r3, #1
 80056fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005702:	f7fd faf1 	bl	8002ce8 <HAL_GetTick>
 8005706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005708:	e008      	b.n	800571c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800570a:	f7fd faed 	bl	8002ce8 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e1ef      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800571c:	4b32      	ldr	r3, [pc, #200]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 800571e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1ef      	bne.n	800570a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0304 	and.w	r3, r3, #4
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 80a6 	beq.w	8005884 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005738:	2300      	movs	r3, #0
 800573a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800573c:	4b2a      	ldr	r3, [pc, #168]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 800573e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10d      	bne.n	8005764 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005748:	4b27      	ldr	r3, [pc, #156]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 800574a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574c:	4a26      	ldr	r2, [pc, #152]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 800574e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005752:	6593      	str	r3, [r2, #88]	; 0x58
 8005754:	4b24      	ldr	r3, [pc, #144]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 8005756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800575c:	60bb      	str	r3, [r7, #8]
 800575e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005760:	2301      	movs	r3, #1
 8005762:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005764:	4b21      	ldr	r3, [pc, #132]	; (80057ec <HAL_RCC_OscConfig+0x508>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576c:	2b00      	cmp	r3, #0
 800576e:	d118      	bne.n	80057a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005770:	4b1e      	ldr	r3, [pc, #120]	; (80057ec <HAL_RCC_OscConfig+0x508>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a1d      	ldr	r2, [pc, #116]	; (80057ec <HAL_RCC_OscConfig+0x508>)
 8005776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800577a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800577c:	f7fd fab4 	bl	8002ce8 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005784:	f7fd fab0 	bl	8002ce8 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e1b2      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005796:	4b15      	ldr	r3, [pc, #84]	; (80057ec <HAL_RCC_OscConfig+0x508>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d108      	bne.n	80057bc <HAL_RCC_OscConfig+0x4d8>
 80057aa:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 80057ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b0:	4a0d      	ldr	r2, [pc, #52]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 80057b2:	f043 0301 	orr.w	r3, r3, #1
 80057b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057ba:	e029      	b.n	8005810 <HAL_RCC_OscConfig+0x52c>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	2b05      	cmp	r3, #5
 80057c2:	d115      	bne.n	80057f0 <HAL_RCC_OscConfig+0x50c>
 80057c4:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 80057c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ca:	4a07      	ldr	r2, [pc, #28]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 80057cc:	f043 0304 	orr.w	r3, r3, #4
 80057d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057d4:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 80057d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057da:	4a03      	ldr	r2, [pc, #12]	; (80057e8 <HAL_RCC_OscConfig+0x504>)
 80057dc:	f043 0301 	orr.w	r3, r3, #1
 80057e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057e4:	e014      	b.n	8005810 <HAL_RCC_OscConfig+0x52c>
 80057e6:	bf00      	nop
 80057e8:	40021000 	.word	0x40021000
 80057ec:	40007000 	.word	0x40007000
 80057f0:	4b9a      	ldr	r3, [pc, #616]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 80057f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f6:	4a99      	ldr	r2, [pc, #612]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 80057f8:	f023 0301 	bic.w	r3, r3, #1
 80057fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005800:	4b96      	ldr	r3, [pc, #600]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 8005802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005806:	4a95      	ldr	r2, [pc, #596]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 8005808:	f023 0304 	bic.w	r3, r3, #4
 800580c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d016      	beq.n	8005846 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005818:	f7fd fa66 	bl	8002ce8 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800581e:	e00a      	b.n	8005836 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005820:	f7fd fa62 	bl	8002ce8 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	f241 3288 	movw	r2, #5000	; 0x1388
 800582e:	4293      	cmp	r3, r2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e162      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005836:	4b89      	ldr	r3, [pc, #548]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 8005838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0ed      	beq.n	8005820 <HAL_RCC_OscConfig+0x53c>
 8005844:	e015      	b.n	8005872 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005846:	f7fd fa4f 	bl	8002ce8 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800584c:	e00a      	b.n	8005864 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800584e:	f7fd fa4b 	bl	8002ce8 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	f241 3288 	movw	r2, #5000	; 0x1388
 800585c:	4293      	cmp	r3, r2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e14b      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005864:	4b7d      	ldr	r3, [pc, #500]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1ed      	bne.n	800584e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005872:	7ffb      	ldrb	r3, [r7, #31]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d105      	bne.n	8005884 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005878:	4b78      	ldr	r3, [pc, #480]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 800587a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587c:	4a77      	ldr	r2, [pc, #476]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 800587e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005882:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0320 	and.w	r3, r3, #32
 800588c:	2b00      	cmp	r3, #0
 800588e:	d03c      	beq.n	800590a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	2b00      	cmp	r3, #0
 8005896:	d01c      	beq.n	80058d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005898:	4b70      	ldr	r3, [pc, #448]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 800589a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800589e:	4a6f      	ldr	r2, [pc, #444]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 80058a0:	f043 0301 	orr.w	r3, r3, #1
 80058a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a8:	f7fd fa1e 	bl	8002ce8 <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058b0:	f7fd fa1a 	bl	8002ce8 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e11c      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058c2:	4b66      	ldr	r3, [pc, #408]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 80058c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0ef      	beq.n	80058b0 <HAL_RCC_OscConfig+0x5cc>
 80058d0:	e01b      	b.n	800590a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058d2:	4b62      	ldr	r3, [pc, #392]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 80058d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058d8:	4a60      	ldr	r2, [pc, #384]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 80058da:	f023 0301 	bic.w	r3, r3, #1
 80058de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e2:	f7fd fa01 	bl	8002ce8 <HAL_GetTick>
 80058e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80058e8:	e008      	b.n	80058fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058ea:	f7fd f9fd 	bl	8002ce8 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e0ff      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80058fc:	4b57      	ldr	r3, [pc, #348]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 80058fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1ef      	bne.n	80058ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 80f3 	beq.w	8005afa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005918:	2b02      	cmp	r3, #2
 800591a:	f040 80c9 	bne.w	8005ab0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800591e:	4b4f      	ldr	r3, [pc, #316]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f003 0203 	and.w	r2, r3, #3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	429a      	cmp	r2, r3
 8005930:	d12c      	bne.n	800598c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593c:	3b01      	subs	r3, #1
 800593e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005940:	429a      	cmp	r2, r3
 8005942:	d123      	bne.n	800598c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005950:	429a      	cmp	r2, r3
 8005952:	d11b      	bne.n	800598c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005960:	429a      	cmp	r2, r3
 8005962:	d113      	bne.n	800598c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596e:	085b      	lsrs	r3, r3, #1
 8005970:	3b01      	subs	r3, #1
 8005972:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005974:	429a      	cmp	r2, r3
 8005976:	d109      	bne.n	800598c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	085b      	lsrs	r3, r3, #1
 8005984:	3b01      	subs	r3, #1
 8005986:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005988:	429a      	cmp	r2, r3
 800598a:	d06b      	beq.n	8005a64 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	2b0c      	cmp	r3, #12
 8005990:	d062      	beq.n	8005a58 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005992:	4b32      	ldr	r3, [pc, #200]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e0ac      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80059a2:	4b2e      	ldr	r3, [pc, #184]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a2d      	ldr	r2, [pc, #180]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 80059a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059ae:	f7fd f99b 	bl	8002ce8 <HAL_GetTick>
 80059b2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059b4:	e008      	b.n	80059c8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b6:	f7fd f997 	bl	8002ce8 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e099      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059c8:	4b24      	ldr	r3, [pc, #144]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1f0      	bne.n	80059b6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059d4:	4b21      	ldr	r3, [pc, #132]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	4b21      	ldr	r3, [pc, #132]	; (8005a60 <HAL_RCC_OscConfig+0x77c>)
 80059da:	4013      	ands	r3, r2
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80059e4:	3a01      	subs	r2, #1
 80059e6:	0112      	lsls	r2, r2, #4
 80059e8:	4311      	orrs	r1, r2
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059ee:	0212      	lsls	r2, r2, #8
 80059f0:	4311      	orrs	r1, r2
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80059f6:	0852      	lsrs	r2, r2, #1
 80059f8:	3a01      	subs	r2, #1
 80059fa:	0552      	lsls	r2, r2, #21
 80059fc:	4311      	orrs	r1, r2
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a02:	0852      	lsrs	r2, r2, #1
 8005a04:	3a01      	subs	r2, #1
 8005a06:	0652      	lsls	r2, r2, #25
 8005a08:	4311      	orrs	r1, r2
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a0e:	06d2      	lsls	r2, r2, #27
 8005a10:	430a      	orrs	r2, r1
 8005a12:	4912      	ldr	r1, [pc, #72]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a18:	4b10      	ldr	r3, [pc, #64]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a0f      	ldr	r2, [pc, #60]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 8005a1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a24:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	4a0c      	ldr	r2, [pc, #48]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 8005a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a30:	f7fd f95a 	bl	8002ce8 <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a38:	f7fd f956 	bl	8002ce8 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e058      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a4a:	4b04      	ldr	r3, [pc, #16]	; (8005a5c <HAL_RCC_OscConfig+0x778>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0f0      	beq.n	8005a38 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a56:	e050      	b.n	8005afa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e04f      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a64:	4b27      	ldr	r3, [pc, #156]	; (8005b04 <HAL_RCC_OscConfig+0x820>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d144      	bne.n	8005afa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005a70:	4b24      	ldr	r3, [pc, #144]	; (8005b04 <HAL_RCC_OscConfig+0x820>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a23      	ldr	r2, [pc, #140]	; (8005b04 <HAL_RCC_OscConfig+0x820>)
 8005a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a7c:	4b21      	ldr	r3, [pc, #132]	; (8005b04 <HAL_RCC_OscConfig+0x820>)
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	4a20      	ldr	r2, [pc, #128]	; (8005b04 <HAL_RCC_OscConfig+0x820>)
 8005a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a88:	f7fd f92e 	bl	8002ce8 <HAL_GetTick>
 8005a8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a90:	f7fd f92a 	bl	8002ce8 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e02c      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aa2:	4b18      	ldr	r3, [pc, #96]	; (8005b04 <HAL_RCC_OscConfig+0x820>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0f0      	beq.n	8005a90 <HAL_RCC_OscConfig+0x7ac>
 8005aae:	e024      	b.n	8005afa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	2b0c      	cmp	r3, #12
 8005ab4:	d01f      	beq.n	8005af6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ab6:	4b13      	ldr	r3, [pc, #76]	; (8005b04 <HAL_RCC_OscConfig+0x820>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a12      	ldr	r2, [pc, #72]	; (8005b04 <HAL_RCC_OscConfig+0x820>)
 8005abc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac2:	f7fd f911 	bl	8002ce8 <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aca:	f7fd f90d 	bl	8002ce8 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e00f      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005adc:	4b09      	ldr	r3, [pc, #36]	; (8005b04 <HAL_RCC_OscConfig+0x820>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1f0      	bne.n	8005aca <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005ae8:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <HAL_RCC_OscConfig+0x820>)
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	4905      	ldr	r1, [pc, #20]	; (8005b04 <HAL_RCC_OscConfig+0x820>)
 8005aee:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <HAL_RCC_OscConfig+0x824>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	60cb      	str	r3, [r1, #12]
 8005af4:	e001      	b.n	8005afa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e000      	b.n	8005afc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3720      	adds	r7, #32
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40021000 	.word	0x40021000
 8005b08:	feeefffc 	.word	0xfeeefffc

08005b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e0e7      	b.n	8005cf0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b20:	4b75      	ldr	r3, [pc, #468]	; (8005cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d910      	bls.n	8005b50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b2e:	4b72      	ldr	r3, [pc, #456]	; (8005cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f023 0207 	bic.w	r2, r3, #7
 8005b36:	4970      	ldr	r1, [pc, #448]	; (8005cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3e:	4b6e      	ldr	r3, [pc, #440]	; (8005cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d001      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e0cf      	b.n	8005cf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d010      	beq.n	8005b7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	4b66      	ldr	r3, [pc, #408]	; (8005cfc <HAL_RCC_ClockConfig+0x1f0>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d908      	bls.n	8005b7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b6c:	4b63      	ldr	r3, [pc, #396]	; (8005cfc <HAL_RCC_ClockConfig+0x1f0>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	4960      	ldr	r1, [pc, #384]	; (8005cfc <HAL_RCC_ClockConfig+0x1f0>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d04c      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d107      	bne.n	8005ba2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b92:	4b5a      	ldr	r3, [pc, #360]	; (8005cfc <HAL_RCC_ClockConfig+0x1f0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d121      	bne.n	8005be2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e0a6      	b.n	8005cf0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d107      	bne.n	8005bba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005baa:	4b54      	ldr	r3, [pc, #336]	; (8005cfc <HAL_RCC_ClockConfig+0x1f0>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d115      	bne.n	8005be2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e09a      	b.n	8005cf0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d107      	bne.n	8005bd2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005bc2:	4b4e      	ldr	r3, [pc, #312]	; (8005cfc <HAL_RCC_ClockConfig+0x1f0>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d109      	bne.n	8005be2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e08e      	b.n	8005cf0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bd2:	4b4a      	ldr	r3, [pc, #296]	; (8005cfc <HAL_RCC_ClockConfig+0x1f0>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e086      	b.n	8005cf0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005be2:	4b46      	ldr	r3, [pc, #280]	; (8005cfc <HAL_RCC_ClockConfig+0x1f0>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f023 0203 	bic.w	r2, r3, #3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	4943      	ldr	r1, [pc, #268]	; (8005cfc <HAL_RCC_ClockConfig+0x1f0>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bf4:	f7fd f878 	bl	8002ce8 <HAL_GetTick>
 8005bf8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bfa:	e00a      	b.n	8005c12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bfc:	f7fd f874 	bl	8002ce8 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e06e      	b.n	8005cf0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c12:	4b3a      	ldr	r3, [pc, #232]	; (8005cfc <HAL_RCC_ClockConfig+0x1f0>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 020c 	and.w	r2, r3, #12
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d1eb      	bne.n	8005bfc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d010      	beq.n	8005c52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	4b31      	ldr	r3, [pc, #196]	; (8005cfc <HAL_RCC_ClockConfig+0x1f0>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d208      	bcs.n	8005c52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c40:	4b2e      	ldr	r3, [pc, #184]	; (8005cfc <HAL_RCC_ClockConfig+0x1f0>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	492b      	ldr	r1, [pc, #172]	; (8005cfc <HAL_RCC_ClockConfig+0x1f0>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c52:	4b29      	ldr	r3, [pc, #164]	; (8005cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d210      	bcs.n	8005c82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c60:	4b25      	ldr	r3, [pc, #148]	; (8005cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f023 0207 	bic.w	r2, r3, #7
 8005c68:	4923      	ldr	r1, [pc, #140]	; (8005cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c70:	4b21      	ldr	r3, [pc, #132]	; (8005cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d001      	beq.n	8005c82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e036      	b.n	8005cf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d008      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c8e:	4b1b      	ldr	r3, [pc, #108]	; (8005cfc <HAL_RCC_ClockConfig+0x1f0>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	4918      	ldr	r1, [pc, #96]	; (8005cfc <HAL_RCC_ClockConfig+0x1f0>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0308 	and.w	r3, r3, #8
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d009      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cac:	4b13      	ldr	r3, [pc, #76]	; (8005cfc <HAL_RCC_ClockConfig+0x1f0>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	4910      	ldr	r1, [pc, #64]	; (8005cfc <HAL_RCC_ClockConfig+0x1f0>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005cc0:	f000 f824 	bl	8005d0c <HAL_RCC_GetSysClockFreq>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <HAL_RCC_ClockConfig+0x1f0>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	091b      	lsrs	r3, r3, #4
 8005ccc:	f003 030f 	and.w	r3, r3, #15
 8005cd0:	490b      	ldr	r1, [pc, #44]	; (8005d00 <HAL_RCC_ClockConfig+0x1f4>)
 8005cd2:	5ccb      	ldrb	r3, [r1, r3]
 8005cd4:	f003 031f 	and.w	r3, r3, #31
 8005cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cdc:	4a09      	ldr	r2, [pc, #36]	; (8005d04 <HAL_RCC_ClockConfig+0x1f8>)
 8005cde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ce0:	4b09      	ldr	r3, [pc, #36]	; (8005d08 <HAL_RCC_ClockConfig+0x1fc>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fc ffaf 	bl	8002c48 <HAL_InitTick>
 8005cea:	4603      	mov	r3, r0
 8005cec:	72fb      	strb	r3, [r7, #11]

  return status;
 8005cee:	7afb      	ldrb	r3, [r7, #11]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40022000 	.word	0x40022000
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	0800ee48 	.word	0x0800ee48
 8005d04:	2000001c 	.word	0x2000001c
 8005d08:	20000020 	.word	0x20000020

08005d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b089      	sub	sp, #36	; 0x24
 8005d10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	61fb      	str	r3, [r7, #28]
 8005d16:	2300      	movs	r3, #0
 8005d18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d1a:	4b3e      	ldr	r3, [pc, #248]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 030c 	and.w	r3, r3, #12
 8005d22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d24:	4b3b      	ldr	r3, [pc, #236]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f003 0303 	and.w	r3, r3, #3
 8005d2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d005      	beq.n	8005d40 <HAL_RCC_GetSysClockFreq+0x34>
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	2b0c      	cmp	r3, #12
 8005d38:	d121      	bne.n	8005d7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d11e      	bne.n	8005d7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005d40:	4b34      	ldr	r3, [pc, #208]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d107      	bne.n	8005d5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005d4c:	4b31      	ldr	r3, [pc, #196]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d52:	0a1b      	lsrs	r3, r3, #8
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	61fb      	str	r3, [r7, #28]
 8005d5a:	e005      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d5c:	4b2d      	ldr	r3, [pc, #180]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	091b      	lsrs	r3, r3, #4
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005d68:	4a2b      	ldr	r2, [pc, #172]	; (8005e18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10d      	bne.n	8005d94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d7c:	e00a      	b.n	8005d94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d102      	bne.n	8005d8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d84:	4b25      	ldr	r3, [pc, #148]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x110>)
 8005d86:	61bb      	str	r3, [r7, #24]
 8005d88:	e004      	b.n	8005d94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d101      	bne.n	8005d94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d90:	4b23      	ldr	r3, [pc, #140]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	2b0c      	cmp	r3, #12
 8005d98:	d134      	bne.n	8005e04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d9a:	4b1e      	ldr	r3, [pc, #120]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d003      	beq.n	8005db2 <HAL_RCC_GetSysClockFreq+0xa6>
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d003      	beq.n	8005db8 <HAL_RCC_GetSysClockFreq+0xac>
 8005db0:	e005      	b.n	8005dbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005db2:	4b1a      	ldr	r3, [pc, #104]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x110>)
 8005db4:	617b      	str	r3, [r7, #20]
      break;
 8005db6:	e005      	b.n	8005dc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005db8:	4b19      	ldr	r3, [pc, #100]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x114>)
 8005dba:	617b      	str	r3, [r7, #20]
      break;
 8005dbc:	e002      	b.n	8005dc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	617b      	str	r3, [r7, #20]
      break;
 8005dc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dc4:	4b13      	ldr	r3, [pc, #76]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	091b      	lsrs	r3, r3, #4
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	3301      	adds	r3, #1
 8005dd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005dd2:	4b10      	ldr	r3, [pc, #64]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	0a1b      	lsrs	r3, r3, #8
 8005dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	fb03 f202 	mul.w	r2, r3, r2
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005dea:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	0e5b      	lsrs	r3, r3, #25
 8005df0:	f003 0303 	and.w	r3, r3, #3
 8005df4:	3301      	adds	r3, #1
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005e04:	69bb      	ldr	r3, [r7, #24]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3724      	adds	r7, #36	; 0x24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	40021000 	.word	0x40021000
 8005e18:	0800ee58 	.word	0x0800ee58
 8005e1c:	00f42400 	.word	0x00f42400
 8005e20:	007a1200 	.word	0x007a1200

08005e24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e30:	4b2a      	ldr	r3, [pc, #168]	; (8005edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e3c:	f7ff f9ee 	bl	800521c <HAL_PWREx_GetVoltageRange>
 8005e40:	6178      	str	r0, [r7, #20]
 8005e42:	e014      	b.n	8005e6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e44:	4b25      	ldr	r3, [pc, #148]	; (8005edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e48:	4a24      	ldr	r2, [pc, #144]	; (8005edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8005e50:	4b22      	ldr	r3, [pc, #136]	; (8005edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e5c:	f7ff f9de 	bl	800521c <HAL_PWREx_GetVoltageRange>
 8005e60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e62:	4b1e      	ldr	r3, [pc, #120]	; (8005edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e66:	4a1d      	ldr	r2, [pc, #116]	; (8005edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e74:	d10b      	bne.n	8005e8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b80      	cmp	r3, #128	; 0x80
 8005e7a:	d919      	bls.n	8005eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2ba0      	cmp	r3, #160	; 0xa0
 8005e80:	d902      	bls.n	8005e88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e82:	2302      	movs	r3, #2
 8005e84:	613b      	str	r3, [r7, #16]
 8005e86:	e013      	b.n	8005eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e88:	2301      	movs	r3, #1
 8005e8a:	613b      	str	r3, [r7, #16]
 8005e8c:	e010      	b.n	8005eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b80      	cmp	r3, #128	; 0x80
 8005e92:	d902      	bls.n	8005e9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005e94:	2303      	movs	r3, #3
 8005e96:	613b      	str	r3, [r7, #16]
 8005e98:	e00a      	b.n	8005eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b80      	cmp	r3, #128	; 0x80
 8005e9e:	d102      	bne.n	8005ea6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	e004      	b.n	8005eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b70      	cmp	r3, #112	; 0x70
 8005eaa:	d101      	bne.n	8005eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005eac:	2301      	movs	r3, #1
 8005eae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f023 0207 	bic.w	r2, r3, #7
 8005eb8:	4909      	ldr	r1, [pc, #36]	; (8005ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005ec0:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d001      	beq.n	8005ed2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e000      	b.n	8005ed4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	40022000 	.word	0x40022000

08005ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005eec:	2300      	movs	r3, #0
 8005eee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d031      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f08:	d01a      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005f0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f0e:	d814      	bhi.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d009      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005f14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f18:	d10f      	bne.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005f1a:	4b5d      	ldr	r3, [pc, #372]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	4a5c      	ldr	r2, [pc, #368]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f24:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f26:	e00c      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 f9de 	bl	80062f0 <RCCEx_PLLSAI1_Config>
 8005f34:	4603      	mov	r3, r0
 8005f36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f38:	e003      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	74fb      	strb	r3, [r7, #19]
      break;
 8005f3e:	e000      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f42:	7cfb      	ldrb	r3, [r7, #19]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10b      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f48:	4b51      	ldr	r3, [pc, #324]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f56:	494e      	ldr	r1, [pc, #312]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005f5e:	e001      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f60:	7cfb      	ldrb	r3, [r7, #19]
 8005f62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 809e 	beq.w	80060ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f72:	2300      	movs	r3, #0
 8005f74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f76:	4b46      	ldr	r3, [pc, #280]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005f82:	2301      	movs	r3, #1
 8005f84:	e000      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005f86:	2300      	movs	r3, #0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00d      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f8c:	4b40      	ldr	r3, [pc, #256]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f90:	4a3f      	ldr	r2, [pc, #252]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f96:	6593      	str	r3, [r2, #88]	; 0x58
 8005f98:	4b3d      	ldr	r3, [pc, #244]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa0:	60bb      	str	r3, [r7, #8]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fa8:	4b3a      	ldr	r3, [pc, #232]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a39      	ldr	r2, [pc, #228]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fb4:	f7fc fe98 	bl	8002ce8 <HAL_GetTick>
 8005fb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005fba:	e009      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fbc:	f7fc fe94 	bl	8002ce8 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d902      	bls.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	74fb      	strb	r3, [r7, #19]
        break;
 8005fce:	e005      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005fd0:	4b30      	ldr	r3, [pc, #192]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0ef      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005fdc:	7cfb      	ldrb	r3, [r7, #19]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d15a      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005fe2:	4b2b      	ldr	r3, [pc, #172]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01e      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d019      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ffe:	4b24      	ldr	r3, [pc, #144]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006008:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800600a:	4b21      	ldr	r3, [pc, #132]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800600c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006010:	4a1f      	ldr	r2, [pc, #124]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800601a:	4b1d      	ldr	r3, [pc, #116]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800601c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006020:	4a1b      	ldr	r2, [pc, #108]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800602a:	4a19      	ldr	r2, [pc, #100]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d016      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603c:	f7fc fe54 	bl	8002ce8 <HAL_GetTick>
 8006040:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006042:	e00b      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006044:	f7fc fe50 	bl	8002ce8 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006052:	4293      	cmp	r3, r2
 8006054:	d902      	bls.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	74fb      	strb	r3, [r7, #19]
            break;
 800605a:	e006      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800605c:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800605e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0ec      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800606a:	7cfb      	ldrb	r3, [r7, #19]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10b      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006070:	4b07      	ldr	r3, [pc, #28]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006076:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607e:	4904      	ldr	r1, [pc, #16]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006080:	4313      	orrs	r3, r2
 8006082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006086:	e009      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006088:	7cfb      	ldrb	r3, [r7, #19]
 800608a:	74bb      	strb	r3, [r7, #18]
 800608c:	e006      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800608e:	bf00      	nop
 8006090:	40021000 	.word	0x40021000
 8006094:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006098:	7cfb      	ldrb	r3, [r7, #19]
 800609a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800609c:	7c7b      	ldrb	r3, [r7, #17]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d105      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a2:	4b8a      	ldr	r3, [pc, #552]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a6:	4a89      	ldr	r2, [pc, #548]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060ba:	4b84      	ldr	r3, [pc, #528]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c0:	f023 0203 	bic.w	r2, r3, #3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	4980      	ldr	r1, [pc, #512]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00a      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060dc:	4b7b      	ldr	r3, [pc, #492]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e2:	f023 020c 	bic.w	r2, r3, #12
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	4978      	ldr	r1, [pc, #480]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0320 	and.w	r3, r3, #32
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060fe:	4b73      	ldr	r3, [pc, #460]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006104:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610c:	496f      	ldr	r1, [pc, #444]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800610e:	4313      	orrs	r3, r2
 8006110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00a      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006120:	4b6a      	ldr	r3, [pc, #424]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006126:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800612e:	4967      	ldr	r1, [pc, #412]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006130:	4313      	orrs	r3, r2
 8006132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00a      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006142:	4b62      	ldr	r3, [pc, #392]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006148:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006150:	495e      	ldr	r1, [pc, #376]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006152:	4313      	orrs	r3, r2
 8006154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00a      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006164:	4b59      	ldr	r3, [pc, #356]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006172:	4956      	ldr	r1, [pc, #344]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006174:	4313      	orrs	r3, r2
 8006176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006186:	4b51      	ldr	r3, [pc, #324]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006194:	494d      	ldr	r1, [pc, #308]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006196:	4313      	orrs	r3, r2
 8006198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d028      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061a8:	4b48      	ldr	r3, [pc, #288]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	4945      	ldr	r1, [pc, #276]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061c6:	d106      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061c8:	4b40      	ldr	r3, [pc, #256]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	4a3f      	ldr	r2, [pc, #252]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061d2:	60d3      	str	r3, [r2, #12]
 80061d4:	e011      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061de:	d10c      	bne.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3304      	adds	r3, #4
 80061e4:	2101      	movs	r1, #1
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 f882 	bl	80062f0 <RCCEx_PLLSAI1_Config>
 80061ec:	4603      	mov	r3, r0
 80061ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80061f0:	7cfb      	ldrb	r3, [r7, #19]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80061f6:	7cfb      	ldrb	r3, [r7, #19]
 80061f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d028      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006206:	4b31      	ldr	r3, [pc, #196]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006214:	492d      	ldr	r1, [pc, #180]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006224:	d106      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006226:	4b29      	ldr	r3, [pc, #164]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	4a28      	ldr	r2, [pc, #160]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800622c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006230:	60d3      	str	r3, [r2, #12]
 8006232:	e011      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006238:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800623c:	d10c      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3304      	adds	r3, #4
 8006242:	2101      	movs	r1, #1
 8006244:	4618      	mov	r0, r3
 8006246:	f000 f853 	bl	80062f0 <RCCEx_PLLSAI1_Config>
 800624a:	4603      	mov	r3, r0
 800624c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800624e:	7cfb      	ldrb	r3, [r7, #19]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006254:	7cfb      	ldrb	r3, [r7, #19]
 8006256:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01c      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006264:	4b19      	ldr	r3, [pc, #100]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800626a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006272:	4916      	ldr	r1, [pc, #88]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006274:	4313      	orrs	r3, r2
 8006276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800627e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006282:	d10c      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3304      	adds	r3, #4
 8006288:	2102      	movs	r1, #2
 800628a:	4618      	mov	r0, r3
 800628c:	f000 f830 	bl	80062f0 <RCCEx_PLLSAI1_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006294:	7cfb      	ldrb	r3, [r7, #19]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800629a:	7cfb      	ldrb	r3, [r7, #19]
 800629c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062aa:	4b08      	ldr	r3, [pc, #32]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062b8:	4904      	ldr	r1, [pc, #16]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80062c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	40021000 	.word	0x40021000

080062d0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80062d4:	4b05      	ldr	r3, [pc, #20]	; (80062ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a04      	ldr	r2, [pc, #16]	; (80062ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80062da:	f043 0304 	orr.w	r3, r3, #4
 80062de:	6013      	str	r3, [r2, #0]
}
 80062e0:	bf00      	nop
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	40021000 	.word	0x40021000

080062f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80062fe:	4b74      	ldr	r3, [pc, #464]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f003 0303 	and.w	r3, r3, #3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d018      	beq.n	800633c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800630a:	4b71      	ldr	r3, [pc, #452]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f003 0203 	and.w	r2, r3, #3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d10d      	bne.n	8006336 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
       ||
 800631e:	2b00      	cmp	r3, #0
 8006320:	d009      	beq.n	8006336 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006322:	4b6b      	ldr	r3, [pc, #428]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	091b      	lsrs	r3, r3, #4
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
       ||
 8006332:	429a      	cmp	r2, r3
 8006334:	d047      	beq.n	80063c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	73fb      	strb	r3, [r7, #15]
 800633a:	e044      	b.n	80063c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b03      	cmp	r3, #3
 8006342:	d018      	beq.n	8006376 <RCCEx_PLLSAI1_Config+0x86>
 8006344:	2b03      	cmp	r3, #3
 8006346:	d825      	bhi.n	8006394 <RCCEx_PLLSAI1_Config+0xa4>
 8006348:	2b01      	cmp	r3, #1
 800634a:	d002      	beq.n	8006352 <RCCEx_PLLSAI1_Config+0x62>
 800634c:	2b02      	cmp	r3, #2
 800634e:	d009      	beq.n	8006364 <RCCEx_PLLSAI1_Config+0x74>
 8006350:	e020      	b.n	8006394 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006352:	4b5f      	ldr	r3, [pc, #380]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d11d      	bne.n	800639a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006362:	e01a      	b.n	800639a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006364:	4b5a      	ldr	r3, [pc, #360]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800636c:	2b00      	cmp	r3, #0
 800636e:	d116      	bne.n	800639e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006374:	e013      	b.n	800639e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006376:	4b56      	ldr	r3, [pc, #344]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10f      	bne.n	80063a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006382:	4b53      	ldr	r3, [pc, #332]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d109      	bne.n	80063a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006392:	e006      	b.n	80063a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	73fb      	strb	r3, [r7, #15]
      break;
 8006398:	e004      	b.n	80063a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800639a:	bf00      	nop
 800639c:	e002      	b.n	80063a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800639e:	bf00      	nop
 80063a0:	e000      	b.n	80063a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10d      	bne.n	80063c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80063aa:	4b49      	ldr	r3, [pc, #292]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6819      	ldr	r1, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	011b      	lsls	r3, r3, #4
 80063be:	430b      	orrs	r3, r1
 80063c0:	4943      	ldr	r1, [pc, #268]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d17c      	bne.n	80064c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80063cc:	4b40      	ldr	r3, [pc, #256]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a3f      	ldr	r2, [pc, #252]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063d8:	f7fc fc86 	bl	8002ce8 <HAL_GetTick>
 80063dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80063de:	e009      	b.n	80063f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063e0:	f7fc fc82 	bl	8002ce8 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d902      	bls.n	80063f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	73fb      	strb	r3, [r7, #15]
        break;
 80063f2:	e005      	b.n	8006400 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80063f4:	4b36      	ldr	r3, [pc, #216]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1ef      	bne.n	80063e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d15f      	bne.n	80064c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d110      	bne.n	800642e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800640c:	4b30      	ldr	r3, [pc, #192]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006414:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6892      	ldr	r2, [r2, #8]
 800641c:	0211      	lsls	r1, r2, #8
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	68d2      	ldr	r2, [r2, #12]
 8006422:	06d2      	lsls	r2, r2, #27
 8006424:	430a      	orrs	r2, r1
 8006426:	492a      	ldr	r1, [pc, #168]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006428:	4313      	orrs	r3, r2
 800642a:	610b      	str	r3, [r1, #16]
 800642c:	e027      	b.n	800647e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d112      	bne.n	800645a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006434:	4b26      	ldr	r3, [pc, #152]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800643c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6892      	ldr	r2, [r2, #8]
 8006444:	0211      	lsls	r1, r2, #8
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6912      	ldr	r2, [r2, #16]
 800644a:	0852      	lsrs	r2, r2, #1
 800644c:	3a01      	subs	r2, #1
 800644e:	0552      	lsls	r2, r2, #21
 8006450:	430a      	orrs	r2, r1
 8006452:	491f      	ldr	r1, [pc, #124]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006454:	4313      	orrs	r3, r2
 8006456:	610b      	str	r3, [r1, #16]
 8006458:	e011      	b.n	800647e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800645a:	4b1d      	ldr	r3, [pc, #116]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006462:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	6892      	ldr	r2, [r2, #8]
 800646a:	0211      	lsls	r1, r2, #8
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6952      	ldr	r2, [r2, #20]
 8006470:	0852      	lsrs	r2, r2, #1
 8006472:	3a01      	subs	r2, #1
 8006474:	0652      	lsls	r2, r2, #25
 8006476:	430a      	orrs	r2, r1
 8006478:	4915      	ldr	r1, [pc, #84]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800647a:	4313      	orrs	r3, r2
 800647c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800647e:	4b14      	ldr	r3, [pc, #80]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a13      	ldr	r2, [pc, #76]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006484:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006488:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800648a:	f7fc fc2d 	bl	8002ce8 <HAL_GetTick>
 800648e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006490:	e009      	b.n	80064a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006492:	f7fc fc29 	bl	8002ce8 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d902      	bls.n	80064a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	73fb      	strb	r3, [r7, #15]
          break;
 80064a4:	e005      	b.n	80064b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80064a6:	4b0a      	ldr	r3, [pc, #40]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0ef      	beq.n	8006492 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80064b8:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064ba:	691a      	ldr	r2, [r3, #16]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	4903      	ldr	r1, [pc, #12]	; (80064d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80064c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	40021000 	.word	0x40021000

080064d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e049      	b.n	800657a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fc fb42 	bl	8002b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3304      	adds	r3, #4
 8006510:	4619      	mov	r1, r3
 8006512:	4610      	mov	r0, r2
 8006514:	f000 fc10 	bl	8006d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b01      	cmp	r3, #1
 8006596:	d001      	beq.n	800659c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e033      	b.n	8006604 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2202      	movs	r2, #2
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a19      	ldr	r2, [pc, #100]	; (8006610 <HAL_TIM_Base_Start+0x8c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d009      	beq.n	80065c2 <HAL_TIM_Base_Start+0x3e>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b6:	d004      	beq.n	80065c2 <HAL_TIM_Base_Start+0x3e>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a15      	ldr	r2, [pc, #84]	; (8006614 <HAL_TIM_Base_Start+0x90>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d115      	bne.n	80065ee <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	4b13      	ldr	r3, [pc, #76]	; (8006618 <HAL_TIM_Base_Start+0x94>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b06      	cmp	r3, #6
 80065d2:	d015      	beq.n	8006600 <HAL_TIM_Base_Start+0x7c>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065da:	d011      	beq.n	8006600 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0201 	orr.w	r2, r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ec:	e008      	b.n	8006600 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0201 	orr.w	r2, r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	e000      	b.n	8006602 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006600:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	40012c00 	.word	0x40012c00
 8006614:	40014000 	.word	0x40014000
 8006618:	00010007 	.word	0x00010007

0800661c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b01      	cmp	r3, #1
 800662e:	d001      	beq.n	8006634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e03b      	b.n	80066ac <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68da      	ldr	r2, [r3, #12]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0201 	orr.w	r2, r2, #1
 800664a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a19      	ldr	r2, [pc, #100]	; (80066b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d009      	beq.n	800666a <HAL_TIM_Base_Start_IT+0x4e>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800665e:	d004      	beq.n	800666a <HAL_TIM_Base_Start_IT+0x4e>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a15      	ldr	r2, [pc, #84]	; (80066bc <HAL_TIM_Base_Start_IT+0xa0>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d115      	bne.n	8006696 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	4b13      	ldr	r3, [pc, #76]	; (80066c0 <HAL_TIM_Base_Start_IT+0xa4>)
 8006672:	4013      	ands	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b06      	cmp	r3, #6
 800667a:	d015      	beq.n	80066a8 <HAL_TIM_Base_Start_IT+0x8c>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006682:	d011      	beq.n	80066a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f042 0201 	orr.w	r2, r2, #1
 8006692:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006694:	e008      	b.n	80066a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f042 0201 	orr.w	r2, r2, #1
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	e000      	b.n	80066aa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	40012c00 	.word	0x40012c00
 80066bc:	40014000 	.word	0x40014000
 80066c0:	00010007 	.word	0x00010007

080066c4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e049      	b.n	800676a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7fc fa26 	bl	8002b3c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3304      	adds	r3, #4
 8006700:	4619      	mov	r1, r3
 8006702:	4610      	mov	r0, r2
 8006704:	f000 fb18 	bl	8006d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b086      	sub	sp, #24
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e097      	b.n	80068b6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7fc f98a 	bl	8002ab4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6812      	ldr	r2, [r2, #0]
 80067b2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80067b6:	f023 0307 	bic.w	r3, r3, #7
 80067ba:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4619      	mov	r1, r3
 80067c6:	4610      	mov	r0, r2
 80067c8:	f000 fab6 	bl	8006d38 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067f4:	f023 0303 	bic.w	r3, r3, #3
 80067f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	689a      	ldr	r2, [r3, #8]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	021b      	lsls	r3, r3, #8
 8006804:	4313      	orrs	r3, r2
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	4313      	orrs	r3, r2
 800680a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006812:	f023 030c 	bic.w	r3, r3, #12
 8006816:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800681e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	021b      	lsls	r3, r3, #8
 800682e:	4313      	orrs	r3, r2
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	011a      	lsls	r2, r3, #4
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	031b      	lsls	r3, r3, #12
 8006842:	4313      	orrs	r3, r2
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4313      	orrs	r3, r2
 8006848:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006850:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006858:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	4313      	orrs	r3, r2
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4313      	orrs	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068ce:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068d6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068de:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068e6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d110      	bne.n	8006910 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d102      	bne.n	80068fa <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80068f4:	7b7b      	ldrb	r3, [r7, #13]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d001      	beq.n	80068fe <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e069      	b.n	80069d2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2202      	movs	r2, #2
 8006902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2202      	movs	r2, #2
 800690a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800690e:	e031      	b.n	8006974 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b04      	cmp	r3, #4
 8006914:	d110      	bne.n	8006938 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006916:	7bbb      	ldrb	r3, [r7, #14]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d102      	bne.n	8006922 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800691c:	7b3b      	ldrb	r3, [r7, #12]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d001      	beq.n	8006926 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e055      	b.n	80069d2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2202      	movs	r2, #2
 800692a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2202      	movs	r2, #2
 8006932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006936:	e01d      	b.n	8006974 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006938:	7bfb      	ldrb	r3, [r7, #15]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d108      	bne.n	8006950 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d105      	bne.n	8006950 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006944:	7b7b      	ldrb	r3, [r7, #13]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d102      	bne.n	8006950 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800694a:	7b3b      	ldrb	r3, [r7, #12]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d001      	beq.n	8006954 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e03e      	b.n	80069d2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_TIM_Encoder_Start+0xc4>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b04      	cmp	r3, #4
 800697e:	d008      	beq.n	8006992 <HAL_TIM_Encoder_Start+0xd4>
 8006980:	e00f      	b.n	80069a2 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2201      	movs	r2, #1
 8006988:	2100      	movs	r1, #0
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fcb6 	bl	80072fc <TIM_CCxChannelCmd>
      break;
 8006990:	e016      	b.n	80069c0 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2201      	movs	r2, #1
 8006998:	2104      	movs	r1, #4
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fcae 	bl	80072fc <TIM_CCxChannelCmd>
      break;
 80069a0:	e00e      	b.n	80069c0 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2201      	movs	r2, #1
 80069a8:	2100      	movs	r1, #0
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fca6 	bl	80072fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2201      	movs	r2, #1
 80069b6:	2104      	movs	r1, #4
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 fc9f 	bl	80072fc <TIM_CCxChannelCmd>
      break;
 80069be:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f042 0201 	orr.w	r2, r2, #1
 80069ce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d020      	beq.n	8006a3e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d01b      	beq.n	8006a3e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f06f 0202 	mvn.w	r2, #2
 8006a0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	f003 0303 	and.w	r3, r3, #3
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f969 	bl	8006cfc <HAL_TIM_IC_CaptureCallback>
 8006a2a:	e005      	b.n	8006a38 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f95b 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f96c 	bl	8006d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f003 0304 	and.w	r3, r3, #4
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d020      	beq.n	8006a8a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 0304 	and.w	r3, r3, #4
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d01b      	beq.n	8006a8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f06f 0204 	mvn.w	r2, #4
 8006a5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f943 	bl	8006cfc <HAL_TIM_IC_CaptureCallback>
 8006a76:	e005      	b.n	8006a84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f935 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f946 	bl	8006d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f003 0308 	and.w	r3, r3, #8
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d020      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f003 0308 	and.w	r3, r3, #8
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d01b      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f06f 0208 	mvn.w	r2, #8
 8006aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2204      	movs	r2, #4
 8006aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	f003 0303 	and.w	r3, r3, #3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f91d 	bl	8006cfc <HAL_TIM_IC_CaptureCallback>
 8006ac2:	e005      	b.n	8006ad0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f90f 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f920 	bl	8006d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f003 0310 	and.w	r3, r3, #16
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d020      	beq.n	8006b22 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f003 0310 	and.w	r3, r3, #16
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d01b      	beq.n	8006b22 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f06f 0210 	mvn.w	r2, #16
 8006af2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2208      	movs	r2, #8
 8006af8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d003      	beq.n	8006b10 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f8f7 	bl	8006cfc <HAL_TIM_IC_CaptureCallback>
 8006b0e:	e005      	b.n	8006b1c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f8e9 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f8fa 	bl	8006d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00c      	beq.n	8006b46 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d007      	beq.n	8006b46 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f06f 0201 	mvn.w	r2, #1
 8006b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f8c7 	bl	8006cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00c      	beq.n	8006b6a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d007      	beq.n	8006b6a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fc5f 	bl	8007428 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00c      	beq.n	8006b8e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d007      	beq.n	8006b8e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fc57 	bl	800743c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00c      	beq.n	8006bb2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d007      	beq.n	8006bb2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f8b9 	bl	8006d24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f003 0320 	and.w	r3, r3, #32
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00c      	beq.n	8006bd6 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d007      	beq.n	8006bd6 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f06f 0220 	mvn.w	r2, #32
 8006bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fc1f 	bl	8007414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bd6:	bf00      	nop
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_TIM_OC_ConfigChannel+0x1e>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e066      	b.n	8006ccc <HAL_TIM_OC_ConfigChannel+0xec>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b14      	cmp	r3, #20
 8006c0a:	d857      	bhi.n	8006cbc <HAL_TIM_OC_ConfigChannel+0xdc>
 8006c0c:	a201      	add	r2, pc, #4	; (adr r2, 8006c14 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c12:	bf00      	nop
 8006c14:	08006c69 	.word	0x08006c69
 8006c18:	08006cbd 	.word	0x08006cbd
 8006c1c:	08006cbd 	.word	0x08006cbd
 8006c20:	08006cbd 	.word	0x08006cbd
 8006c24:	08006c77 	.word	0x08006c77
 8006c28:	08006cbd 	.word	0x08006cbd
 8006c2c:	08006cbd 	.word	0x08006cbd
 8006c30:	08006cbd 	.word	0x08006cbd
 8006c34:	08006c85 	.word	0x08006c85
 8006c38:	08006cbd 	.word	0x08006cbd
 8006c3c:	08006cbd 	.word	0x08006cbd
 8006c40:	08006cbd 	.word	0x08006cbd
 8006c44:	08006c93 	.word	0x08006c93
 8006c48:	08006cbd 	.word	0x08006cbd
 8006c4c:	08006cbd 	.word	0x08006cbd
 8006c50:	08006cbd 	.word	0x08006cbd
 8006c54:	08006ca1 	.word	0x08006ca1
 8006c58:	08006cbd 	.word	0x08006cbd
 8006c5c:	08006cbd 	.word	0x08006cbd
 8006c60:	08006cbd 	.word	0x08006cbd
 8006c64:	08006caf 	.word	0x08006caf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68b9      	ldr	r1, [r7, #8]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 f8c6 	bl	8006e00 <TIM_OC1_SetConfig>
      break;
 8006c74:	e025      	b.n	8006cc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68b9      	ldr	r1, [r7, #8]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 f93b 	bl	8006ef8 <TIM_OC2_SetConfig>
      break;
 8006c82:	e01e      	b.n	8006cc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 f9ae 	bl	8006fec <TIM_OC3_SetConfig>
      break;
 8006c90:	e017      	b.n	8006cc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68b9      	ldr	r1, [r7, #8]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 fa1f 	bl	80070dc <TIM_OC4_SetConfig>
      break;
 8006c9e:	e010      	b.n	8006cc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68b9      	ldr	r1, [r7, #8]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fa76 	bl	8007198 <TIM_OC5_SetConfig>
      break;
 8006cac:	e009      	b.n	8006cc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68b9      	ldr	r1, [r7, #8]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fac7 	bl	8007248 <TIM_OC6_SetConfig>
      break;
 8006cba:	e002      	b.n	8006cc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a2a      	ldr	r2, [pc, #168]	; (8006df4 <TIM_Base_SetConfig+0xbc>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d003      	beq.n	8006d58 <TIM_Base_SetConfig+0x20>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d56:	d108      	bne.n	8006d6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a21      	ldr	r2, [pc, #132]	; (8006df4 <TIM_Base_SetConfig+0xbc>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d00b      	beq.n	8006d8a <TIM_Base_SetConfig+0x52>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d78:	d007      	beq.n	8006d8a <TIM_Base_SetConfig+0x52>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a1e      	ldr	r2, [pc, #120]	; (8006df8 <TIM_Base_SetConfig+0xc0>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d003      	beq.n	8006d8a <TIM_Base_SetConfig+0x52>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a1d      	ldr	r2, [pc, #116]	; (8006dfc <TIM_Base_SetConfig+0xc4>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d108      	bne.n	8006d9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a0c      	ldr	r2, [pc, #48]	; (8006df4 <TIM_Base_SetConfig+0xbc>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d007      	beq.n	8006dd8 <TIM_Base_SetConfig+0xa0>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a0b      	ldr	r2, [pc, #44]	; (8006df8 <TIM_Base_SetConfig+0xc0>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d003      	beq.n	8006dd8 <TIM_Base_SetConfig+0xa0>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a0a      	ldr	r2, [pc, #40]	; (8006dfc <TIM_Base_SetConfig+0xc4>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d103      	bne.n	8006de0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	691a      	ldr	r2, [r3, #16]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	615a      	str	r2, [r3, #20]
}
 8006de6:	bf00      	nop
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	40012c00 	.word	0x40012c00
 8006df8:	40014000 	.word	0x40014000
 8006dfc:	40014400 	.word	0x40014400

08006e00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	f023 0201 	bic.w	r2, r3, #1
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0303 	bic.w	r3, r3, #3
 8006e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f023 0302 	bic.w	r3, r3, #2
 8006e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a24      	ldr	r2, [pc, #144]	; (8006eec <TIM_OC1_SetConfig+0xec>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d007      	beq.n	8006e70 <TIM_OC1_SetConfig+0x70>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a23      	ldr	r2, [pc, #140]	; (8006ef0 <TIM_OC1_SetConfig+0xf0>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d003      	beq.n	8006e70 <TIM_OC1_SetConfig+0x70>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a22      	ldr	r2, [pc, #136]	; (8006ef4 <TIM_OC1_SetConfig+0xf4>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d10c      	bne.n	8006e8a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f023 0308 	bic.w	r3, r3, #8
 8006e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f023 0304 	bic.w	r3, r3, #4
 8006e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a17      	ldr	r2, [pc, #92]	; (8006eec <TIM_OC1_SetConfig+0xec>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d007      	beq.n	8006ea2 <TIM_OC1_SetConfig+0xa2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a16      	ldr	r2, [pc, #88]	; (8006ef0 <TIM_OC1_SetConfig+0xf0>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d003      	beq.n	8006ea2 <TIM_OC1_SetConfig+0xa2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a15      	ldr	r2, [pc, #84]	; (8006ef4 <TIM_OC1_SetConfig+0xf4>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d111      	bne.n	8006ec6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	621a      	str	r2, [r3, #32]
}
 8006ee0:	bf00      	nop
 8006ee2:	371c      	adds	r7, #28
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	40012c00 	.word	0x40012c00
 8006ef0:	40014000 	.word	0x40014000
 8006ef4:	40014400 	.word	0x40014400

08006ef8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	f023 0210 	bic.w	r2, r3, #16
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	021b      	lsls	r3, r3, #8
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f023 0320 	bic.w	r3, r3, #32
 8006f46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	011b      	lsls	r3, r3, #4
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a22      	ldr	r2, [pc, #136]	; (8006fe0 <TIM_OC2_SetConfig+0xe8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d10d      	bne.n	8006f78 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a19      	ldr	r2, [pc, #100]	; (8006fe0 <TIM_OC2_SetConfig+0xe8>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d007      	beq.n	8006f90 <TIM_OC2_SetConfig+0x98>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a18      	ldr	r2, [pc, #96]	; (8006fe4 <TIM_OC2_SetConfig+0xec>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d003      	beq.n	8006f90 <TIM_OC2_SetConfig+0x98>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a17      	ldr	r2, [pc, #92]	; (8006fe8 <TIM_OC2_SetConfig+0xf0>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d113      	bne.n	8006fb8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	621a      	str	r2, [r3, #32]
}
 8006fd2:	bf00      	nop
 8006fd4:	371c      	adds	r7, #28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	40012c00 	.word	0x40012c00
 8006fe4:	40014000 	.word	0x40014000
 8006fe8:	40014400 	.word	0x40014400

08006fec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800701a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800701e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0303 	bic.w	r3, r3, #3
 8007026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	021b      	lsls	r3, r3, #8
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	4313      	orrs	r3, r2
 8007044:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a21      	ldr	r2, [pc, #132]	; (80070d0 <TIM_OC3_SetConfig+0xe4>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d10d      	bne.n	800706a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007054:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	021b      	lsls	r3, r3, #8
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	4313      	orrs	r3, r2
 8007060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a18      	ldr	r2, [pc, #96]	; (80070d0 <TIM_OC3_SetConfig+0xe4>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d007      	beq.n	8007082 <TIM_OC3_SetConfig+0x96>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a17      	ldr	r2, [pc, #92]	; (80070d4 <TIM_OC3_SetConfig+0xe8>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d003      	beq.n	8007082 <TIM_OC3_SetConfig+0x96>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a16      	ldr	r2, [pc, #88]	; (80070d8 <TIM_OC3_SetConfig+0xec>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d113      	bne.n	80070aa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	621a      	str	r2, [r3, #32]
}
 80070c4:	bf00      	nop
 80070c6:	371c      	adds	r7, #28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	40012c00 	.word	0x40012c00
 80070d4:	40014000 	.word	0x40014000
 80070d8:	40014400 	.word	0x40014400

080070dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800710a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800710e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	021b      	lsls	r3, r3, #8
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800712a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	031b      	lsls	r3, r3, #12
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	4313      	orrs	r3, r2
 8007136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a14      	ldr	r2, [pc, #80]	; (800718c <TIM_OC4_SetConfig+0xb0>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d007      	beq.n	8007150 <TIM_OC4_SetConfig+0x74>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a13      	ldr	r2, [pc, #76]	; (8007190 <TIM_OC4_SetConfig+0xb4>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d003      	beq.n	8007150 <TIM_OC4_SetConfig+0x74>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a12      	ldr	r2, [pc, #72]	; (8007194 <TIM_OC4_SetConfig+0xb8>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d109      	bne.n	8007164 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007156:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	019b      	lsls	r3, r3, #6
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4313      	orrs	r3, r2
 8007162:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	621a      	str	r2, [r3, #32]
}
 800717e:	bf00      	nop
 8007180:	371c      	adds	r7, #28
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	40012c00 	.word	0x40012c00
 8007190:	40014000 	.word	0x40014000
 8007194:	40014400 	.word	0x40014400

08007198 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80071dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	041b      	lsls	r3, r3, #16
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a13      	ldr	r2, [pc, #76]	; (800723c <TIM_OC5_SetConfig+0xa4>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d007      	beq.n	8007202 <TIM_OC5_SetConfig+0x6a>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a12      	ldr	r2, [pc, #72]	; (8007240 <TIM_OC5_SetConfig+0xa8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d003      	beq.n	8007202 <TIM_OC5_SetConfig+0x6a>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a11      	ldr	r2, [pc, #68]	; (8007244 <TIM_OC5_SetConfig+0xac>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d109      	bne.n	8007216 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007208:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	021b      	lsls	r3, r3, #8
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	4313      	orrs	r3, r2
 8007214:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	621a      	str	r2, [r3, #32]
}
 8007230:	bf00      	nop
 8007232:	371c      	adds	r7, #28
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	40012c00 	.word	0x40012c00
 8007240:	40014000 	.word	0x40014000
 8007244:	40014400 	.word	0x40014400

08007248 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800727a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	021b      	lsls	r3, r3, #8
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4313      	orrs	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800728e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	051b      	lsls	r3, r3, #20
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	4313      	orrs	r3, r2
 800729a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a14      	ldr	r2, [pc, #80]	; (80072f0 <TIM_OC6_SetConfig+0xa8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d007      	beq.n	80072b4 <TIM_OC6_SetConfig+0x6c>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a13      	ldr	r2, [pc, #76]	; (80072f4 <TIM_OC6_SetConfig+0xac>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d003      	beq.n	80072b4 <TIM_OC6_SetConfig+0x6c>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a12      	ldr	r2, [pc, #72]	; (80072f8 <TIM_OC6_SetConfig+0xb0>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d109      	bne.n	80072c8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	029b      	lsls	r3, r3, #10
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	621a      	str	r2, [r3, #32]
}
 80072e2:	bf00      	nop
 80072e4:	371c      	adds	r7, #28
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	40012c00 	.word	0x40012c00
 80072f4:	40014000 	.word	0x40014000
 80072f8:	40014400 	.word	0x40014400

080072fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f003 031f 	and.w	r3, r3, #31
 800730e:	2201      	movs	r2, #1
 8007310:	fa02 f303 	lsl.w	r3, r2, r3
 8007314:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6a1a      	ldr	r2, [r3, #32]
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	43db      	mvns	r3, r3
 800731e:	401a      	ands	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6a1a      	ldr	r2, [r3, #32]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f003 031f 	and.w	r3, r3, #31
 800732e:	6879      	ldr	r1, [r7, #4]
 8007330:	fa01 f303 	lsl.w	r3, r1, r3
 8007334:	431a      	orrs	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	621a      	str	r2, [r3, #32]
}
 800733a:	bf00      	nop
 800733c:	371c      	adds	r7, #28
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
	...

08007348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007358:	2b01      	cmp	r3, #1
 800735a:	d101      	bne.n	8007360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800735c:	2302      	movs	r3, #2
 800735e:	e04f      	b.n	8007400 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a21      	ldr	r2, [pc, #132]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d108      	bne.n	800739c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007390:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	4313      	orrs	r3, r2
 800739a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a14      	ldr	r2, [pc, #80]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d009      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c8:	d004      	beq.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a10      	ldr	r2, [pc, #64]	; (8007410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d10c      	bne.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	40012c00 	.word	0x40012c00
 8007410:	40014000 	.word	0x40014000

08007414 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8007450:	b10a      	cbz	r2, 8007456 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8007452:	f003 b94d 	b.w	800a6f0 <memcpy>
 8007456:	4770      	bx	lr

08007458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8007458:	b508      	push	{r3, lr}
 800745a:	680b      	ldr	r3, [r1, #0]
 800745c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007460:	d302      	bcc.n	8007468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8007462:	480d      	ldr	r0, [pc, #52]	; (8007498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8007464:	f000 fbbc 	bl	8007be0 <_ZSt20__throw_length_errorPKc>
 8007468:	4293      	cmp	r3, r2
 800746a:	d90b      	bls.n	8007484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800746c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8007470:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8007474:	d206      	bcs.n	8007484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8007476:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800747a:	bf2a      	itet	cs
 800747c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8007480:	6008      	strcc	r0, [r1, #0]
 8007482:	600b      	strcs	r3, [r1, #0]
 8007484:	6808      	ldr	r0, [r1, #0]
 8007486:	3001      	adds	r0, #1
 8007488:	d501      	bpl.n	800748e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800748a:	f000 fba3 	bl	8007bd4 <_ZSt17__throw_bad_allocv>
 800748e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007492:	f000 ba23 	b.w	80078dc <_Znwj>
 8007496:	bf00      	nop
 8007498:	0800ee88 	.word	0x0800ee88

0800749c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800749c:	f850 3b08 	ldr.w	r3, [r0], #8
 80074a0:	4283      	cmp	r3, r0
 80074a2:	d002      	beq.n	80074aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 ba15 	b.w	80078d4 <_ZdlPv>
 80074aa:	4770      	bx	lr

080074ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80074ac:	6840      	ldr	r0, [r0, #4]
 80074ae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80074b2:	3901      	subs	r1, #1
 80074b4:	1a09      	subs	r1, r1, r0
 80074b6:	4291      	cmp	r1, r2
 80074b8:	b508      	push	{r3, lr}
 80074ba:	d202      	bcs.n	80074c2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 fb8f 	bl	8007be0 <_ZSt20__throw_length_errorPKc>
 80074c2:	bd08      	pop	{r3, pc}

080074c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80074c4:	6803      	ldr	r3, [r0, #0]
 80074c6:	428b      	cmp	r3, r1
 80074c8:	d806      	bhi.n	80074d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80074ca:	6842      	ldr	r2, [r0, #4]
 80074cc:	4413      	add	r3, r2
 80074ce:	4299      	cmp	r1, r3
 80074d0:	bf94      	ite	ls
 80074d2:	2000      	movls	r0, #0
 80074d4:	2001      	movhi	r0, #1
 80074d6:	4770      	bx	lr
 80074d8:	2001      	movs	r0, #1
 80074da:	4770      	bx	lr

080074dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80074dc:	2a01      	cmp	r2, #1
 80074de:	b410      	push	{r4}
 80074e0:	d104      	bne.n	80074ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80074e2:	780a      	ldrb	r2, [r1, #0]
 80074e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074e8:	7002      	strb	r2, [r0, #0]
 80074ea:	4770      	bx	lr
 80074ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074f0:	f7ff bfae 	b.w	8007450 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080074f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80074f4:	2a01      	cmp	r2, #1
 80074f6:	b430      	push	{r4, r5}
 80074f8:	d103      	bne.n	8007502 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80074fa:	780b      	ldrb	r3, [r1, #0]
 80074fc:	7003      	strb	r3, [r0, #0]
 80074fe:	bc30      	pop	{r4, r5}
 8007500:	4770      	bx	lr
 8007502:	2a00      	cmp	r2, #0
 8007504:	d0fb      	beq.n	80074fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8007506:	bc30      	pop	{r4, r5}
 8007508:	f002 bff6 	b.w	800a4f8 <memmove>

0800750c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800750c:	b508      	push	{r3, lr}
 800750e:	1a52      	subs	r2, r2, r1
 8007510:	f7ff ffe4 	bl	80074dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007514:	bd08      	pop	{r3, pc}

08007516 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8007516:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800751a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800751c:	461f      	mov	r7, r3
 800751e:	6843      	ldr	r3, [r0, #4]
 8007520:	eb01 0802 	add.w	r8, r1, r2
 8007524:	1ab2      	subs	r2, r6, r2
 8007526:	441a      	add	r2, r3
 8007528:	eba3 0908 	sub.w	r9, r3, r8
 800752c:	4603      	mov	r3, r0
 800752e:	9201      	str	r2, [sp, #4]
 8007530:	f853 2b08 	ldr.w	r2, [r3], #8
 8007534:	429a      	cmp	r2, r3
 8007536:	bf18      	it	ne
 8007538:	6882      	ldrne	r2, [r0, #8]
 800753a:	460d      	mov	r5, r1
 800753c:	bf08      	it	eq
 800753e:	220f      	moveq	r2, #15
 8007540:	a901      	add	r1, sp, #4
 8007542:	4604      	mov	r4, r0
 8007544:	f7ff ff88 	bl	8007458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007548:	4682      	mov	sl, r0
 800754a:	b11d      	cbz	r5, 8007554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800754c:	6821      	ldr	r1, [r4, #0]
 800754e:	462a      	mov	r2, r5
 8007550:	f7ff ffc4 	bl	80074dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007554:	b137      	cbz	r7, 8007564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8007556:	b12e      	cbz	r6, 8007564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8007558:	4632      	mov	r2, r6
 800755a:	4639      	mov	r1, r7
 800755c:	eb0a 0005 	add.w	r0, sl, r5
 8007560:	f7ff ffbc 	bl	80074dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007564:	f1b9 0f00 	cmp.w	r9, #0
 8007568:	d007      	beq.n	800757a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800756a:	6821      	ldr	r1, [r4, #0]
 800756c:	4435      	add	r5, r6
 800756e:	464a      	mov	r2, r9
 8007570:	4441      	add	r1, r8
 8007572:	eb0a 0005 	add.w	r0, sl, r5
 8007576:	f7ff ffb1 	bl	80074dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800757a:	4620      	mov	r0, r4
 800757c:	f7ff ff8e 	bl	800749c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8007580:	9b01      	ldr	r3, [sp, #4]
 8007582:	f8c4 a000 	str.w	sl, [r4]
 8007586:	60a3      	str	r3, [r4, #8]
 8007588:	b002      	add	sp, #8
 800758a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08007590 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8007590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007594:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007596:	4614      	mov	r4, r2
 8007598:	4680      	mov	r8, r0
 800759a:	462a      	mov	r2, r5
 800759c:	4689      	mov	r9, r1
 800759e:	461f      	mov	r7, r3
 80075a0:	4621      	mov	r1, r4
 80075a2:	4b39      	ldr	r3, [pc, #228]	; (8007688 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 80075a4:	f7ff ff82 	bl	80074ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80075a8:	4642      	mov	r2, r8
 80075aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80075ae:	f852 6b08 	ldr.w	r6, [r2], #8
 80075b2:	4296      	cmp	r6, r2
 80075b4:	bf18      	it	ne
 80075b6:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 80075ba:	eba5 0b04 	sub.w	fp, r5, r4
 80075be:	eb03 0a0b 	add.w	sl, r3, fp
 80075c2:	bf08      	it	eq
 80075c4:	220f      	moveq	r2, #15
 80075c6:	4552      	cmp	r2, sl
 80075c8:	d351      	bcc.n	800766e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 80075ca:	444e      	add	r6, r9
 80075cc:	4639      	mov	r1, r7
 80075ce:	44a1      	add	r9, r4
 80075d0:	4640      	mov	r0, r8
 80075d2:	eba3 0909 	sub.w	r9, r3, r9
 80075d6:	f7ff ff75 	bl	80074c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80075da:	b180      	cbz	r0, 80075fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 80075dc:	f1b9 0f00 	cmp.w	r9, #0
 80075e0:	d006      	beq.n	80075f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80075e2:	42ac      	cmp	r4, r5
 80075e4:	d004      	beq.n	80075f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80075e6:	464a      	mov	r2, r9
 80075e8:	1931      	adds	r1, r6, r4
 80075ea:	1970      	adds	r0, r6, r5
 80075ec:	f7ff ff82 	bl	80074f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80075f0:	b315      	cbz	r5, 8007638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80075f2:	462a      	mov	r2, r5
 80075f4:	4639      	mov	r1, r7
 80075f6:	4630      	mov	r0, r6
 80075f8:	f7ff ff70 	bl	80074dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80075fc:	e01c      	b.n	8007638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80075fe:	b135      	cbz	r5, 800760e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8007600:	42ac      	cmp	r4, r5
 8007602:	d33c      	bcc.n	800767e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 8007604:	462a      	mov	r2, r5
 8007606:	4639      	mov	r1, r7
 8007608:	4630      	mov	r0, r6
 800760a:	f7ff ff73 	bl	80074f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800760e:	f1b9 0f00 	cmp.w	r9, #0
 8007612:	d011      	beq.n	8007638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8007614:	42ac      	cmp	r4, r5
 8007616:	d00f      	beq.n	8007638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8007618:	464a      	mov	r2, r9
 800761a:	1931      	adds	r1, r6, r4
 800761c:	1970      	adds	r0, r6, r5
 800761e:	f7ff ff69 	bl	80074f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007622:	42ac      	cmp	r4, r5
 8007624:	d208      	bcs.n	8007638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8007626:	4434      	add	r4, r6
 8007628:	197b      	adds	r3, r7, r5
 800762a:	429c      	cmp	r4, r3
 800762c:	d30f      	bcc.n	800764e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 800762e:	462a      	mov	r2, r5
 8007630:	4639      	mov	r1, r7
 8007632:	4630      	mov	r0, r6
 8007634:	f7ff ff5e 	bl	80074f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007638:	f8d8 3000 	ldr.w	r3, [r8]
 800763c:	f8c8 a004 	str.w	sl, [r8, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	4640      	mov	r0, r8
 8007644:	f803 200a 	strb.w	r2, [r3, sl]
 8007648:	b003      	add	sp, #12
 800764a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764e:	42bc      	cmp	r4, r7
 8007650:	d803      	bhi.n	800765a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 8007652:	462a      	mov	r2, r5
 8007654:	eb07 010b 	add.w	r1, r7, fp
 8007658:	e7cd      	b.n	80075f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 800765a:	1be4      	subs	r4, r4, r7
 800765c:	4622      	mov	r2, r4
 800765e:	4639      	mov	r1, r7
 8007660:	4630      	mov	r0, r6
 8007662:	f7ff ff47 	bl	80074f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007666:	1b2a      	subs	r2, r5, r4
 8007668:	1971      	adds	r1, r6, r5
 800766a:	1930      	adds	r0, r6, r4
 800766c:	e7c4      	b.n	80075f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800766e:	9500      	str	r5, [sp, #0]
 8007670:	463b      	mov	r3, r7
 8007672:	4622      	mov	r2, r4
 8007674:	4649      	mov	r1, r9
 8007676:	4640      	mov	r0, r8
 8007678:	f7ff ff4d 	bl	8007516 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800767c:	e7dc      	b.n	8007638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800767e:	f1b9 0f00 	cmp.w	r9, #0
 8007682:	d0d0      	beq.n	8007626 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8007684:	e7c8      	b.n	8007618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 8007686:	bf00      	nop
 8007688:	0800eea0 	.word	0x0800eea0

0800768c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 800768c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800768e:	4604      	mov	r4, r0
 8007690:	4608      	mov	r0, r1
 8007692:	9103      	str	r1, [sp, #12]
 8007694:	f7f8 fdec 	bl	8000270 <strlen>
 8007698:	9b03      	ldr	r3, [sp, #12]
 800769a:	9000      	str	r0, [sp, #0]
 800769c:	6862      	ldr	r2, [r4, #4]
 800769e:	2100      	movs	r1, #0
 80076a0:	4620      	mov	r0, r4
 80076a2:	f7ff ff75 	bl	8007590 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80076a6:	b004      	add	sp, #16
 80076a8:	bd10      	pop	{r4, pc}

080076aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 80076aa:	b508      	push	{r3, lr}
 80076ac:	f7ff ffee 	bl	800768c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 80076b0:	bd08      	pop	{r3, pc}
	...

080076b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80076b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076b6:	4604      	mov	r4, r0
 80076b8:	4616      	mov	r6, r2
 80076ba:	460d      	mov	r5, r1
 80076bc:	b919      	cbnz	r1, 80076c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80076be:	b112      	cbz	r2, 80076c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80076c0:	480d      	ldr	r0, [pc, #52]	; (80076f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80076c2:	f000 fa8a 	bl	8007bda <_ZSt19__throw_logic_errorPKc>
 80076c6:	1b73      	subs	r3, r6, r5
 80076c8:	2b0f      	cmp	r3, #15
 80076ca:	9301      	str	r3, [sp, #4]
 80076cc:	d907      	bls.n	80076de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80076ce:	2200      	movs	r2, #0
 80076d0:	a901      	add	r1, sp, #4
 80076d2:	4620      	mov	r0, r4
 80076d4:	f7ff fec0 	bl	8007458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80076d8:	9b01      	ldr	r3, [sp, #4]
 80076da:	6020      	str	r0, [r4, #0]
 80076dc:	60a3      	str	r3, [r4, #8]
 80076de:	4632      	mov	r2, r6
 80076e0:	4629      	mov	r1, r5
 80076e2:	6820      	ldr	r0, [r4, #0]
 80076e4:	f7ff ff12 	bl	800750c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80076e8:	9b01      	ldr	r3, [sp, #4]
 80076ea:	6822      	ldr	r2, [r4, #0]
 80076ec:	6063      	str	r3, [r4, #4]
 80076ee:	2100      	movs	r1, #0
 80076f0:	54d1      	strb	r1, [r2, r3]
 80076f2:	b002      	add	sp, #8
 80076f4:	bd70      	pop	{r4, r5, r6, pc}
 80076f6:	bf00      	nop
 80076f8:	0800eeb9 	.word	0x0800eeb9

080076fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	f100 0308 	add.w	r3, r0, #8
 8007702:	4604      	mov	r4, r0
 8007704:	6003      	str	r3, [r0, #0]
 8007706:	460d      	mov	r5, r1
 8007708:	b159      	cbz	r1, 8007722 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800770a:	4608      	mov	r0, r1
 800770c:	f7f8 fdb0 	bl	8000270 <strlen>
 8007710:	182a      	adds	r2, r5, r0
 8007712:	4620      	mov	r0, r4
 8007714:	f04f 0300 	mov.w	r3, #0
 8007718:	4629      	mov	r1, r5
 800771a:	f7ff ffcb 	bl	80076b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800771e:	4620      	mov	r0, r4
 8007720:	bd38      	pop	{r3, r4, r5, pc}
 8007722:	2201      	movs	r2, #1
 8007724:	e7f5      	b.n	8007712 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>
	...

08007728 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8007728:	4b24      	ldr	r3, [pc, #144]	; (80077bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	07d0      	lsls	r0, r2, #31
 800772e:	bf5c      	itt	pl
 8007730:	2201      	movpl	r2, #1
 8007732:	601a      	strpl	r2, [r3, #0]
 8007734:	4b22      	ldr	r3, [pc, #136]	; (80077c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	07d1      	lsls	r1, r2, #31
 800773a:	bf5c      	itt	pl
 800773c:	2201      	movpl	r2, #1
 800773e:	601a      	strpl	r2, [r3, #0]
 8007740:	4b20      	ldr	r3, [pc, #128]	; (80077c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	07d2      	lsls	r2, r2, #31
 8007746:	bf5c      	itt	pl
 8007748:	2201      	movpl	r2, #1
 800774a:	601a      	strpl	r2, [r3, #0]
 800774c:	4b1e      	ldr	r3, [pc, #120]	; (80077c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	07d0      	lsls	r0, r2, #31
 8007752:	bf5c      	itt	pl
 8007754:	2201      	movpl	r2, #1
 8007756:	601a      	strpl	r2, [r3, #0]
 8007758:	4b1c      	ldr	r3, [pc, #112]	; (80077cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	07d1      	lsls	r1, r2, #31
 800775e:	bf5c      	itt	pl
 8007760:	2201      	movpl	r2, #1
 8007762:	601a      	strpl	r2, [r3, #0]
 8007764:	4b1a      	ldr	r3, [pc, #104]	; (80077d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	07d2      	lsls	r2, r2, #31
 800776a:	bf5c      	itt	pl
 800776c:	2201      	movpl	r2, #1
 800776e:	601a      	strpl	r2, [r3, #0]
 8007770:	4b18      	ldr	r3, [pc, #96]	; (80077d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	07d0      	lsls	r0, r2, #31
 8007776:	bf5c      	itt	pl
 8007778:	2201      	movpl	r2, #1
 800777a:	601a      	strpl	r2, [r3, #0]
 800777c:	4b16      	ldr	r3, [pc, #88]	; (80077d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	07d1      	lsls	r1, r2, #31
 8007782:	bf5c      	itt	pl
 8007784:	2201      	movpl	r2, #1
 8007786:	601a      	strpl	r2, [r3, #0]
 8007788:	4b14      	ldr	r3, [pc, #80]	; (80077dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	07d2      	lsls	r2, r2, #31
 800778e:	bf5c      	itt	pl
 8007790:	2201      	movpl	r2, #1
 8007792:	601a      	strpl	r2, [r3, #0]
 8007794:	4b12      	ldr	r3, [pc, #72]	; (80077e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	07d0      	lsls	r0, r2, #31
 800779a:	bf5c      	itt	pl
 800779c:	2201      	movpl	r2, #1
 800779e:	601a      	strpl	r2, [r3, #0]
 80077a0:	4b10      	ldr	r3, [pc, #64]	; (80077e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	07d1      	lsls	r1, r2, #31
 80077a6:	bf5c      	itt	pl
 80077a8:	2201      	movpl	r2, #1
 80077aa:	601a      	strpl	r2, [r3, #0]
 80077ac:	4b0e      	ldr	r3, [pc, #56]	; (80077e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	07d2      	lsls	r2, r2, #31
 80077b2:	bf5c      	itt	pl
 80077b4:	2201      	movpl	r2, #1
 80077b6:	601a      	strpl	r2, [r3, #0]
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	200009ec 	.word	0x200009ec
 80077c0:	200009e8 	.word	0x200009e8
 80077c4:	200009e4 	.word	0x200009e4
 80077c8:	200009e0 	.word	0x200009e0
 80077cc:	200009dc 	.word	0x200009dc
 80077d0:	200009d8 	.word	0x200009d8
 80077d4:	200009d4 	.word	0x200009d4
 80077d8:	200009d0 	.word	0x200009d0
 80077dc:	200009cc 	.word	0x200009cc
 80077e0:	200009c8 	.word	0x200009c8
 80077e4:	200009c4 	.word	0x200009c4
 80077e8:	200009c0 	.word	0x200009c0

080077ec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80077ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80077ee:	2400      	movs	r4, #0
 80077f0:	2310      	movs	r3, #16
 80077f2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80077f6:	6803      	ldr	r3, [r0, #0]
 80077f8:	4615      	mov	r5, r2
 80077fa:	699e      	ldr	r6, [r3, #24]
 80077fc:	6812      	ldr	r2, [r2, #0]
 80077fe:	466b      	mov	r3, sp
 8007800:	e9cd 4400 	strd	r4, r4, [sp]
 8007804:	47b0      	blx	r6
 8007806:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800780a:	f003 0306 	and.w	r3, r3, #6
 800780e:	2b06      	cmp	r3, #6
 8007810:	bf03      	ittte	eq
 8007812:	9b00      	ldreq	r3, [sp, #0]
 8007814:	602b      	streq	r3, [r5, #0]
 8007816:	2001      	moveq	r0, #1
 8007818:	4620      	movne	r0, r4
 800781a:	b004      	add	sp, #16
 800781c:	bd70      	pop	{r4, r5, r6, pc}

0800781e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800781e:	9800      	ldr	r0, [sp, #0]
 8007820:	4290      	cmp	r0, r2
 8007822:	bf14      	ite	ne
 8007824:	2001      	movne	r0, #1
 8007826:	2006      	moveq	r0, #6
 8007828:	4770      	bx	lr
	...

0800782c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800782c:	b510      	push	{r4, lr}
 800782e:	4b03      	ldr	r3, [pc, #12]	; (800783c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8007830:	6003      	str	r3, [r0, #0]
 8007832:	4604      	mov	r4, r0
 8007834:	f000 f8e3 	bl	80079fe <_ZNSt9type_infoD1Ev>
 8007838:	4620      	mov	r0, r4
 800783a:	bd10      	pop	{r4, pc}
 800783c:	0800ef1c 	.word	0x0800ef1c

08007840 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8007840:	b510      	push	{r4, lr}
 8007842:	4604      	mov	r4, r0
 8007844:	f7ff fff2 	bl	800782c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8007848:	4620      	mov	r0, r4
 800784a:	2108      	movs	r1, #8
 800784c:	f000 f844 	bl	80078d8 <_ZdlPvj>
 8007850:	4620      	mov	r0, r4
 8007852:	bd10      	pop	{r4, pc}

08007854 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8007854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007858:	461f      	mov	r7, r3
 800785a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800785e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007862:	4598      	cmp	r8, r3
 8007864:	4606      	mov	r6, r0
 8007866:	4615      	mov	r5, r2
 8007868:	d107      	bne.n	800787a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800786a:	9907      	ldr	r1, [sp, #28]
 800786c:	f000 f8ca 	bl	8007a04 <_ZNKSt9type_infoeqERKS_>
 8007870:	b118      	cbz	r0, 800787a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8007872:	7165      	strb	r5, [r4, #5]
 8007874:	2000      	movs	r0, #0
 8007876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800787a:	4639      	mov	r1, r7
 800787c:	4630      	mov	r0, r6
 800787e:	f000 f8c1 	bl	8007a04 <_ZNKSt9type_infoeqERKS_>
 8007882:	2800      	cmp	r0, #0
 8007884:	d0f6      	beq.n	8007874 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8007886:	2301      	movs	r3, #1
 8007888:	f8c4 8000 	str.w	r8, [r4]
 800788c:	7125      	strb	r5, [r4, #4]
 800788e:	71a3      	strb	r3, [r4, #6]
 8007890:	e7f0      	b.n	8007874 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08007892 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8007892:	b538      	push	{r3, r4, r5, lr}
 8007894:	4615      	mov	r5, r2
 8007896:	461c      	mov	r4, r3
 8007898:	f000 f8b4 	bl	8007a04 <_ZNKSt9type_infoeqERKS_>
 800789c:	b120      	cbz	r0, 80078a8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800789e:	2308      	movs	r3, #8
 80078a0:	60e3      	str	r3, [r4, #12]
 80078a2:	2306      	movs	r3, #6
 80078a4:	6025      	str	r5, [r4, #0]
 80078a6:	7123      	strb	r3, [r4, #4]
 80078a8:	bd38      	pop	{r3, r4, r5, pc}

080078aa <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80078aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078ac:	4605      	mov	r5, r0
 80078ae:	460c      	mov	r4, r1
 80078b0:	9201      	str	r2, [sp, #4]
 80078b2:	461e      	mov	r6, r3
 80078b4:	f000 f8a6 	bl	8007a04 <_ZNKSt9type_infoeqERKS_>
 80078b8:	b950      	cbnz	r0, 80078d0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80078ba:	2e03      	cmp	r6, #3
 80078bc:	d808      	bhi.n	80078d0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	9a01      	ldr	r2, [sp, #4]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	4629      	mov	r1, r5
 80078c6:	4620      	mov	r0, r4
 80078c8:	b002      	add	sp, #8
 80078ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80078ce:	4718      	bx	r3
 80078d0:	b002      	add	sp, #8
 80078d2:	bd70      	pop	{r4, r5, r6, pc}

080078d4 <_ZdlPv>:
 80078d4:	f002 b8a0 	b.w	8009a18 <free>

080078d8 <_ZdlPvj>:
 80078d8:	f7ff bffc 	b.w	80078d4 <_ZdlPv>

080078dc <_Znwj>:
 80078dc:	2801      	cmp	r0, #1
 80078de:	bf38      	it	cc
 80078e0:	2001      	movcc	r0, #1
 80078e2:	b510      	push	{r4, lr}
 80078e4:	4604      	mov	r4, r0
 80078e6:	4620      	mov	r0, r4
 80078e8:	f002 f88e 	bl	8009a08 <malloc>
 80078ec:	b100      	cbz	r0, 80078f0 <_Znwj+0x14>
 80078ee:	bd10      	pop	{r4, pc}
 80078f0:	f000 f9dc 	bl	8007cac <_ZSt15get_new_handlerv>
 80078f4:	b908      	cbnz	r0, 80078fa <_Znwj+0x1e>
 80078f6:	f001 fda9 	bl	800944c <abort>
 80078fa:	4780      	blx	r0
 80078fc:	e7f3      	b.n	80078e6 <_Znwj+0xa>
	...

08007900 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8007900:	b510      	push	{r4, lr}
 8007902:	4b03      	ldr	r3, [pc, #12]	; (8007910 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8007904:	6003      	str	r3, [r0, #0]
 8007906:	4604      	mov	r4, r0
 8007908:	f7ff ff90 	bl	800782c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800790c:	4620      	mov	r0, r4
 800790e:	bd10      	pop	{r4, pc}
 8007910:	0800ef7c 	.word	0x0800ef7c

08007914 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8007914:	b510      	push	{r4, lr}
 8007916:	4604      	mov	r4, r0
 8007918:	f7ff fff2 	bl	8007900 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 800791c:	4620      	mov	r0, r4
 800791e:	210c      	movs	r1, #12
 8007920:	f7ff ffda 	bl	80078d8 <_ZdlPvj>
 8007924:	4620      	mov	r0, r4
 8007926:	bd10      	pop	{r4, pc}

08007928 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8007928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800792a:	9f08      	ldr	r7, [sp, #32]
 800792c:	4297      	cmp	r7, r2
 800792e:	4605      	mov	r5, r0
 8007930:	460e      	mov	r6, r1
 8007932:	4614      	mov	r4, r2
 8007934:	d00a      	beq.n	800794c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8007936:	68a8      	ldr	r0, [r5, #8]
 8007938:	6802      	ldr	r2, [r0, #0]
 800793a:	9708      	str	r7, [sp, #32]
 800793c:	6a15      	ldr	r5, [r2, #32]
 800793e:	4631      	mov	r1, r6
 8007940:	4622      	mov	r2, r4
 8007942:	46ac      	mov	ip, r5
 8007944:	b003      	add	sp, #12
 8007946:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800794a:	4760      	bx	ip
 800794c:	4619      	mov	r1, r3
 800794e:	9301      	str	r3, [sp, #4]
 8007950:	f000 f858 	bl	8007a04 <_ZNKSt9type_infoeqERKS_>
 8007954:	9b01      	ldr	r3, [sp, #4]
 8007956:	2800      	cmp	r0, #0
 8007958:	d0ed      	beq.n	8007936 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 800795a:	2006      	movs	r0, #6
 800795c:	b003      	add	sp, #12
 800795e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007960 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8007960:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007964:	460d      	mov	r5, r1
 8007966:	4619      	mov	r1, r3
 8007968:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 800796c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8007970:	4681      	mov	r9, r0
 8007972:	4617      	mov	r7, r2
 8007974:	4698      	mov	r8, r3
 8007976:	f000 f845 	bl	8007a04 <_ZNKSt9type_infoeqERKS_>
 800797a:	b190      	cbz	r0, 80079a2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 800797c:	2d00      	cmp	r5, #0
 800797e:	6034      	str	r4, [r6, #0]
 8007980:	7137      	strb	r7, [r6, #4]
 8007982:	db09      	blt.n	8007998 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8007984:	1961      	adds	r1, r4, r5
 8007986:	458a      	cmp	sl, r1
 8007988:	bf0c      	ite	eq
 800798a:	2106      	moveq	r1, #6
 800798c:	2101      	movne	r1, #1
 800798e:	71b1      	strb	r1, [r6, #6]
 8007990:	2000      	movs	r0, #0
 8007992:	b001      	add	sp, #4
 8007994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007998:	3502      	adds	r5, #2
 800799a:	d1f9      	bne.n	8007990 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800799c:	2301      	movs	r3, #1
 800799e:	71b3      	strb	r3, [r6, #6]
 80079a0:	e7f6      	b.n	8007990 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80079a2:	4554      	cmp	r4, sl
 80079a4:	d106      	bne.n	80079b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80079a6:	4659      	mov	r1, fp
 80079a8:	4648      	mov	r0, r9
 80079aa:	f000 f82b 	bl	8007a04 <_ZNKSt9type_infoeqERKS_>
 80079ae:	b108      	cbz	r0, 80079b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80079b0:	7177      	strb	r7, [r6, #5]
 80079b2:	e7ed      	b.n	8007990 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80079b4:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80079b8:	6803      	ldr	r3, [r0, #0]
 80079ba:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80079be:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80079c2:	69dc      	ldr	r4, [r3, #28]
 80079c4:	463a      	mov	r2, r7
 80079c6:	4643      	mov	r3, r8
 80079c8:	4629      	mov	r1, r5
 80079ca:	46a4      	mov	ip, r4
 80079cc:	b001      	add	sp, #4
 80079ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d2:	4760      	bx	ip

080079d4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80079d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d8:	4607      	mov	r7, r0
 80079da:	460c      	mov	r4, r1
 80079dc:	4615      	mov	r5, r2
 80079de:	461e      	mov	r6, r3
 80079e0:	f7ff ff57 	bl	8007892 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80079e4:	b948      	cbnz	r0, 80079fa <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80079e6:	68b8      	ldr	r0, [r7, #8]
 80079e8:	6803      	ldr	r3, [r0, #0]
 80079ea:	699f      	ldr	r7, [r3, #24]
 80079ec:	462a      	mov	r2, r5
 80079ee:	4633      	mov	r3, r6
 80079f0:	4621      	mov	r1, r4
 80079f2:	46bc      	mov	ip, r7
 80079f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079f8:	4760      	bx	ip
 80079fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080079fe <_ZNSt9type_infoD1Ev>:
 80079fe:	4770      	bx	lr

08007a00 <_ZNKSt9type_info14__is_pointer_pEv>:
 8007a00:	2000      	movs	r0, #0
 8007a02:	4770      	bx	lr

08007a04 <_ZNKSt9type_infoeqERKS_>:
 8007a04:	4281      	cmp	r1, r0
 8007a06:	b508      	push	{r3, lr}
 8007a08:	d00e      	beq.n	8007a28 <_ZNKSt9type_infoeqERKS_+0x24>
 8007a0a:	6840      	ldr	r0, [r0, #4]
 8007a0c:	7803      	ldrb	r3, [r0, #0]
 8007a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8007a10:	d00c      	beq.n	8007a2c <_ZNKSt9type_infoeqERKS_+0x28>
 8007a12:	6849      	ldr	r1, [r1, #4]
 8007a14:	780b      	ldrb	r3, [r1, #0]
 8007a16:	2b2a      	cmp	r3, #42	; 0x2a
 8007a18:	bf08      	it	eq
 8007a1a:	3101      	addeq	r1, #1
 8007a1c:	f7f8 fc30 	bl	8000280 <strcmp>
 8007a20:	fab0 f080 	clz	r0, r0
 8007a24:	0940      	lsrs	r0, r0, #5
 8007a26:	bd08      	pop	{r3, pc}
 8007a28:	2001      	movs	r0, #1
 8007a2a:	e7fc      	b.n	8007a26 <_ZNKSt9type_infoeqERKS_+0x22>
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	e7fa      	b.n	8007a26 <_ZNKSt9type_infoeqERKS_+0x22>

08007a30 <_ZNSs7_M_copyEPcPKcj>:
 8007a30:	2a01      	cmp	r2, #1
 8007a32:	b430      	push	{r4, r5}
 8007a34:	d103      	bne.n	8007a3e <_ZNSs7_M_copyEPcPKcj+0xe>
 8007a36:	780b      	ldrb	r3, [r1, #0]
 8007a38:	7003      	strb	r3, [r0, #0]
 8007a3a:	bc30      	pop	{r4, r5}
 8007a3c:	4770      	bx	lr
 8007a3e:	2a00      	cmp	r2, #0
 8007a40:	d0fb      	beq.n	8007a3a <_ZNSs7_M_copyEPcPKcj+0xa>
 8007a42:	bc30      	pop	{r4, r5}
 8007a44:	f002 be54 	b.w	800a6f0 <memcpy>

08007a48 <_ZNSs13_S_copy_charsEPcPKcS1_>:
 8007a48:	b508      	push	{r3, lr}
 8007a4a:	1a52      	subs	r2, r2, r1
 8007a4c:	f7ff fff0 	bl	8007a30 <_ZNSs7_M_copyEPcPKcj>
 8007a50:	bd08      	pop	{r3, pc}
	...

08007a54 <_ZNSs4_Rep26_M_set_length_and_sharableEj>:
 8007a54:	4b04      	ldr	r3, [pc, #16]	; (8007a68 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x14>)
 8007a56:	4298      	cmp	r0, r3
 8007a58:	d004      	beq.n	8007a64 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x10>
 8007a5a:	6001      	str	r1, [r0, #0]
 8007a5c:	4401      	add	r1, r0
 8007a5e:	2300      	movs	r3, #0
 8007a60:	6083      	str	r3, [r0, #8]
 8007a62:	730b      	strb	r3, [r1, #12]
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	200009f0 	.word	0x200009f0

08007a6c <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 8007a6c:	4b15      	ldr	r3, [pc, #84]	; (8007ac4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8007a6e:	4298      	cmp	r0, r3
 8007a70:	b510      	push	{r4, lr}
 8007a72:	4604      	mov	r4, r0
 8007a74:	d902      	bls.n	8007a7c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x10>
 8007a76:	4814      	ldr	r0, [pc, #80]	; (8007ac8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x5c>)
 8007a78:	f000 f8b2 	bl	8007be0 <_ZSt20__throw_length_errorPKc>
 8007a7c:	4288      	cmp	r0, r1
 8007a7e:	d903      	bls.n	8007a88 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x1c>
 8007a80:	004b      	lsls	r3, r1, #1
 8007a82:	4298      	cmp	r0, r3
 8007a84:	bf38      	it	cc
 8007a86:	461c      	movcc	r4, r3
 8007a88:	f104 031d 	add.w	r3, r4, #29
 8007a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a90:	f104 000d 	add.w	r0, r4, #13
 8007a94:	d90c      	bls.n	8007ab0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8007a96:	428c      	cmp	r4, r1
 8007a98:	d90a      	bls.n	8007ab0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8007a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a9e:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8007aa2:	1ae4      	subs	r4, r4, r3
 8007aa4:	4b07      	ldr	r3, [pc, #28]	; (8007ac4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8007aa6:	429c      	cmp	r4, r3
 8007aa8:	bf28      	it	cs
 8007aaa:	461c      	movcs	r4, r3
 8007aac:	f104 000d 	add.w	r0, r4, #13
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	da01      	bge.n	8007ab8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x4c>
 8007ab4:	f000 f88e 	bl	8007bd4 <_ZSt17__throw_bad_allocv>
 8007ab8:	f7ff ff10 	bl	80078dc <_Znwj>
 8007abc:	2200      	movs	r2, #0
 8007abe:	6044      	str	r4, [r0, #4]
 8007ac0:	6082      	str	r2, [r0, #8]
 8007ac2:	bd10      	pop	{r4, pc}
 8007ac4:	3ffffffc 	.word	0x3ffffffc
 8007ac8:	0800efb5 	.word	0x0800efb5

08007acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8007acc:	4b18      	ldr	r3, [pc, #96]	; (8007b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	07d1      	lsls	r1, r2, #31
 8007ad2:	bf5c      	itt	pl
 8007ad4:	2201      	movpl	r2, #1
 8007ad6:	601a      	strpl	r2, [r3, #0]
 8007ad8:	4b16      	ldr	r3, [pc, #88]	; (8007b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	07d2      	lsls	r2, r2, #31
 8007ade:	bf5c      	itt	pl
 8007ae0:	2201      	movpl	r2, #1
 8007ae2:	601a      	strpl	r2, [r3, #0]
 8007ae4:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	07d0      	lsls	r0, r2, #31
 8007aea:	bf5c      	itt	pl
 8007aec:	2201      	movpl	r2, #1
 8007aee:	601a      	strpl	r2, [r3, #0]
 8007af0:	4b12      	ldr	r3, [pc, #72]	; (8007b3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	07d1      	lsls	r1, r2, #31
 8007af6:	bf5c      	itt	pl
 8007af8:	2201      	movpl	r2, #1
 8007afa:	601a      	strpl	r2, [r3, #0]
 8007afc:	4b10      	ldr	r3, [pc, #64]	; (8007b40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	07d2      	lsls	r2, r2, #31
 8007b02:	bf5c      	itt	pl
 8007b04:	2201      	movpl	r2, #1
 8007b06:	601a      	strpl	r2, [r3, #0]
 8007b08:	4b0e      	ldr	r3, [pc, #56]	; (8007b44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	07d0      	lsls	r0, r2, #31
 8007b0e:	bf5c      	itt	pl
 8007b10:	2201      	movpl	r2, #1
 8007b12:	601a      	strpl	r2, [r3, #0]
 8007b14:	4b0c      	ldr	r3, [pc, #48]	; (8007b48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	07d1      	lsls	r1, r2, #31
 8007b1a:	bf5c      	itt	pl
 8007b1c:	2201      	movpl	r2, #1
 8007b1e:	601a      	strpl	r2, [r3, #0]
 8007b20:	4b0a      	ldr	r3, [pc, #40]	; (8007b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	07d2      	lsls	r2, r2, #31
 8007b26:	bf5c      	itt	pl
 8007b28:	2201      	movpl	r2, #1
 8007b2a:	601a      	strpl	r2, [r3, #0]
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	20000a1c 	.word	0x20000a1c
 8007b34:	20000a18 	.word	0x20000a18
 8007b38:	20000a14 	.word	0x20000a14
 8007b3c:	20000a10 	.word	0x20000a10
 8007b40:	20000a0c 	.word	0x20000a0c
 8007b44:	20000a08 	.word	0x20000a08
 8007b48:	20000a04 	.word	0x20000a04
 8007b4c:	20000a00 	.word	0x20000a00

08007b50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8007b50:	4b18      	ldr	r3, [pc, #96]	; (8007bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	07d1      	lsls	r1, r2, #31
 8007b56:	bf5c      	itt	pl
 8007b58:	2201      	movpl	r2, #1
 8007b5a:	601a      	strpl	r2, [r3, #0]
 8007b5c:	4b16      	ldr	r3, [pc, #88]	; (8007bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	07d2      	lsls	r2, r2, #31
 8007b62:	bf5c      	itt	pl
 8007b64:	2201      	movpl	r2, #1
 8007b66:	601a      	strpl	r2, [r3, #0]
 8007b68:	4b14      	ldr	r3, [pc, #80]	; (8007bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	07d0      	lsls	r0, r2, #31
 8007b6e:	bf5c      	itt	pl
 8007b70:	2201      	movpl	r2, #1
 8007b72:	601a      	strpl	r2, [r3, #0]
 8007b74:	4b12      	ldr	r3, [pc, #72]	; (8007bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	07d1      	lsls	r1, r2, #31
 8007b7a:	bf5c      	itt	pl
 8007b7c:	2201      	movpl	r2, #1
 8007b7e:	601a      	strpl	r2, [r3, #0]
 8007b80:	4b10      	ldr	r3, [pc, #64]	; (8007bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	07d2      	lsls	r2, r2, #31
 8007b86:	bf5c      	itt	pl
 8007b88:	2201      	movpl	r2, #1
 8007b8a:	601a      	strpl	r2, [r3, #0]
 8007b8c:	4b0e      	ldr	r3, [pc, #56]	; (8007bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	07d0      	lsls	r0, r2, #31
 8007b92:	bf5c      	itt	pl
 8007b94:	2201      	movpl	r2, #1
 8007b96:	601a      	strpl	r2, [r3, #0]
 8007b98:	4b0c      	ldr	r3, [pc, #48]	; (8007bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	07d1      	lsls	r1, r2, #31
 8007b9e:	bf5c      	itt	pl
 8007ba0:	2201      	movpl	r2, #1
 8007ba2:	601a      	strpl	r2, [r3, #0]
 8007ba4:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	07d2      	lsls	r2, r2, #31
 8007baa:	bf5c      	itt	pl
 8007bac:	2201      	movpl	r2, #1
 8007bae:	601a      	strpl	r2, [r3, #0]
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	20000a3c 	.word	0x20000a3c
 8007bb8:	20000a38 	.word	0x20000a38
 8007bbc:	20000a34 	.word	0x20000a34
 8007bc0:	20000a30 	.word	0x20000a30
 8007bc4:	20000a2c 	.word	0x20000a2c
 8007bc8:	20000a28 	.word	0x20000a28
 8007bcc:	20000a24 	.word	0x20000a24
 8007bd0:	20000a20 	.word	0x20000a20

08007bd4 <_ZSt17__throw_bad_allocv>:
 8007bd4:	b508      	push	{r3, lr}
 8007bd6:	f001 fc39 	bl	800944c <abort>

08007bda <_ZSt19__throw_logic_errorPKc>:
 8007bda:	b508      	push	{r3, lr}
 8007bdc:	f001 fc36 	bl	800944c <abort>

08007be0 <_ZSt20__throw_length_errorPKc>:
 8007be0:	b508      	push	{r3, lr}
 8007be2:	f001 fc33 	bl	800944c <abort>
	...

08007be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8007be8:	4b24      	ldr	r3, [pc, #144]	; (8007c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	07d0      	lsls	r0, r2, #31
 8007bee:	bf5c      	itt	pl
 8007bf0:	2201      	movpl	r2, #1
 8007bf2:	601a      	strpl	r2, [r3, #0]
 8007bf4:	4b22      	ldr	r3, [pc, #136]	; (8007c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	07d1      	lsls	r1, r2, #31
 8007bfa:	bf5c      	itt	pl
 8007bfc:	2201      	movpl	r2, #1
 8007bfe:	601a      	strpl	r2, [r3, #0]
 8007c00:	4b20      	ldr	r3, [pc, #128]	; (8007c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	07d2      	lsls	r2, r2, #31
 8007c06:	bf5c      	itt	pl
 8007c08:	2201      	movpl	r2, #1
 8007c0a:	601a      	strpl	r2, [r3, #0]
 8007c0c:	4b1e      	ldr	r3, [pc, #120]	; (8007c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	07d0      	lsls	r0, r2, #31
 8007c12:	bf5c      	itt	pl
 8007c14:	2201      	movpl	r2, #1
 8007c16:	601a      	strpl	r2, [r3, #0]
 8007c18:	4b1c      	ldr	r3, [pc, #112]	; (8007c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	07d1      	lsls	r1, r2, #31
 8007c1e:	bf5c      	itt	pl
 8007c20:	2201      	movpl	r2, #1
 8007c22:	601a      	strpl	r2, [r3, #0]
 8007c24:	4b1a      	ldr	r3, [pc, #104]	; (8007c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	07d2      	lsls	r2, r2, #31
 8007c2a:	bf5c      	itt	pl
 8007c2c:	2201      	movpl	r2, #1
 8007c2e:	601a      	strpl	r2, [r3, #0]
 8007c30:	4b18      	ldr	r3, [pc, #96]	; (8007c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	07d0      	lsls	r0, r2, #31
 8007c36:	bf5c      	itt	pl
 8007c38:	2201      	movpl	r2, #1
 8007c3a:	601a      	strpl	r2, [r3, #0]
 8007c3c:	4b16      	ldr	r3, [pc, #88]	; (8007c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	07d1      	lsls	r1, r2, #31
 8007c42:	bf5c      	itt	pl
 8007c44:	2201      	movpl	r2, #1
 8007c46:	601a      	strpl	r2, [r3, #0]
 8007c48:	4b14      	ldr	r3, [pc, #80]	; (8007c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	07d2      	lsls	r2, r2, #31
 8007c4e:	bf5c      	itt	pl
 8007c50:	2201      	movpl	r2, #1
 8007c52:	601a      	strpl	r2, [r3, #0]
 8007c54:	4b12      	ldr	r3, [pc, #72]	; (8007ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	07d0      	lsls	r0, r2, #31
 8007c5a:	bf5c      	itt	pl
 8007c5c:	2201      	movpl	r2, #1
 8007c5e:	601a      	strpl	r2, [r3, #0]
 8007c60:	4b10      	ldr	r3, [pc, #64]	; (8007ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	07d1      	lsls	r1, r2, #31
 8007c66:	bf5c      	itt	pl
 8007c68:	2201      	movpl	r2, #1
 8007c6a:	601a      	strpl	r2, [r3, #0]
 8007c6c:	4b0e      	ldr	r3, [pc, #56]	; (8007ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	07d2      	lsls	r2, r2, #31
 8007c72:	bf5c      	itt	pl
 8007c74:	2201      	movpl	r2, #1
 8007c76:	601a      	strpl	r2, [r3, #0]
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	20000a6c 	.word	0x20000a6c
 8007c80:	20000a68 	.word	0x20000a68
 8007c84:	20000a64 	.word	0x20000a64
 8007c88:	20000a60 	.word	0x20000a60
 8007c8c:	20000a5c 	.word	0x20000a5c
 8007c90:	20000a58 	.word	0x20000a58
 8007c94:	20000a54 	.word	0x20000a54
 8007c98:	20000a50 	.word	0x20000a50
 8007c9c:	20000a4c 	.word	0x20000a4c
 8007ca0:	20000a48 	.word	0x20000a48
 8007ca4:	20000a44 	.word	0x20000a44
 8007ca8:	20000a40 	.word	0x20000a40

08007cac <_ZSt15get_new_handlerv>:
 8007cac:	4b02      	ldr	r3, [pc, #8]	; (8007cb8 <_ZSt15get_new_handlerv+0xc>)
 8007cae:	6818      	ldr	r0, [r3, #0]
 8007cb0:	f3bf 8f5b 	dmb	ish
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	20000a70 	.word	0x20000a70

08007cbc <_ZNK12_GLOBAL__N_117io_error_category4nameEv>:
 8007cbc:	4800      	ldr	r0, [pc, #0]	; (8007cc0 <_ZNK12_GLOBAL__N_117io_error_category4nameEv+0x4>)
 8007cbe:	4770      	bx	lr
 8007cc0:	0800efcd 	.word	0x0800efcd

08007cc4 <_ZN12_GLOBAL__N_113constant_initD1Ev>:
 8007cc4:	4770      	bx	lr
	...

08007cc8 <_ZNK12_GLOBAL__N_117io_error_category7messageB5cxx11Ei>:
 8007cc8:	b510      	push	{r4, lr}
 8007cca:	f100 0308 	add.w	r3, r0, #8
 8007cce:	2a01      	cmp	r2, #1
 8007cd0:	6003      	str	r3, [r0, #0]
 8007cd2:	f04f 0300 	mov.w	r3, #0
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	bf0c      	ite	eq
 8007cda:	4904      	ldreq	r1, [pc, #16]	; (8007cec <_ZNK12_GLOBAL__N_117io_error_category7messageB5cxx11Ei+0x24>)
 8007cdc:	4904      	ldrne	r1, [pc, #16]	; (8007cf0 <_ZNK12_GLOBAL__N_117io_error_category7messageB5cxx11Ei+0x28>)
 8007cde:	6043      	str	r3, [r0, #4]
 8007ce0:	7203      	strb	r3, [r0, #8]
 8007ce2:	f7ff fce2 	bl	80076aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	bd10      	pop	{r4, pc}
 8007cea:	bf00      	nop
 8007cec:	0800efd6 	.word	0x0800efd6
 8007cf0:	0800efe5 	.word	0x0800efe5

08007cf4 <_ZN12_GLOBAL__N_117io_error_categoryD1Ev>:
 8007cf4:	b510      	push	{r4, lr}
 8007cf6:	4b03      	ldr	r3, [pc, #12]	; (8007d04 <_ZN12_GLOBAL__N_117io_error_categoryD1Ev+0x10>)
 8007cf8:	6003      	str	r3, [r0, #0]
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	f000 f8c3 	bl	8007e86 <_ZNSt3_V214error_categoryD1Ev>
 8007d00:	4620      	mov	r0, r4
 8007d02:	bd10      	pop	{r4, pc}
 8007d04:	0800f030 	.word	0x0800f030

08007d08 <_ZN12_GLOBAL__N_117io_error_categoryD0Ev>:
 8007d08:	b510      	push	{r4, lr}
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	f7ff fff2 	bl	8007cf4 <_ZN12_GLOBAL__N_117io_error_categoryD1Ev>
 8007d10:	4620      	mov	r0, r4
 8007d12:	f7ff fddf 	bl	80078d4 <_ZdlPv>
 8007d16:	4620      	mov	r0, r4
 8007d18:	bd10      	pop	{r4, pc}
	...

08007d1c <_GLOBAL__sub_I__ZSt17iostream_categoryv>:
 8007d1c:	4a02      	ldr	r2, [pc, #8]	; (8007d28 <_GLOBAL__sub_I__ZSt17iostream_categoryv+0xc>)
 8007d1e:	4903      	ldr	r1, [pc, #12]	; (8007d2c <_GLOBAL__sub_I__ZSt17iostream_categoryv+0x10>)
 8007d20:	4803      	ldr	r0, [pc, #12]	; (8007d30 <_GLOBAL__sub_I__ZSt17iostream_categoryv+0x14>)
 8007d22:	f000 b8c9 	b.w	8007eb8 <__aeabi_atexit>
 8007d26:	bf00      	nop
 8007d28:	20000000 	.word	0x20000000
 8007d2c:	08007cc5 	.word	0x08007cc5
 8007d30:	20000028 	.word	0x20000028

08007d34 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv>:
 8007d34:	4800      	ldr	r0, [pc, #0]	; (8007d38 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv+0x4>)
 8007d36:	4770      	bx	lr
 8007d38:	0800f050 	.word	0x0800f050

08007d3c <_ZNK12_GLOBAL__N_122generic_error_category10equivalentEiRKSt15error_condition>:
 8007d3c:	6813      	ldr	r3, [r2, #0]
 8007d3e:	4299      	cmp	r1, r3
 8007d40:	d104      	bne.n	8007d4c <_ZNK12_GLOBAL__N_122generic_error_category10equivalentEiRKSt15error_condition+0x10>
 8007d42:	6853      	ldr	r3, [r2, #4]
 8007d44:	1a1b      	subs	r3, r3, r0
 8007d46:	4258      	negs	r0, r3
 8007d48:	4158      	adcs	r0, r3
 8007d4a:	4770      	bx	lr
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	4770      	bx	lr

08007d50 <_ZNK12_GLOBAL__N_121system_error_category4nameEv>:
 8007d50:	4800      	ldr	r0, [pc, #0]	; (8007d54 <_ZNK12_GLOBAL__N_121system_error_category4nameEv+0x4>)
 8007d52:	4770      	bx	lr
 8007d54:	0800f657 	.word	0x0800f657

08007d58 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi>:
 8007d58:	2a74      	cmp	r2, #116	; 0x74
 8007d5a:	b510      	push	{r4, lr}
 8007d5c:	dc1a      	bgt.n	8007d94 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x3c>
 8007d5e:	2a57      	cmp	r2, #87	; 0x57
 8007d60:	dc0c      	bgt.n	8007d7c <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x24>
 8007d62:	2a4d      	cmp	r2, #77	; 0x4d
 8007d64:	dc07      	bgt.n	8007d76 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x1e>
 8007d66:	2a3b      	cmp	r2, #59	; 0x3b
 8007d68:	dc0c      	bgt.n	8007d84 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x2c>
 8007d6a:	2a24      	cmp	r2, #36	; 0x24
 8007d6c:	dc0e      	bgt.n	8007d8c <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x34>
 8007d6e:	2a0f      	cmp	r2, #15
 8007d70:	dc18      	bgt.n	8007da4 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x4c>
 8007d72:	2a0e      	cmp	r2, #14
 8007d74:	d916      	bls.n	8007da4 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x4c>
 8007d76:	e9c0 2100 	strd	r2, r1, [r0]
 8007d7a:	e016      	b.n	8007daa <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x52>
 8007d7c:	4b0b      	ldr	r3, [pc, #44]	; (8007dac <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x54>)
 8007d7e:	f1a2 0458 	sub.w	r4, r2, #88	; 0x58
 8007d82:	e00c      	b.n	8007d9e <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x46>
 8007d84:	4b0a      	ldr	r3, [pc, #40]	; (8007db0 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x58>)
 8007d86:	f1a2 043c 	sub.w	r4, r2, #60	; 0x3c
 8007d8a:	e008      	b.n	8007d9e <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x46>
 8007d8c:	f1a2 032d 	sub.w	r3, r2, #45	; 0x2d
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	e7ef      	b.n	8007d74 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x1c>
 8007d94:	f1a2 0476 	sub.w	r4, r2, #118	; 0x76
 8007d98:	2c18      	cmp	r4, #24
 8007d9a:	d8ec      	bhi.n	8007d76 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x1e>
 8007d9c:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x5c>)
 8007d9e:	40e3      	lsrs	r3, r4
 8007da0:	07db      	lsls	r3, r3, #31
 8007da2:	d5e8      	bpl.n	8007d76 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x1e>
 8007da4:	4b04      	ldr	r3, [pc, #16]	; (8007db8 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi+0x60>)
 8007da6:	6002      	str	r2, [r0, #0]
 8007da8:	6043      	str	r3, [r0, #4]
 8007daa:	bd10      	pop	{r4, pc}
 8007dac:	1fbf009d 	.word	0x1fbf009d
 8007db0:	0002088f 	.word	0x0002088f
 8007db4:	01f107bf 	.word	0x01f107bf
 8007db8:	20000030 	.word	0x20000030

08007dbc <_ZNKSt3_V214error_category23default_error_conditionEi>:
 8007dbc:	e9c0 2100 	strd	r2, r1, [r0]
 8007dc0:	4770      	bx	lr

08007dc2 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition>:
 8007dc2:	b513      	push	{r0, r1, r4, lr}
 8007dc4:	6803      	ldr	r3, [r0, #0]
 8007dc6:	4614      	mov	r4, r2
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	460a      	mov	r2, r1
 8007dcc:	4601      	mov	r1, r0
 8007dce:	4668      	mov	r0, sp
 8007dd0:	4798      	blx	r3
 8007dd2:	6863      	ldr	r3, [r4, #4]
 8007dd4:	9a01      	ldr	r2, [sp, #4]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d106      	bne.n	8007de8 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x26>
 8007dda:	9800      	ldr	r0, [sp, #0]
 8007ddc:	6823      	ldr	r3, [r4, #0]
 8007dde:	1ac3      	subs	r3, r0, r3
 8007de0:	4258      	negs	r0, r3
 8007de2:	4158      	adcs	r0, r3
 8007de4:	b002      	add	sp, #8
 8007de6:	bd10      	pop	{r4, pc}
 8007de8:	2000      	movs	r0, #0
 8007dea:	e7fb      	b.n	8007de4 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x22>

08007dec <_ZNKSt3_V214error_category10equivalentERKSt10error_codei>:
 8007dec:	684b      	ldr	r3, [r1, #4]
 8007dee:	4283      	cmp	r3, r0
 8007df0:	d104      	bne.n	8007dfc <_ZNKSt3_V214error_category10equivalentERKSt10error_codei+0x10>
 8007df2:	6808      	ldr	r0, [r1, #0]
 8007df4:	1a83      	subs	r3, r0, r2
 8007df6:	4258      	negs	r0, r3
 8007df8:	4158      	adcs	r0, r3
 8007dfa:	4770      	bx	lr
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	4770      	bx	lr

08007e00 <_ZN12_GLOBAL__N_121system_error_categoryD1Ev>:
 8007e00:	4770      	bx	lr

08007e02 <_ZN12_GLOBAL__N_122generic_error_categoryD1Ev>:
 8007e02:	4770      	bx	lr

08007e04 <_ZN12_GLOBAL__N_113constant_initINS_22generic_error_categoryEED1Ev>:
 8007e04:	4770      	bx	lr

08007e06 <_ZN12_GLOBAL__N_113constant_initINS_21system_error_categoryEED1Ev>:
 8007e06:	4770      	bx	lr

08007e08 <_ZN12_GLOBAL__N_122generic_error_categoryD0Ev>:
 8007e08:	b510      	push	{r4, lr}
 8007e0a:	4604      	mov	r4, r0
 8007e0c:	f7ff fd62 	bl	80078d4 <_ZdlPv>
 8007e10:	4620      	mov	r0, r4
 8007e12:	bd10      	pop	{r4, pc}

08007e14 <_ZN12_GLOBAL__N_121system_error_categoryD0Ev>:
 8007e14:	b510      	push	{r4, lr}
 8007e16:	4604      	mov	r4, r0
 8007e18:	f7ff fd5c 	bl	80078d4 <_ZdlPv>
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	bd10      	pop	{r4, pc}

08007e20 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei>:
 8007e20:	b513      	push	{r0, r1, r4, lr}
 8007e22:	4604      	mov	r4, r0
 8007e24:	4610      	mov	r0, r2
 8007e26:	f002 fb5b 	bl	800a4e0 <strerror>
 8007e2a:	aa01      	add	r2, sp, #4
 8007e2c:	4601      	mov	r1, r0
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f7ff fc64 	bl	80076fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007e34:	4620      	mov	r0, r4
 8007e36:	b002      	add	sp, #8
 8007e38:	bd10      	pop	{r4, pc}

08007e3a <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei>:
 8007e3a:	b510      	push	{r4, lr}
 8007e3c:	680b      	ldr	r3, [r1, #0]
 8007e3e:	b086      	sub	sp, #24
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	4604      	mov	r4, r0
 8007e44:	4668      	mov	r0, sp
 8007e46:	4798      	blx	r3
 8007e48:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f000 f85f 	bl	8007f10 <_ZNSt12__cow_stringC1EPKcj>
 8007e52:	4668      	mov	r0, sp
 8007e54:	f7ff fb22 	bl	800749c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8007e58:	4620      	mov	r0, r4
 8007e5a:	b006      	add	sp, #24
 8007e5c:	bd10      	pop	{r4, pc}

08007e5e <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition>:
 8007e5e:	b513      	push	{r0, r1, r4, lr}
 8007e60:	4614      	mov	r4, r2
 8007e62:	460a      	mov	r2, r1
 8007e64:	4601      	mov	r1, r0
 8007e66:	4668      	mov	r0, sp
 8007e68:	f7ff ff76 	bl	8007d58 <_ZNK12_GLOBAL__N_121system_error_category23default_error_conditionEi>
 8007e6c:	6863      	ldr	r3, [r4, #4]
 8007e6e:	9a01      	ldr	r2, [sp, #4]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d106      	bne.n	8007e82 <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x24>
 8007e74:	9800      	ldr	r0, [sp, #0]
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	1ac3      	subs	r3, r0, r3
 8007e7a:	4258      	negs	r0, r3
 8007e7c:	4158      	adcs	r0, r3
 8007e7e:	b002      	add	sp, #8
 8007e80:	bd10      	pop	{r4, pc}
 8007e82:	2000      	movs	r0, #0
 8007e84:	e7fb      	b.n	8007e7e <_ZNK12_GLOBAL__N_121system_error_category10equivalentEiRKSt15error_condition+0x20>

08007e86 <_ZNSt3_V214error_categoryD1Ev>:
 8007e86:	4770      	bx	lr

08007e88 <_GLOBAL__sub_I__ZSt20__throw_system_errori>:
 8007e88:	b508      	push	{r3, lr}
 8007e8a:	4a06      	ldr	r2, [pc, #24]	; (8007ea4 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x1c>)
 8007e8c:	4906      	ldr	r1, [pc, #24]	; (8007ea8 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x20>)
 8007e8e:	4807      	ldr	r0, [pc, #28]	; (8007eac <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x24>)
 8007e90:	f000 f812 	bl	8007eb8 <__aeabi_atexit>
 8007e94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e98:	4a02      	ldr	r2, [pc, #8]	; (8007ea4 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x1c>)
 8007e9a:	4905      	ldr	r1, [pc, #20]	; (8007eb0 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x28>)
 8007e9c:	4805      	ldr	r0, [pc, #20]	; (8007eb4 <_GLOBAL__sub_I__ZSt20__throw_system_errori+0x2c>)
 8007e9e:	f000 b80b 	b.w	8007eb8 <__aeabi_atexit>
 8007ea2:	bf00      	nop
 8007ea4:	20000000 	.word	0x20000000
 8007ea8:	08007e05 	.word	0x08007e05
 8007eac:	20000030 	.word	0x20000030
 8007eb0:	08007e07 	.word	0x08007e07
 8007eb4:	2000002c 	.word	0x2000002c

08007eb8 <__aeabi_atexit>:
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4601      	mov	r1, r0
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f002 bc09 	b.w	800a6d4 <__cxa_atexit>
	...

08007ec4 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0>:
 8007ec4:	4288      	cmp	r0, r1
 8007ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eca:	4604      	mov	r4, r0
 8007ecc:	460d      	mov	r5, r1
 8007ece:	d018      	beq.n	8007f02 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x3e>
 8007ed0:	b1a0      	cbz	r0, 8007efc <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x38>
 8007ed2:	eba1 0800 	sub.w	r8, r1, r0
 8007ed6:	4640      	mov	r0, r8
 8007ed8:	2100      	movs	r1, #0
 8007eda:	f7ff fdc7 	bl	8007a6c <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 8007ede:	f100 070c 	add.w	r7, r0, #12
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	462a      	mov	r2, r5
 8007eea:	f7ff fdad 	bl	8007a48 <_ZNSs13_S_copy_charsEPcPKcS1_>
 8007eee:	4641      	mov	r1, r8
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	f7ff fdaf 	bl	8007a54 <_ZNSs4_Rep26_M_set_length_and_sharableEj>
 8007ef6:	4638      	mov	r0, r7
 8007ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007efc:	4802      	ldr	r0, [pc, #8]	; (8007f08 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x44>)
 8007efe:	f7ff fe6c 	bl	8007bda <_ZSt19__throw_logic_errorPKc>
 8007f02:	4f02      	ldr	r7, [pc, #8]	; (8007f0c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x48>)
 8007f04:	e7f7      	b.n	8007ef6 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0+0x32>
 8007f06:	bf00      	nop
 8007f08:	0800f134 	.word	0x0800f134
 8007f0c:	200009fc 	.word	0x200009fc

08007f10 <_ZNSt12__cow_stringC1EPKcj>:
 8007f10:	b513      	push	{r0, r1, r4, lr}
 8007f12:	4604      	mov	r4, r0
 8007f14:	4608      	mov	r0, r1
 8007f16:	4611      	mov	r1, r2
 8007f18:	4401      	add	r1, r0
 8007f1a:	aa01      	add	r2, sp, #4
 8007f1c:	f7ff ffd2 	bl	8007ec4 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.isra.0>
 8007f20:	6020      	str	r0, [r4, #0]
 8007f22:	4620      	mov	r0, r4
 8007f24:	b002      	add	sp, #8
 8007f26:	bd10      	pop	{r4, pc}

08007f28 <fmod>:
 8007f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2a:	ed2d 8b02 	vpush	{d8}
 8007f2e:	ec57 6b10 	vmov	r6, r7, d0
 8007f32:	ec55 4b11 	vmov	r4, r5, d1
 8007f36:	f000 f97b 	bl	8008230 <__ieee754_fmod>
 8007f3a:	4622      	mov	r2, r4
 8007f3c:	462b      	mov	r3, r5
 8007f3e:	4630      	mov	r0, r6
 8007f40:	4639      	mov	r1, r7
 8007f42:	eeb0 8a40 	vmov.f32	s16, s0
 8007f46:	eef0 8a60 	vmov.f32	s17, s1
 8007f4a:	f7f8 fdf9 	bl	8000b40 <__aeabi_dcmpun>
 8007f4e:	b990      	cbnz	r0, 8007f76 <fmod+0x4e>
 8007f50:	2200      	movs	r2, #0
 8007f52:	2300      	movs	r3, #0
 8007f54:	4620      	mov	r0, r4
 8007f56:	4629      	mov	r1, r5
 8007f58:	f7f8 fdc0 	bl	8000adc <__aeabi_dcmpeq>
 8007f5c:	b158      	cbz	r0, 8007f76 <fmod+0x4e>
 8007f5e:	f002 fb8b 	bl	800a678 <__errno>
 8007f62:	2321      	movs	r3, #33	; 0x21
 8007f64:	6003      	str	r3, [r0, #0]
 8007f66:	2200      	movs	r2, #0
 8007f68:	2300      	movs	r3, #0
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	f7f8 fc77 	bl	8000860 <__aeabi_ddiv>
 8007f72:	ec41 0b18 	vmov	d8, r0, r1
 8007f76:	eeb0 0a48 	vmov.f32	s0, s16
 8007f7a:	eef0 0a68 	vmov.f32	s1, s17
 8007f7e:	ecbd 8b02 	vpop	{d8}
 8007f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f84:	0000      	movs	r0, r0
	...

08007f88 <cos>:
 8007f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f8a:	ec53 2b10 	vmov	r2, r3, d0
 8007f8e:	4826      	ldr	r0, [pc, #152]	; (8008028 <cos+0xa0>)
 8007f90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f94:	4281      	cmp	r1, r0
 8007f96:	dc06      	bgt.n	8007fa6 <cos+0x1e>
 8007f98:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008020 <cos+0x98>
 8007f9c:	b005      	add	sp, #20
 8007f9e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fa2:	f001 b845 	b.w	8009030 <__kernel_cos>
 8007fa6:	4821      	ldr	r0, [pc, #132]	; (800802c <cos+0xa4>)
 8007fa8:	4281      	cmp	r1, r0
 8007faa:	dd09      	ble.n	8007fc0 <cos+0x38>
 8007fac:	ee10 0a10 	vmov	r0, s0
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	f7f8 f973 	bl	800029c <__aeabi_dsub>
 8007fb6:	ec41 0b10 	vmov	d0, r0, r1
 8007fba:	b005      	add	sp, #20
 8007fbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8007fc0:	4668      	mov	r0, sp
 8007fc2:	f000 fab5 	bl	8008530 <__ieee754_rem_pio2>
 8007fc6:	f000 0003 	and.w	r0, r0, #3
 8007fca:	2801      	cmp	r0, #1
 8007fcc:	d00b      	beq.n	8007fe6 <cos+0x5e>
 8007fce:	2802      	cmp	r0, #2
 8007fd0:	d016      	beq.n	8008000 <cos+0x78>
 8007fd2:	b9e0      	cbnz	r0, 800800e <cos+0x86>
 8007fd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007fd8:	ed9d 0b00 	vldr	d0, [sp]
 8007fdc:	f001 f828 	bl	8009030 <__kernel_cos>
 8007fe0:	ec51 0b10 	vmov	r0, r1, d0
 8007fe4:	e7e7      	b.n	8007fb6 <cos+0x2e>
 8007fe6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007fea:	ed9d 0b00 	vldr	d0, [sp]
 8007fee:	f001 f8e7 	bl	80091c0 <__kernel_sin>
 8007ff2:	ec53 2b10 	vmov	r2, r3, d0
 8007ff6:	ee10 0a10 	vmov	r0, s0
 8007ffa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007ffe:	e7da      	b.n	8007fb6 <cos+0x2e>
 8008000:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008004:	ed9d 0b00 	vldr	d0, [sp]
 8008008:	f001 f812 	bl	8009030 <__kernel_cos>
 800800c:	e7f1      	b.n	8007ff2 <cos+0x6a>
 800800e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008012:	ed9d 0b00 	vldr	d0, [sp]
 8008016:	2001      	movs	r0, #1
 8008018:	f001 f8d2 	bl	80091c0 <__kernel_sin>
 800801c:	e7e0      	b.n	8007fe0 <cos+0x58>
 800801e:	bf00      	nop
	...
 8008028:	3fe921fb 	.word	0x3fe921fb
 800802c:	7fefffff 	.word	0x7fefffff

08008030 <ceil>:
 8008030:	ec51 0b10 	vmov	r0, r1, d0
 8008034:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800803c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8008040:	2e13      	cmp	r6, #19
 8008042:	ee10 5a10 	vmov	r5, s0
 8008046:	ee10 8a10 	vmov	r8, s0
 800804a:	460c      	mov	r4, r1
 800804c:	dc2f      	bgt.n	80080ae <ceil+0x7e>
 800804e:	2e00      	cmp	r6, #0
 8008050:	da12      	bge.n	8008078 <ceil+0x48>
 8008052:	a333      	add	r3, pc, #204	; (adr r3, 8008120 <ceil+0xf0>)
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	f7f8 f922 	bl	80002a0 <__adddf3>
 800805c:	2200      	movs	r2, #0
 800805e:	2300      	movs	r3, #0
 8008060:	f7f8 fd64 	bl	8000b2c <__aeabi_dcmpgt>
 8008064:	b128      	cbz	r0, 8008072 <ceil+0x42>
 8008066:	2c00      	cmp	r4, #0
 8008068:	db51      	blt.n	800810e <ceil+0xde>
 800806a:	432c      	orrs	r4, r5
 800806c:	d053      	beq.n	8008116 <ceil+0xe6>
 800806e:	4c2e      	ldr	r4, [pc, #184]	; (8008128 <ceil+0xf8>)
 8008070:	2500      	movs	r5, #0
 8008072:	4621      	mov	r1, r4
 8008074:	4628      	mov	r0, r5
 8008076:	e024      	b.n	80080c2 <ceil+0x92>
 8008078:	4f2c      	ldr	r7, [pc, #176]	; (800812c <ceil+0xfc>)
 800807a:	4137      	asrs	r7, r6
 800807c:	ea01 0307 	and.w	r3, r1, r7
 8008080:	4303      	orrs	r3, r0
 8008082:	d01e      	beq.n	80080c2 <ceil+0x92>
 8008084:	a326      	add	r3, pc, #152	; (adr r3, 8008120 <ceil+0xf0>)
 8008086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808a:	f7f8 f909 	bl	80002a0 <__adddf3>
 800808e:	2200      	movs	r2, #0
 8008090:	2300      	movs	r3, #0
 8008092:	f7f8 fd4b 	bl	8000b2c <__aeabi_dcmpgt>
 8008096:	2800      	cmp	r0, #0
 8008098:	d0eb      	beq.n	8008072 <ceil+0x42>
 800809a:	2c00      	cmp	r4, #0
 800809c:	bfc2      	ittt	gt
 800809e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80080a2:	4133      	asrgt	r3, r6
 80080a4:	18e4      	addgt	r4, r4, r3
 80080a6:	ea24 0407 	bic.w	r4, r4, r7
 80080aa:	2500      	movs	r5, #0
 80080ac:	e7e1      	b.n	8008072 <ceil+0x42>
 80080ae:	2e33      	cmp	r6, #51	; 0x33
 80080b0:	dd0b      	ble.n	80080ca <ceil+0x9a>
 80080b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80080b6:	d104      	bne.n	80080c2 <ceil+0x92>
 80080b8:	ee10 2a10 	vmov	r2, s0
 80080bc:	460b      	mov	r3, r1
 80080be:	f7f8 f8ef 	bl	80002a0 <__adddf3>
 80080c2:	ec41 0b10 	vmov	d0, r0, r1
 80080c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080ca:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80080ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80080d2:	40df      	lsrs	r7, r3
 80080d4:	4238      	tst	r0, r7
 80080d6:	d0f4      	beq.n	80080c2 <ceil+0x92>
 80080d8:	a311      	add	r3, pc, #68	; (adr r3, 8008120 <ceil+0xf0>)
 80080da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080de:	f7f8 f8df 	bl	80002a0 <__adddf3>
 80080e2:	2200      	movs	r2, #0
 80080e4:	2300      	movs	r3, #0
 80080e6:	f7f8 fd21 	bl	8000b2c <__aeabi_dcmpgt>
 80080ea:	2800      	cmp	r0, #0
 80080ec:	d0c1      	beq.n	8008072 <ceil+0x42>
 80080ee:	2c00      	cmp	r4, #0
 80080f0:	dd0a      	ble.n	8008108 <ceil+0xd8>
 80080f2:	2e14      	cmp	r6, #20
 80080f4:	d101      	bne.n	80080fa <ceil+0xca>
 80080f6:	3401      	adds	r4, #1
 80080f8:	e006      	b.n	8008108 <ceil+0xd8>
 80080fa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80080fe:	2301      	movs	r3, #1
 8008100:	40b3      	lsls	r3, r6
 8008102:	441d      	add	r5, r3
 8008104:	45a8      	cmp	r8, r5
 8008106:	d8f6      	bhi.n	80080f6 <ceil+0xc6>
 8008108:	ea25 0507 	bic.w	r5, r5, r7
 800810c:	e7b1      	b.n	8008072 <ceil+0x42>
 800810e:	2500      	movs	r5, #0
 8008110:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008114:	e7ad      	b.n	8008072 <ceil+0x42>
 8008116:	4625      	mov	r5, r4
 8008118:	e7ab      	b.n	8008072 <ceil+0x42>
 800811a:	bf00      	nop
 800811c:	f3af 8000 	nop.w
 8008120:	8800759c 	.word	0x8800759c
 8008124:	7e37e43c 	.word	0x7e37e43c
 8008128:	3ff00000 	.word	0x3ff00000
 800812c:	000fffff 	.word	0x000fffff

08008130 <floor>:
 8008130:	ec51 0b10 	vmov	r0, r1, d0
 8008134:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800813c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8008140:	2e13      	cmp	r6, #19
 8008142:	ee10 5a10 	vmov	r5, s0
 8008146:	ee10 8a10 	vmov	r8, s0
 800814a:	460c      	mov	r4, r1
 800814c:	dc31      	bgt.n	80081b2 <floor+0x82>
 800814e:	2e00      	cmp	r6, #0
 8008150:	da14      	bge.n	800817c <floor+0x4c>
 8008152:	a333      	add	r3, pc, #204	; (adr r3, 8008220 <floor+0xf0>)
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	f7f8 f8a2 	bl	80002a0 <__adddf3>
 800815c:	2200      	movs	r2, #0
 800815e:	2300      	movs	r3, #0
 8008160:	f7f8 fce4 	bl	8000b2c <__aeabi_dcmpgt>
 8008164:	b138      	cbz	r0, 8008176 <floor+0x46>
 8008166:	2c00      	cmp	r4, #0
 8008168:	da53      	bge.n	8008212 <floor+0xe2>
 800816a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800816e:	4325      	orrs	r5, r4
 8008170:	d052      	beq.n	8008218 <floor+0xe8>
 8008172:	4c2d      	ldr	r4, [pc, #180]	; (8008228 <floor+0xf8>)
 8008174:	2500      	movs	r5, #0
 8008176:	4621      	mov	r1, r4
 8008178:	4628      	mov	r0, r5
 800817a:	e024      	b.n	80081c6 <floor+0x96>
 800817c:	4f2b      	ldr	r7, [pc, #172]	; (800822c <floor+0xfc>)
 800817e:	4137      	asrs	r7, r6
 8008180:	ea01 0307 	and.w	r3, r1, r7
 8008184:	4303      	orrs	r3, r0
 8008186:	d01e      	beq.n	80081c6 <floor+0x96>
 8008188:	a325      	add	r3, pc, #148	; (adr r3, 8008220 <floor+0xf0>)
 800818a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818e:	f7f8 f887 	bl	80002a0 <__adddf3>
 8008192:	2200      	movs	r2, #0
 8008194:	2300      	movs	r3, #0
 8008196:	f7f8 fcc9 	bl	8000b2c <__aeabi_dcmpgt>
 800819a:	2800      	cmp	r0, #0
 800819c:	d0eb      	beq.n	8008176 <floor+0x46>
 800819e:	2c00      	cmp	r4, #0
 80081a0:	bfbe      	ittt	lt
 80081a2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80081a6:	4133      	asrlt	r3, r6
 80081a8:	18e4      	addlt	r4, r4, r3
 80081aa:	ea24 0407 	bic.w	r4, r4, r7
 80081ae:	2500      	movs	r5, #0
 80081b0:	e7e1      	b.n	8008176 <floor+0x46>
 80081b2:	2e33      	cmp	r6, #51	; 0x33
 80081b4:	dd0b      	ble.n	80081ce <floor+0x9e>
 80081b6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80081ba:	d104      	bne.n	80081c6 <floor+0x96>
 80081bc:	ee10 2a10 	vmov	r2, s0
 80081c0:	460b      	mov	r3, r1
 80081c2:	f7f8 f86d 	bl	80002a0 <__adddf3>
 80081c6:	ec41 0b10 	vmov	d0, r0, r1
 80081ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ce:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80081d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80081d6:	40df      	lsrs	r7, r3
 80081d8:	4238      	tst	r0, r7
 80081da:	d0f4      	beq.n	80081c6 <floor+0x96>
 80081dc:	a310      	add	r3, pc, #64	; (adr r3, 8008220 <floor+0xf0>)
 80081de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e2:	f7f8 f85d 	bl	80002a0 <__adddf3>
 80081e6:	2200      	movs	r2, #0
 80081e8:	2300      	movs	r3, #0
 80081ea:	f7f8 fc9f 	bl	8000b2c <__aeabi_dcmpgt>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d0c1      	beq.n	8008176 <floor+0x46>
 80081f2:	2c00      	cmp	r4, #0
 80081f4:	da0a      	bge.n	800820c <floor+0xdc>
 80081f6:	2e14      	cmp	r6, #20
 80081f8:	d101      	bne.n	80081fe <floor+0xce>
 80081fa:	3401      	adds	r4, #1
 80081fc:	e006      	b.n	800820c <floor+0xdc>
 80081fe:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008202:	2301      	movs	r3, #1
 8008204:	40b3      	lsls	r3, r6
 8008206:	441d      	add	r5, r3
 8008208:	45a8      	cmp	r8, r5
 800820a:	d8f6      	bhi.n	80081fa <floor+0xca>
 800820c:	ea25 0507 	bic.w	r5, r5, r7
 8008210:	e7b1      	b.n	8008176 <floor+0x46>
 8008212:	2500      	movs	r5, #0
 8008214:	462c      	mov	r4, r5
 8008216:	e7ae      	b.n	8008176 <floor+0x46>
 8008218:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800821c:	e7ab      	b.n	8008176 <floor+0x46>
 800821e:	bf00      	nop
 8008220:	8800759c 	.word	0x8800759c
 8008224:	7e37e43c 	.word	0x7e37e43c
 8008228:	bff00000 	.word	0xbff00000
 800822c:	000fffff 	.word	0x000fffff

08008230 <__ieee754_fmod>:
 8008230:	ec53 2b11 	vmov	r2, r3, d1
 8008234:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8008238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800823c:	ea5c 0402 	orrs.w	r4, ip, r2
 8008240:	ec51 0b10 	vmov	r0, r1, d0
 8008244:	ee11 7a10 	vmov	r7, s2
 8008248:	ee11 ea10 	vmov	lr, s2
 800824c:	461e      	mov	r6, r3
 800824e:	d00c      	beq.n	800826a <__ieee754_fmod+0x3a>
 8008250:	4c78      	ldr	r4, [pc, #480]	; (8008434 <__ieee754_fmod+0x204>)
 8008252:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8008256:	45a0      	cmp	r8, r4
 8008258:	4689      	mov	r9, r1
 800825a:	dc06      	bgt.n	800826a <__ieee754_fmod+0x3a>
 800825c:	4254      	negs	r4, r2
 800825e:	4d76      	ldr	r5, [pc, #472]	; (8008438 <__ieee754_fmod+0x208>)
 8008260:	4314      	orrs	r4, r2
 8008262:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8008266:	42ac      	cmp	r4, r5
 8008268:	d909      	bls.n	800827e <__ieee754_fmod+0x4e>
 800826a:	f7f8 f9cf 	bl	800060c <__aeabi_dmul>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	f7f8 faf5 	bl	8000860 <__aeabi_ddiv>
 8008276:	ec41 0b10 	vmov	d0, r0, r1
 800827a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800827e:	45e0      	cmp	r8, ip
 8008280:	ee10 aa10 	vmov	sl, s0
 8008284:	ee10 4a10 	vmov	r4, s0
 8008288:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800828c:	dc09      	bgt.n	80082a2 <__ieee754_fmod+0x72>
 800828e:	dbf2      	blt.n	8008276 <__ieee754_fmod+0x46>
 8008290:	4290      	cmp	r0, r2
 8008292:	d3f0      	bcc.n	8008276 <__ieee754_fmod+0x46>
 8008294:	d105      	bne.n	80082a2 <__ieee754_fmod+0x72>
 8008296:	4b69      	ldr	r3, [pc, #420]	; (800843c <__ieee754_fmod+0x20c>)
 8008298:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800829c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80082a0:	e7e9      	b.n	8008276 <__ieee754_fmod+0x46>
 80082a2:	4a65      	ldr	r2, [pc, #404]	; (8008438 <__ieee754_fmod+0x208>)
 80082a4:	ea19 0f02 	tst.w	r9, r2
 80082a8:	d148      	bne.n	800833c <__ieee754_fmod+0x10c>
 80082aa:	f1b8 0f00 	cmp.w	r8, #0
 80082ae:	d13d      	bne.n	800832c <__ieee754_fmod+0xfc>
 80082b0:	4963      	ldr	r1, [pc, #396]	; (8008440 <__ieee754_fmod+0x210>)
 80082b2:	4653      	mov	r3, sl
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	dc36      	bgt.n	8008326 <__ieee754_fmod+0xf6>
 80082b8:	4216      	tst	r6, r2
 80082ba:	d14f      	bne.n	800835c <__ieee754_fmod+0x12c>
 80082bc:	f1bc 0f00 	cmp.w	ip, #0
 80082c0:	d144      	bne.n	800834c <__ieee754_fmod+0x11c>
 80082c2:	4a5f      	ldr	r2, [pc, #380]	; (8008440 <__ieee754_fmod+0x210>)
 80082c4:	463b      	mov	r3, r7
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	dc3d      	bgt.n	8008346 <__ieee754_fmod+0x116>
 80082ca:	485e      	ldr	r0, [pc, #376]	; (8008444 <__ieee754_fmod+0x214>)
 80082cc:	4281      	cmp	r1, r0
 80082ce:	db4a      	blt.n	8008366 <__ieee754_fmod+0x136>
 80082d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082d8:	485a      	ldr	r0, [pc, #360]	; (8008444 <__ieee754_fmod+0x214>)
 80082da:	4282      	cmp	r2, r0
 80082dc:	db57      	blt.n	800838e <__ieee754_fmod+0x15e>
 80082de:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80082e2:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 80082e6:	1a89      	subs	r1, r1, r2
 80082e8:	1b98      	subs	r0, r3, r6
 80082ea:	eba4 070e 	sub.w	r7, r4, lr
 80082ee:	2900      	cmp	r1, #0
 80082f0:	d162      	bne.n	80083b8 <__ieee754_fmod+0x188>
 80082f2:	4574      	cmp	r4, lr
 80082f4:	bf38      	it	cc
 80082f6:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 80082fa:	2800      	cmp	r0, #0
 80082fc:	bfa4      	itt	ge
 80082fe:	463c      	movge	r4, r7
 8008300:	4603      	movge	r3, r0
 8008302:	ea53 0104 	orrs.w	r1, r3, r4
 8008306:	d0c6      	beq.n	8008296 <__ieee754_fmod+0x66>
 8008308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800830c:	db69      	blt.n	80083e2 <__ieee754_fmod+0x1b2>
 800830e:	494d      	ldr	r1, [pc, #308]	; (8008444 <__ieee754_fmod+0x214>)
 8008310:	428a      	cmp	r2, r1
 8008312:	db6c      	blt.n	80083ee <__ieee754_fmod+0x1be>
 8008314:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008318:	432b      	orrs	r3, r5
 800831a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800831e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008322:	4620      	mov	r0, r4
 8008324:	e7a7      	b.n	8008276 <__ieee754_fmod+0x46>
 8008326:	3901      	subs	r1, #1
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	e7c3      	b.n	80082b4 <__ieee754_fmod+0x84>
 800832c:	4945      	ldr	r1, [pc, #276]	; (8008444 <__ieee754_fmod+0x214>)
 800832e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8008332:	2b00      	cmp	r3, #0
 8008334:	ddc0      	ble.n	80082b8 <__ieee754_fmod+0x88>
 8008336:	3901      	subs	r1, #1
 8008338:	005b      	lsls	r3, r3, #1
 800833a:	e7fa      	b.n	8008332 <__ieee754_fmod+0x102>
 800833c:	ea4f 5128 	mov.w	r1, r8, asr #20
 8008340:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008344:	e7b8      	b.n	80082b8 <__ieee754_fmod+0x88>
 8008346:	3a01      	subs	r2, #1
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	e7bc      	b.n	80082c6 <__ieee754_fmod+0x96>
 800834c:	4a3d      	ldr	r2, [pc, #244]	; (8008444 <__ieee754_fmod+0x214>)
 800834e:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8008352:	2b00      	cmp	r3, #0
 8008354:	ddb9      	ble.n	80082ca <__ieee754_fmod+0x9a>
 8008356:	3a01      	subs	r2, #1
 8008358:	005b      	lsls	r3, r3, #1
 800835a:	e7fa      	b.n	8008352 <__ieee754_fmod+0x122>
 800835c:	ea4f 522c 	mov.w	r2, ip, asr #20
 8008360:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008364:	e7b1      	b.n	80082ca <__ieee754_fmod+0x9a>
 8008366:	1a40      	subs	r0, r0, r1
 8008368:	281f      	cmp	r0, #31
 800836a:	dc0a      	bgt.n	8008382 <__ieee754_fmod+0x152>
 800836c:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8008370:	fa08 f800 	lsl.w	r8, r8, r0
 8008374:	fa2a f303 	lsr.w	r3, sl, r3
 8008378:	ea43 0308 	orr.w	r3, r3, r8
 800837c:	fa0a f400 	lsl.w	r4, sl, r0
 8008380:	e7aa      	b.n	80082d8 <__ieee754_fmod+0xa8>
 8008382:	4b31      	ldr	r3, [pc, #196]	; (8008448 <__ieee754_fmod+0x218>)
 8008384:	1a5b      	subs	r3, r3, r1
 8008386:	fa0a f303 	lsl.w	r3, sl, r3
 800838a:	2400      	movs	r4, #0
 800838c:	e7a4      	b.n	80082d8 <__ieee754_fmod+0xa8>
 800838e:	1a80      	subs	r0, r0, r2
 8008390:	281f      	cmp	r0, #31
 8008392:	dc0a      	bgt.n	80083aa <__ieee754_fmod+0x17a>
 8008394:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8008398:	fa0c fc00 	lsl.w	ip, ip, r0
 800839c:	fa27 f606 	lsr.w	r6, r7, r6
 80083a0:	ea46 060c 	orr.w	r6, r6, ip
 80083a4:	fa07 fe00 	lsl.w	lr, r7, r0
 80083a8:	e79d      	b.n	80082e6 <__ieee754_fmod+0xb6>
 80083aa:	4e27      	ldr	r6, [pc, #156]	; (8008448 <__ieee754_fmod+0x218>)
 80083ac:	1ab6      	subs	r6, r6, r2
 80083ae:	fa07 f606 	lsl.w	r6, r7, r6
 80083b2:	f04f 0e00 	mov.w	lr, #0
 80083b6:	e796      	b.n	80082e6 <__ieee754_fmod+0xb6>
 80083b8:	4574      	cmp	r4, lr
 80083ba:	bf38      	it	cc
 80083bc:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 80083c0:	2800      	cmp	r0, #0
 80083c2:	da05      	bge.n	80083d0 <__ieee754_fmod+0x1a0>
 80083c4:	0fe0      	lsrs	r0, r4, #31
 80083c6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80083ca:	0064      	lsls	r4, r4, #1
 80083cc:	3901      	subs	r1, #1
 80083ce:	e78b      	b.n	80082e8 <__ieee754_fmod+0xb8>
 80083d0:	ea50 0307 	orrs.w	r3, r0, r7
 80083d4:	f43f af5f 	beq.w	8008296 <__ieee754_fmod+0x66>
 80083d8:	0ffb      	lsrs	r3, r7, #31
 80083da:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80083de:	007c      	lsls	r4, r7, #1
 80083e0:	e7f4      	b.n	80083cc <__ieee754_fmod+0x19c>
 80083e2:	0fe1      	lsrs	r1, r4, #31
 80083e4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80083e8:	0064      	lsls	r4, r4, #1
 80083ea:	3a01      	subs	r2, #1
 80083ec:	e78c      	b.n	8008308 <__ieee754_fmod+0xd8>
 80083ee:	1a89      	subs	r1, r1, r2
 80083f0:	2914      	cmp	r1, #20
 80083f2:	dc0a      	bgt.n	800840a <__ieee754_fmod+0x1da>
 80083f4:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80083f8:	fa03 f202 	lsl.w	r2, r3, r2
 80083fc:	40cc      	lsrs	r4, r1
 80083fe:	4322      	orrs	r2, r4
 8008400:	410b      	asrs	r3, r1
 8008402:	ea43 0105 	orr.w	r1, r3, r5
 8008406:	4610      	mov	r0, r2
 8008408:	e735      	b.n	8008276 <__ieee754_fmod+0x46>
 800840a:	291f      	cmp	r1, #31
 800840c:	dc07      	bgt.n	800841e <__ieee754_fmod+0x1ee>
 800840e:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8008412:	40cc      	lsrs	r4, r1
 8008414:	fa03 f202 	lsl.w	r2, r3, r2
 8008418:	4322      	orrs	r2, r4
 800841a:	462b      	mov	r3, r5
 800841c:	e7f1      	b.n	8008402 <__ieee754_fmod+0x1d2>
 800841e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8008422:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008426:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800842a:	32e2      	adds	r2, #226	; 0xe2
 800842c:	fa43 f202 	asr.w	r2, r3, r2
 8008430:	e7f3      	b.n	800841a <__ieee754_fmod+0x1ea>
 8008432:	bf00      	nop
 8008434:	7fefffff 	.word	0x7fefffff
 8008438:	7ff00000 	.word	0x7ff00000
 800843c:	0800f160 	.word	0x0800f160
 8008440:	fffffbed 	.word	0xfffffbed
 8008444:	fffffc02 	.word	0xfffffc02
 8008448:	fffffbe2 	.word	0xfffffbe2

0800844c <round>:
 800844c:	ec53 2b10 	vmov	r2, r3, d0
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8008456:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800845a:	2813      	cmp	r0, #19
 800845c:	ee10 5a10 	vmov	r5, s0
 8008460:	4619      	mov	r1, r3
 8008462:	dc18      	bgt.n	8008496 <round+0x4a>
 8008464:	2800      	cmp	r0, #0
 8008466:	da09      	bge.n	800847c <round+0x30>
 8008468:	3001      	adds	r0, #1
 800846a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800846e:	d103      	bne.n	8008478 <round+0x2c>
 8008470:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8008474:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008478:	2300      	movs	r3, #0
 800847a:	e02a      	b.n	80084d2 <round+0x86>
 800847c:	4c16      	ldr	r4, [pc, #88]	; (80084d8 <round+0x8c>)
 800847e:	4104      	asrs	r4, r0
 8008480:	ea03 0604 	and.w	r6, r3, r4
 8008484:	4316      	orrs	r6, r2
 8008486:	d011      	beq.n	80084ac <round+0x60>
 8008488:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800848c:	4103      	asrs	r3, r0
 800848e:	440b      	add	r3, r1
 8008490:	ea23 0104 	bic.w	r1, r3, r4
 8008494:	e7f0      	b.n	8008478 <round+0x2c>
 8008496:	2833      	cmp	r0, #51	; 0x33
 8008498:	dd0b      	ble.n	80084b2 <round+0x66>
 800849a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800849e:	d105      	bne.n	80084ac <round+0x60>
 80084a0:	ee10 0a10 	vmov	r0, s0
 80084a4:	f7f7 fefc 	bl	80002a0 <__adddf3>
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	ec43 2b10 	vmov	d0, r2, r3
 80084b0:	bd70      	pop	{r4, r5, r6, pc}
 80084b2:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80084b6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80084ba:	40f4      	lsrs	r4, r6
 80084bc:	4214      	tst	r4, r2
 80084be:	d0f5      	beq.n	80084ac <round+0x60>
 80084c0:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 80084c4:	2301      	movs	r3, #1
 80084c6:	4083      	lsls	r3, r0
 80084c8:	195b      	adds	r3, r3, r5
 80084ca:	bf28      	it	cs
 80084cc:	3101      	addcs	r1, #1
 80084ce:	ea23 0304 	bic.w	r3, r3, r4
 80084d2:	461a      	mov	r2, r3
 80084d4:	460b      	mov	r3, r1
 80084d6:	e7e9      	b.n	80084ac <round+0x60>
 80084d8:	000fffff 	.word	0x000fffff

080084dc <fmax>:
 80084dc:	b508      	push	{r3, lr}
 80084de:	ed2d 8b04 	vpush	{d8-d9}
 80084e2:	eeb0 8a40 	vmov.f32	s16, s0
 80084e6:	eef0 8a60 	vmov.f32	s17, s1
 80084ea:	eeb0 9a41 	vmov.f32	s18, s2
 80084ee:	eef0 9a61 	vmov.f32	s19, s3
 80084f2:	f000 fa23 	bl	800893c <__fpclassifyd>
 80084f6:	b168      	cbz	r0, 8008514 <fmax+0x38>
 80084f8:	eeb0 0a49 	vmov.f32	s0, s18
 80084fc:	eef0 0a69 	vmov.f32	s1, s19
 8008500:	f000 fa1c 	bl	800893c <__fpclassifyd>
 8008504:	b150      	cbz	r0, 800851c <fmax+0x40>
 8008506:	ec53 2b19 	vmov	r2, r3, d9
 800850a:	ec51 0b18 	vmov	r0, r1, d8
 800850e:	f7f8 fb0d 	bl	8000b2c <__aeabi_dcmpgt>
 8008512:	b918      	cbnz	r0, 800851c <fmax+0x40>
 8008514:	eeb0 8a49 	vmov.f32	s16, s18
 8008518:	eef0 8a69 	vmov.f32	s17, s19
 800851c:	eeb0 0a48 	vmov.f32	s0, s16
 8008520:	eef0 0a68 	vmov.f32	s1, s17
 8008524:	ecbd 8b04 	vpop	{d8-d9}
 8008528:	bd08      	pop	{r3, pc}
 800852a:	0000      	movs	r0, r0
 800852c:	0000      	movs	r0, r0
	...

08008530 <__ieee754_rem_pio2>:
 8008530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008534:	ed2d 8b02 	vpush	{d8}
 8008538:	ec55 4b10 	vmov	r4, r5, d0
 800853c:	4bca      	ldr	r3, [pc, #808]	; (8008868 <__ieee754_rem_pio2+0x338>)
 800853e:	b08b      	sub	sp, #44	; 0x2c
 8008540:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008544:	4598      	cmp	r8, r3
 8008546:	4682      	mov	sl, r0
 8008548:	9502      	str	r5, [sp, #8]
 800854a:	dc08      	bgt.n	800855e <__ieee754_rem_pio2+0x2e>
 800854c:	2200      	movs	r2, #0
 800854e:	2300      	movs	r3, #0
 8008550:	ed80 0b00 	vstr	d0, [r0]
 8008554:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008558:	f04f 0b00 	mov.w	fp, #0
 800855c:	e028      	b.n	80085b0 <__ieee754_rem_pio2+0x80>
 800855e:	4bc3      	ldr	r3, [pc, #780]	; (800886c <__ieee754_rem_pio2+0x33c>)
 8008560:	4598      	cmp	r8, r3
 8008562:	dc78      	bgt.n	8008656 <__ieee754_rem_pio2+0x126>
 8008564:	9b02      	ldr	r3, [sp, #8]
 8008566:	4ec2      	ldr	r6, [pc, #776]	; (8008870 <__ieee754_rem_pio2+0x340>)
 8008568:	2b00      	cmp	r3, #0
 800856a:	ee10 0a10 	vmov	r0, s0
 800856e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008830 <__ieee754_rem_pio2+0x300>)
 8008570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008574:	4629      	mov	r1, r5
 8008576:	dd39      	ble.n	80085ec <__ieee754_rem_pio2+0xbc>
 8008578:	f7f7 fe90 	bl	800029c <__aeabi_dsub>
 800857c:	45b0      	cmp	r8, r6
 800857e:	4604      	mov	r4, r0
 8008580:	460d      	mov	r5, r1
 8008582:	d01b      	beq.n	80085bc <__ieee754_rem_pio2+0x8c>
 8008584:	a3ac      	add	r3, pc, #688	; (adr r3, 8008838 <__ieee754_rem_pio2+0x308>)
 8008586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858a:	f7f7 fe87 	bl	800029c <__aeabi_dsub>
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	e9ca 2300 	strd	r2, r3, [sl]
 8008596:	4620      	mov	r0, r4
 8008598:	4629      	mov	r1, r5
 800859a:	f7f7 fe7f 	bl	800029c <__aeabi_dsub>
 800859e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008838 <__ieee754_rem_pio2+0x308>)
 80085a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a4:	f7f7 fe7a 	bl	800029c <__aeabi_dsub>
 80085a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80085ac:	f04f 0b01 	mov.w	fp, #1
 80085b0:	4658      	mov	r0, fp
 80085b2:	b00b      	add	sp, #44	; 0x2c
 80085b4:	ecbd 8b02 	vpop	{d8}
 80085b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085bc:	a3a0      	add	r3, pc, #640	; (adr r3, 8008840 <__ieee754_rem_pio2+0x310>)
 80085be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c2:	f7f7 fe6b 	bl	800029c <__aeabi_dsub>
 80085c6:	a3a0      	add	r3, pc, #640	; (adr r3, 8008848 <__ieee754_rem_pio2+0x318>)
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	4604      	mov	r4, r0
 80085ce:	460d      	mov	r5, r1
 80085d0:	f7f7 fe64 	bl	800029c <__aeabi_dsub>
 80085d4:	4602      	mov	r2, r0
 80085d6:	460b      	mov	r3, r1
 80085d8:	e9ca 2300 	strd	r2, r3, [sl]
 80085dc:	4620      	mov	r0, r4
 80085de:	4629      	mov	r1, r5
 80085e0:	f7f7 fe5c 	bl	800029c <__aeabi_dsub>
 80085e4:	a398      	add	r3, pc, #608	; (adr r3, 8008848 <__ieee754_rem_pio2+0x318>)
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	e7db      	b.n	80085a4 <__ieee754_rem_pio2+0x74>
 80085ec:	f7f7 fe58 	bl	80002a0 <__adddf3>
 80085f0:	45b0      	cmp	r8, r6
 80085f2:	4604      	mov	r4, r0
 80085f4:	460d      	mov	r5, r1
 80085f6:	d016      	beq.n	8008626 <__ieee754_rem_pio2+0xf6>
 80085f8:	a38f      	add	r3, pc, #572	; (adr r3, 8008838 <__ieee754_rem_pio2+0x308>)
 80085fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fe:	f7f7 fe4f 	bl	80002a0 <__adddf3>
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	e9ca 2300 	strd	r2, r3, [sl]
 800860a:	4620      	mov	r0, r4
 800860c:	4629      	mov	r1, r5
 800860e:	f7f7 fe45 	bl	800029c <__aeabi_dsub>
 8008612:	a389      	add	r3, pc, #548	; (adr r3, 8008838 <__ieee754_rem_pio2+0x308>)
 8008614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008618:	f7f7 fe42 	bl	80002a0 <__adddf3>
 800861c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8008620:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008624:	e7c4      	b.n	80085b0 <__ieee754_rem_pio2+0x80>
 8008626:	a386      	add	r3, pc, #536	; (adr r3, 8008840 <__ieee754_rem_pio2+0x310>)
 8008628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862c:	f7f7 fe38 	bl	80002a0 <__adddf3>
 8008630:	a385      	add	r3, pc, #532	; (adr r3, 8008848 <__ieee754_rem_pio2+0x318>)
 8008632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008636:	4604      	mov	r4, r0
 8008638:	460d      	mov	r5, r1
 800863a:	f7f7 fe31 	bl	80002a0 <__adddf3>
 800863e:	4602      	mov	r2, r0
 8008640:	460b      	mov	r3, r1
 8008642:	e9ca 2300 	strd	r2, r3, [sl]
 8008646:	4620      	mov	r0, r4
 8008648:	4629      	mov	r1, r5
 800864a:	f7f7 fe27 	bl	800029c <__aeabi_dsub>
 800864e:	a37e      	add	r3, pc, #504	; (adr r3, 8008848 <__ieee754_rem_pio2+0x318>)
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	e7e0      	b.n	8008618 <__ieee754_rem_pio2+0xe8>
 8008656:	4b87      	ldr	r3, [pc, #540]	; (8008874 <__ieee754_rem_pio2+0x344>)
 8008658:	4598      	cmp	r8, r3
 800865a:	f300 80d8 	bgt.w	800880e <__ieee754_rem_pio2+0x2de>
 800865e:	f000 fe6d 	bl	800933c <fabs>
 8008662:	ec55 4b10 	vmov	r4, r5, d0
 8008666:	ee10 0a10 	vmov	r0, s0
 800866a:	a379      	add	r3, pc, #484	; (adr r3, 8008850 <__ieee754_rem_pio2+0x320>)
 800866c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008670:	4629      	mov	r1, r5
 8008672:	f7f7 ffcb 	bl	800060c <__aeabi_dmul>
 8008676:	4b80      	ldr	r3, [pc, #512]	; (8008878 <__ieee754_rem_pio2+0x348>)
 8008678:	2200      	movs	r2, #0
 800867a:	f7f7 fe11 	bl	80002a0 <__adddf3>
 800867e:	f7f8 fa75 	bl	8000b6c <__aeabi_d2iz>
 8008682:	4683      	mov	fp, r0
 8008684:	f7f7 ff58 	bl	8000538 <__aeabi_i2d>
 8008688:	4602      	mov	r2, r0
 800868a:	460b      	mov	r3, r1
 800868c:	ec43 2b18 	vmov	d8, r2, r3
 8008690:	a367      	add	r3, pc, #412	; (adr r3, 8008830 <__ieee754_rem_pio2+0x300>)
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	f7f7 ffb9 	bl	800060c <__aeabi_dmul>
 800869a:	4602      	mov	r2, r0
 800869c:	460b      	mov	r3, r1
 800869e:	4620      	mov	r0, r4
 80086a0:	4629      	mov	r1, r5
 80086a2:	f7f7 fdfb 	bl	800029c <__aeabi_dsub>
 80086a6:	a364      	add	r3, pc, #400	; (adr r3, 8008838 <__ieee754_rem_pio2+0x308>)
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	4606      	mov	r6, r0
 80086ae:	460f      	mov	r7, r1
 80086b0:	ec51 0b18 	vmov	r0, r1, d8
 80086b4:	f7f7 ffaa 	bl	800060c <__aeabi_dmul>
 80086b8:	f1bb 0f1f 	cmp.w	fp, #31
 80086bc:	4604      	mov	r4, r0
 80086be:	460d      	mov	r5, r1
 80086c0:	dc0d      	bgt.n	80086de <__ieee754_rem_pio2+0x1ae>
 80086c2:	4b6e      	ldr	r3, [pc, #440]	; (800887c <__ieee754_rem_pio2+0x34c>)
 80086c4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80086c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086cc:	4543      	cmp	r3, r8
 80086ce:	d006      	beq.n	80086de <__ieee754_rem_pio2+0x1ae>
 80086d0:	4622      	mov	r2, r4
 80086d2:	462b      	mov	r3, r5
 80086d4:	4630      	mov	r0, r6
 80086d6:	4639      	mov	r1, r7
 80086d8:	f7f7 fde0 	bl	800029c <__aeabi_dsub>
 80086dc:	e00e      	b.n	80086fc <__ieee754_rem_pio2+0x1cc>
 80086de:	462b      	mov	r3, r5
 80086e0:	4622      	mov	r2, r4
 80086e2:	4630      	mov	r0, r6
 80086e4:	4639      	mov	r1, r7
 80086e6:	f7f7 fdd9 	bl	800029c <__aeabi_dsub>
 80086ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 80086ee:	9303      	str	r3, [sp, #12]
 80086f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80086f4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80086f8:	2b10      	cmp	r3, #16
 80086fa:	dc02      	bgt.n	8008702 <__ieee754_rem_pio2+0x1d2>
 80086fc:	e9ca 0100 	strd	r0, r1, [sl]
 8008700:	e039      	b.n	8008776 <__ieee754_rem_pio2+0x246>
 8008702:	a34f      	add	r3, pc, #316	; (adr r3, 8008840 <__ieee754_rem_pio2+0x310>)
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	ec51 0b18 	vmov	r0, r1, d8
 800870c:	f7f7 ff7e 	bl	800060c <__aeabi_dmul>
 8008710:	4604      	mov	r4, r0
 8008712:	460d      	mov	r5, r1
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	4630      	mov	r0, r6
 800871a:	4639      	mov	r1, r7
 800871c:	f7f7 fdbe 	bl	800029c <__aeabi_dsub>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4680      	mov	r8, r0
 8008726:	4689      	mov	r9, r1
 8008728:	4630      	mov	r0, r6
 800872a:	4639      	mov	r1, r7
 800872c:	f7f7 fdb6 	bl	800029c <__aeabi_dsub>
 8008730:	4622      	mov	r2, r4
 8008732:	462b      	mov	r3, r5
 8008734:	f7f7 fdb2 	bl	800029c <__aeabi_dsub>
 8008738:	a343      	add	r3, pc, #268	; (adr r3, 8008848 <__ieee754_rem_pio2+0x318>)
 800873a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873e:	4604      	mov	r4, r0
 8008740:	460d      	mov	r5, r1
 8008742:	ec51 0b18 	vmov	r0, r1, d8
 8008746:	f7f7 ff61 	bl	800060c <__aeabi_dmul>
 800874a:	4622      	mov	r2, r4
 800874c:	462b      	mov	r3, r5
 800874e:	f7f7 fda5 	bl	800029c <__aeabi_dsub>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	4604      	mov	r4, r0
 8008758:	460d      	mov	r5, r1
 800875a:	4640      	mov	r0, r8
 800875c:	4649      	mov	r1, r9
 800875e:	f7f7 fd9d 	bl	800029c <__aeabi_dsub>
 8008762:	9a03      	ldr	r2, [sp, #12]
 8008764:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	2b31      	cmp	r3, #49	; 0x31
 800876c:	dc24      	bgt.n	80087b8 <__ieee754_rem_pio2+0x288>
 800876e:	e9ca 0100 	strd	r0, r1, [sl]
 8008772:	4646      	mov	r6, r8
 8008774:	464f      	mov	r7, r9
 8008776:	e9da 8900 	ldrd	r8, r9, [sl]
 800877a:	4630      	mov	r0, r6
 800877c:	4642      	mov	r2, r8
 800877e:	464b      	mov	r3, r9
 8008780:	4639      	mov	r1, r7
 8008782:	f7f7 fd8b 	bl	800029c <__aeabi_dsub>
 8008786:	462b      	mov	r3, r5
 8008788:	4622      	mov	r2, r4
 800878a:	f7f7 fd87 	bl	800029c <__aeabi_dsub>
 800878e:	9b02      	ldr	r3, [sp, #8]
 8008790:	2b00      	cmp	r3, #0
 8008792:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008796:	f6bf af0b 	bge.w	80085b0 <__ieee754_rem_pio2+0x80>
 800879a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800879e:	f8ca 3004 	str.w	r3, [sl, #4]
 80087a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087a6:	f8ca 8000 	str.w	r8, [sl]
 80087aa:	f8ca 0008 	str.w	r0, [sl, #8]
 80087ae:	f8ca 300c 	str.w	r3, [sl, #12]
 80087b2:	f1cb 0b00 	rsb	fp, fp, #0
 80087b6:	e6fb      	b.n	80085b0 <__ieee754_rem_pio2+0x80>
 80087b8:	a327      	add	r3, pc, #156	; (adr r3, 8008858 <__ieee754_rem_pio2+0x328>)
 80087ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087be:	ec51 0b18 	vmov	r0, r1, d8
 80087c2:	f7f7 ff23 	bl	800060c <__aeabi_dmul>
 80087c6:	4604      	mov	r4, r0
 80087c8:	460d      	mov	r5, r1
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	4640      	mov	r0, r8
 80087d0:	4649      	mov	r1, r9
 80087d2:	f7f7 fd63 	bl	800029c <__aeabi_dsub>
 80087d6:	4602      	mov	r2, r0
 80087d8:	460b      	mov	r3, r1
 80087da:	4606      	mov	r6, r0
 80087dc:	460f      	mov	r7, r1
 80087de:	4640      	mov	r0, r8
 80087e0:	4649      	mov	r1, r9
 80087e2:	f7f7 fd5b 	bl	800029c <__aeabi_dsub>
 80087e6:	4622      	mov	r2, r4
 80087e8:	462b      	mov	r3, r5
 80087ea:	f7f7 fd57 	bl	800029c <__aeabi_dsub>
 80087ee:	a31c      	add	r3, pc, #112	; (adr r3, 8008860 <__ieee754_rem_pio2+0x330>)
 80087f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f4:	4604      	mov	r4, r0
 80087f6:	460d      	mov	r5, r1
 80087f8:	ec51 0b18 	vmov	r0, r1, d8
 80087fc:	f7f7 ff06 	bl	800060c <__aeabi_dmul>
 8008800:	4622      	mov	r2, r4
 8008802:	462b      	mov	r3, r5
 8008804:	f7f7 fd4a 	bl	800029c <__aeabi_dsub>
 8008808:	4604      	mov	r4, r0
 800880a:	460d      	mov	r5, r1
 800880c:	e760      	b.n	80086d0 <__ieee754_rem_pio2+0x1a0>
 800880e:	4b1c      	ldr	r3, [pc, #112]	; (8008880 <__ieee754_rem_pio2+0x350>)
 8008810:	4598      	cmp	r8, r3
 8008812:	dd37      	ble.n	8008884 <__ieee754_rem_pio2+0x354>
 8008814:	ee10 2a10 	vmov	r2, s0
 8008818:	462b      	mov	r3, r5
 800881a:	4620      	mov	r0, r4
 800881c:	4629      	mov	r1, r5
 800881e:	f7f7 fd3d 	bl	800029c <__aeabi_dsub>
 8008822:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008826:	e9ca 0100 	strd	r0, r1, [sl]
 800882a:	e695      	b.n	8008558 <__ieee754_rem_pio2+0x28>
 800882c:	f3af 8000 	nop.w
 8008830:	54400000 	.word	0x54400000
 8008834:	3ff921fb 	.word	0x3ff921fb
 8008838:	1a626331 	.word	0x1a626331
 800883c:	3dd0b461 	.word	0x3dd0b461
 8008840:	1a600000 	.word	0x1a600000
 8008844:	3dd0b461 	.word	0x3dd0b461
 8008848:	2e037073 	.word	0x2e037073
 800884c:	3ba3198a 	.word	0x3ba3198a
 8008850:	6dc9c883 	.word	0x6dc9c883
 8008854:	3fe45f30 	.word	0x3fe45f30
 8008858:	2e000000 	.word	0x2e000000
 800885c:	3ba3198a 	.word	0x3ba3198a
 8008860:	252049c1 	.word	0x252049c1
 8008864:	397b839a 	.word	0x397b839a
 8008868:	3fe921fb 	.word	0x3fe921fb
 800886c:	4002d97b 	.word	0x4002d97b
 8008870:	3ff921fb 	.word	0x3ff921fb
 8008874:	413921fb 	.word	0x413921fb
 8008878:	3fe00000 	.word	0x3fe00000
 800887c:	0800f170 	.word	0x0800f170
 8008880:	7fefffff 	.word	0x7fefffff
 8008884:	ea4f 5628 	mov.w	r6, r8, asr #20
 8008888:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800888c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8008890:	4620      	mov	r0, r4
 8008892:	460d      	mov	r5, r1
 8008894:	f7f8 f96a 	bl	8000b6c <__aeabi_d2iz>
 8008898:	f7f7 fe4e 	bl	8000538 <__aeabi_i2d>
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	4620      	mov	r0, r4
 80088a2:	4629      	mov	r1, r5
 80088a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088a8:	f7f7 fcf8 	bl	800029c <__aeabi_dsub>
 80088ac:	4b21      	ldr	r3, [pc, #132]	; (8008934 <__ieee754_rem_pio2+0x404>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	f7f7 feac 	bl	800060c <__aeabi_dmul>
 80088b4:	460d      	mov	r5, r1
 80088b6:	4604      	mov	r4, r0
 80088b8:	f7f8 f958 	bl	8000b6c <__aeabi_d2iz>
 80088bc:	f7f7 fe3c 	bl	8000538 <__aeabi_i2d>
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4620      	mov	r0, r4
 80088c6:	4629      	mov	r1, r5
 80088c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80088cc:	f7f7 fce6 	bl	800029c <__aeabi_dsub>
 80088d0:	4b18      	ldr	r3, [pc, #96]	; (8008934 <__ieee754_rem_pio2+0x404>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	f7f7 fe9a 	bl	800060c <__aeabi_dmul>
 80088d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80088dc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80088e0:	2703      	movs	r7, #3
 80088e2:	2400      	movs	r4, #0
 80088e4:	2500      	movs	r5, #0
 80088e6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80088ea:	4622      	mov	r2, r4
 80088ec:	462b      	mov	r3, r5
 80088ee:	46b9      	mov	r9, r7
 80088f0:	3f01      	subs	r7, #1
 80088f2:	f7f8 f8f3 	bl	8000adc <__aeabi_dcmpeq>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d1f5      	bne.n	80088e6 <__ieee754_rem_pio2+0x3b6>
 80088fa:	4b0f      	ldr	r3, [pc, #60]	; (8008938 <__ieee754_rem_pio2+0x408>)
 80088fc:	9301      	str	r3, [sp, #4]
 80088fe:	2302      	movs	r3, #2
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	4632      	mov	r2, r6
 8008904:	464b      	mov	r3, r9
 8008906:	4651      	mov	r1, sl
 8008908:	a804      	add	r0, sp, #16
 800890a:	f000 f841 	bl	8008990 <__kernel_rem_pio2>
 800890e:	9b02      	ldr	r3, [sp, #8]
 8008910:	2b00      	cmp	r3, #0
 8008912:	4683      	mov	fp, r0
 8008914:	f6bf ae4c 	bge.w	80085b0 <__ieee754_rem_pio2+0x80>
 8008918:	e9da 2100 	ldrd	r2, r1, [sl]
 800891c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008920:	e9ca 2300 	strd	r2, r3, [sl]
 8008924:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008928:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800892c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008930:	e73f      	b.n	80087b2 <__ieee754_rem_pio2+0x282>
 8008932:	bf00      	nop
 8008934:	41700000 	.word	0x41700000
 8008938:	0800f1f0 	.word	0x0800f1f0

0800893c <__fpclassifyd>:
 800893c:	ec51 0b10 	vmov	r0, r1, d0
 8008940:	b510      	push	{r4, lr}
 8008942:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8008946:	460b      	mov	r3, r1
 8008948:	d019      	beq.n	800897e <__fpclassifyd+0x42>
 800894a:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 800894e:	490e      	ldr	r1, [pc, #56]	; (8008988 <__fpclassifyd+0x4c>)
 8008950:	428a      	cmp	r2, r1
 8008952:	d90e      	bls.n	8008972 <__fpclassifyd+0x36>
 8008954:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8008958:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800895c:	428a      	cmp	r2, r1
 800895e:	d908      	bls.n	8008972 <__fpclassifyd+0x36>
 8008960:	4a0a      	ldr	r2, [pc, #40]	; (800898c <__fpclassifyd+0x50>)
 8008962:	4213      	tst	r3, r2
 8008964:	d007      	beq.n	8008976 <__fpclassifyd+0x3a>
 8008966:	4294      	cmp	r4, r2
 8008968:	d107      	bne.n	800897a <__fpclassifyd+0x3e>
 800896a:	fab0 f080 	clz	r0, r0
 800896e:	0940      	lsrs	r0, r0, #5
 8008970:	bd10      	pop	{r4, pc}
 8008972:	2004      	movs	r0, #4
 8008974:	e7fc      	b.n	8008970 <__fpclassifyd+0x34>
 8008976:	2003      	movs	r0, #3
 8008978:	e7fa      	b.n	8008970 <__fpclassifyd+0x34>
 800897a:	2000      	movs	r0, #0
 800897c:	e7f8      	b.n	8008970 <__fpclassifyd+0x34>
 800897e:	2800      	cmp	r0, #0
 8008980:	d1ee      	bne.n	8008960 <__fpclassifyd+0x24>
 8008982:	2002      	movs	r0, #2
 8008984:	e7f4      	b.n	8008970 <__fpclassifyd+0x34>
 8008986:	bf00      	nop
 8008988:	7fdfffff 	.word	0x7fdfffff
 800898c:	7ff00000 	.word	0x7ff00000

08008990 <__kernel_rem_pio2>:
 8008990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	ed2d 8b02 	vpush	{d8}
 8008998:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800899c:	f112 0f14 	cmn.w	r2, #20
 80089a0:	9306      	str	r3, [sp, #24]
 80089a2:	9104      	str	r1, [sp, #16]
 80089a4:	4bc2      	ldr	r3, [pc, #776]	; (8008cb0 <__kernel_rem_pio2+0x320>)
 80089a6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80089a8:	9009      	str	r0, [sp, #36]	; 0x24
 80089aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	9b06      	ldr	r3, [sp, #24]
 80089b2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80089b6:	bfa8      	it	ge
 80089b8:	1ed4      	subge	r4, r2, #3
 80089ba:	9305      	str	r3, [sp, #20]
 80089bc:	bfb2      	itee	lt
 80089be:	2400      	movlt	r4, #0
 80089c0:	2318      	movge	r3, #24
 80089c2:	fb94 f4f3 	sdivge	r4, r4, r3
 80089c6:	f06f 0317 	mvn.w	r3, #23
 80089ca:	fb04 3303 	mla	r3, r4, r3, r3
 80089ce:	eb03 0a02 	add.w	sl, r3, r2
 80089d2:	9b00      	ldr	r3, [sp, #0]
 80089d4:	9a05      	ldr	r2, [sp, #20]
 80089d6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008ca0 <__kernel_rem_pio2+0x310>
 80089da:	eb03 0802 	add.w	r8, r3, r2
 80089de:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80089e0:	1aa7      	subs	r7, r4, r2
 80089e2:	ae20      	add	r6, sp, #128	; 0x80
 80089e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80089e8:	2500      	movs	r5, #0
 80089ea:	4545      	cmp	r5, r8
 80089ec:	dd13      	ble.n	8008a16 <__kernel_rem_pio2+0x86>
 80089ee:	9b06      	ldr	r3, [sp, #24]
 80089f0:	aa20      	add	r2, sp, #128	; 0x80
 80089f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80089f6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80089fa:	f04f 0800 	mov.w	r8, #0
 80089fe:	9b00      	ldr	r3, [sp, #0]
 8008a00:	4598      	cmp	r8, r3
 8008a02:	dc31      	bgt.n	8008a68 <__kernel_rem_pio2+0xd8>
 8008a04:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008ca0 <__kernel_rem_pio2+0x310>
 8008a08:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008a0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a10:	462f      	mov	r7, r5
 8008a12:	2600      	movs	r6, #0
 8008a14:	e01b      	b.n	8008a4e <__kernel_rem_pio2+0xbe>
 8008a16:	42ef      	cmn	r7, r5
 8008a18:	d407      	bmi.n	8008a2a <__kernel_rem_pio2+0x9a>
 8008a1a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008a1e:	f7f7 fd8b 	bl	8000538 <__aeabi_i2d>
 8008a22:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008a26:	3501      	adds	r5, #1
 8008a28:	e7df      	b.n	80089ea <__kernel_rem_pio2+0x5a>
 8008a2a:	ec51 0b18 	vmov	r0, r1, d8
 8008a2e:	e7f8      	b.n	8008a22 <__kernel_rem_pio2+0x92>
 8008a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a34:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008a38:	f7f7 fde8 	bl	800060c <__aeabi_dmul>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a44:	f7f7 fc2c 	bl	80002a0 <__adddf3>
 8008a48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a4c:	3601      	adds	r6, #1
 8008a4e:	9b05      	ldr	r3, [sp, #20]
 8008a50:	429e      	cmp	r6, r3
 8008a52:	f1a7 0708 	sub.w	r7, r7, #8
 8008a56:	ddeb      	ble.n	8008a30 <__kernel_rem_pio2+0xa0>
 8008a58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a5c:	f108 0801 	add.w	r8, r8, #1
 8008a60:	ecab 7b02 	vstmia	fp!, {d7}
 8008a64:	3508      	adds	r5, #8
 8008a66:	e7ca      	b.n	80089fe <__kernel_rem_pio2+0x6e>
 8008a68:	9b00      	ldr	r3, [sp, #0]
 8008a6a:	aa0c      	add	r2, sp, #48	; 0x30
 8008a6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a70:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a72:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008a74:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008a78:	9c00      	ldr	r4, [sp, #0]
 8008a7a:	930a      	str	r3, [sp, #40]	; 0x28
 8008a7c:	00e3      	lsls	r3, r4, #3
 8008a7e:	9308      	str	r3, [sp, #32]
 8008a80:	ab98      	add	r3, sp, #608	; 0x260
 8008a82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a86:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008a8a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8008a8e:	ab70      	add	r3, sp, #448	; 0x1c0
 8008a90:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008a94:	46c3      	mov	fp, r8
 8008a96:	46a1      	mov	r9, r4
 8008a98:	f1b9 0f00 	cmp.w	r9, #0
 8008a9c:	f1a5 0508 	sub.w	r5, r5, #8
 8008aa0:	dc77      	bgt.n	8008b92 <__kernel_rem_pio2+0x202>
 8008aa2:	ec47 6b10 	vmov	d0, r6, r7
 8008aa6:	4650      	mov	r0, sl
 8008aa8:	f000 fc52 	bl	8009350 <scalbn>
 8008aac:	ec57 6b10 	vmov	r6, r7, d0
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008ab6:	ee10 0a10 	vmov	r0, s0
 8008aba:	4639      	mov	r1, r7
 8008abc:	f7f7 fda6 	bl	800060c <__aeabi_dmul>
 8008ac0:	ec41 0b10 	vmov	d0, r0, r1
 8008ac4:	f7ff fb34 	bl	8008130 <floor>
 8008ac8:	4b7a      	ldr	r3, [pc, #488]	; (8008cb4 <__kernel_rem_pio2+0x324>)
 8008aca:	ec51 0b10 	vmov	r0, r1, d0
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f7f7 fd9c 	bl	800060c <__aeabi_dmul>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	4630      	mov	r0, r6
 8008ada:	4639      	mov	r1, r7
 8008adc:	f7f7 fbde 	bl	800029c <__aeabi_dsub>
 8008ae0:	460f      	mov	r7, r1
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	f7f8 f842 	bl	8000b6c <__aeabi_d2iz>
 8008ae8:	9002      	str	r0, [sp, #8]
 8008aea:	f7f7 fd25 	bl	8000538 <__aeabi_i2d>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4630      	mov	r0, r6
 8008af4:	4639      	mov	r1, r7
 8008af6:	f7f7 fbd1 	bl	800029c <__aeabi_dsub>
 8008afa:	f1ba 0f00 	cmp.w	sl, #0
 8008afe:	4606      	mov	r6, r0
 8008b00:	460f      	mov	r7, r1
 8008b02:	dd6d      	ble.n	8008be0 <__kernel_rem_pio2+0x250>
 8008b04:	1e61      	subs	r1, r4, #1
 8008b06:	ab0c      	add	r3, sp, #48	; 0x30
 8008b08:	9d02      	ldr	r5, [sp, #8]
 8008b0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b0e:	f1ca 0018 	rsb	r0, sl, #24
 8008b12:	fa43 f200 	asr.w	r2, r3, r0
 8008b16:	4415      	add	r5, r2
 8008b18:	4082      	lsls	r2, r0
 8008b1a:	1a9b      	subs	r3, r3, r2
 8008b1c:	aa0c      	add	r2, sp, #48	; 0x30
 8008b1e:	9502      	str	r5, [sp, #8]
 8008b20:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008b24:	f1ca 0217 	rsb	r2, sl, #23
 8008b28:	fa43 fb02 	asr.w	fp, r3, r2
 8008b2c:	f1bb 0f00 	cmp.w	fp, #0
 8008b30:	dd65      	ble.n	8008bfe <__kernel_rem_pio2+0x26e>
 8008b32:	9b02      	ldr	r3, [sp, #8]
 8008b34:	2200      	movs	r2, #0
 8008b36:	3301      	adds	r3, #1
 8008b38:	9302      	str	r3, [sp, #8]
 8008b3a:	4615      	mov	r5, r2
 8008b3c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008b40:	4294      	cmp	r4, r2
 8008b42:	f300 809f 	bgt.w	8008c84 <__kernel_rem_pio2+0x2f4>
 8008b46:	f1ba 0f00 	cmp.w	sl, #0
 8008b4a:	dd07      	ble.n	8008b5c <__kernel_rem_pio2+0x1cc>
 8008b4c:	f1ba 0f01 	cmp.w	sl, #1
 8008b50:	f000 80c1 	beq.w	8008cd6 <__kernel_rem_pio2+0x346>
 8008b54:	f1ba 0f02 	cmp.w	sl, #2
 8008b58:	f000 80c7 	beq.w	8008cea <__kernel_rem_pio2+0x35a>
 8008b5c:	f1bb 0f02 	cmp.w	fp, #2
 8008b60:	d14d      	bne.n	8008bfe <__kernel_rem_pio2+0x26e>
 8008b62:	4632      	mov	r2, r6
 8008b64:	463b      	mov	r3, r7
 8008b66:	4954      	ldr	r1, [pc, #336]	; (8008cb8 <__kernel_rem_pio2+0x328>)
 8008b68:	2000      	movs	r0, #0
 8008b6a:	f7f7 fb97 	bl	800029c <__aeabi_dsub>
 8008b6e:	4606      	mov	r6, r0
 8008b70:	460f      	mov	r7, r1
 8008b72:	2d00      	cmp	r5, #0
 8008b74:	d043      	beq.n	8008bfe <__kernel_rem_pio2+0x26e>
 8008b76:	4650      	mov	r0, sl
 8008b78:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8008ca8 <__kernel_rem_pio2+0x318>
 8008b7c:	f000 fbe8 	bl	8009350 <scalbn>
 8008b80:	4630      	mov	r0, r6
 8008b82:	4639      	mov	r1, r7
 8008b84:	ec53 2b10 	vmov	r2, r3, d0
 8008b88:	f7f7 fb88 	bl	800029c <__aeabi_dsub>
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	460f      	mov	r7, r1
 8008b90:	e035      	b.n	8008bfe <__kernel_rem_pio2+0x26e>
 8008b92:	4b4a      	ldr	r3, [pc, #296]	; (8008cbc <__kernel_rem_pio2+0x32c>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	4630      	mov	r0, r6
 8008b98:	4639      	mov	r1, r7
 8008b9a:	f7f7 fd37 	bl	800060c <__aeabi_dmul>
 8008b9e:	f7f7 ffe5 	bl	8000b6c <__aeabi_d2iz>
 8008ba2:	f7f7 fcc9 	bl	8000538 <__aeabi_i2d>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	ec43 2b18 	vmov	d8, r2, r3
 8008bae:	4b44      	ldr	r3, [pc, #272]	; (8008cc0 <__kernel_rem_pio2+0x330>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f7f7 fd2b 	bl	800060c <__aeabi_dmul>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	4630      	mov	r0, r6
 8008bbc:	4639      	mov	r1, r7
 8008bbe:	f7f7 fb6d 	bl	800029c <__aeabi_dsub>
 8008bc2:	f7f7 ffd3 	bl	8000b6c <__aeabi_d2iz>
 8008bc6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008bca:	f84b 0b04 	str.w	r0, [fp], #4
 8008bce:	ec51 0b18 	vmov	r0, r1, d8
 8008bd2:	f7f7 fb65 	bl	80002a0 <__adddf3>
 8008bd6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008bda:	4606      	mov	r6, r0
 8008bdc:	460f      	mov	r7, r1
 8008bde:	e75b      	b.n	8008a98 <__kernel_rem_pio2+0x108>
 8008be0:	d106      	bne.n	8008bf0 <__kernel_rem_pio2+0x260>
 8008be2:	1e63      	subs	r3, r4, #1
 8008be4:	aa0c      	add	r2, sp, #48	; 0x30
 8008be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bea:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8008bee:	e79d      	b.n	8008b2c <__kernel_rem_pio2+0x19c>
 8008bf0:	4b34      	ldr	r3, [pc, #208]	; (8008cc4 <__kernel_rem_pio2+0x334>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f7f7 ff90 	bl	8000b18 <__aeabi_dcmpge>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d140      	bne.n	8008c7e <__kernel_rem_pio2+0x2ee>
 8008bfc:	4683      	mov	fp, r0
 8008bfe:	2200      	movs	r2, #0
 8008c00:	2300      	movs	r3, #0
 8008c02:	4630      	mov	r0, r6
 8008c04:	4639      	mov	r1, r7
 8008c06:	f7f7 ff69 	bl	8000adc <__aeabi_dcmpeq>
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	f000 80c1 	beq.w	8008d92 <__kernel_rem_pio2+0x402>
 8008c10:	1e65      	subs	r5, r4, #1
 8008c12:	462b      	mov	r3, r5
 8008c14:	2200      	movs	r2, #0
 8008c16:	9900      	ldr	r1, [sp, #0]
 8008c18:	428b      	cmp	r3, r1
 8008c1a:	da6d      	bge.n	8008cf8 <__kernel_rem_pio2+0x368>
 8008c1c:	2a00      	cmp	r2, #0
 8008c1e:	f000 808a 	beq.w	8008d36 <__kernel_rem_pio2+0x3a6>
 8008c22:	ab0c      	add	r3, sp, #48	; 0x30
 8008c24:	f1aa 0a18 	sub.w	sl, sl, #24
 8008c28:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f000 80ae 	beq.w	8008d8e <__kernel_rem_pio2+0x3fe>
 8008c32:	4650      	mov	r0, sl
 8008c34:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008ca8 <__kernel_rem_pio2+0x318>
 8008c38:	f000 fb8a 	bl	8009350 <scalbn>
 8008c3c:	1c6b      	adds	r3, r5, #1
 8008c3e:	00da      	lsls	r2, r3, #3
 8008c40:	9205      	str	r2, [sp, #20]
 8008c42:	ec57 6b10 	vmov	r6, r7, d0
 8008c46:	aa70      	add	r2, sp, #448	; 0x1c0
 8008c48:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008cbc <__kernel_rem_pio2+0x32c>
 8008c4c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8008c50:	462c      	mov	r4, r5
 8008c52:	f04f 0800 	mov.w	r8, #0
 8008c56:	2c00      	cmp	r4, #0
 8008c58:	f280 80d4 	bge.w	8008e04 <__kernel_rem_pio2+0x474>
 8008c5c:	462c      	mov	r4, r5
 8008c5e:	2c00      	cmp	r4, #0
 8008c60:	f2c0 8102 	blt.w	8008e68 <__kernel_rem_pio2+0x4d8>
 8008c64:	4b18      	ldr	r3, [pc, #96]	; (8008cc8 <__kernel_rem_pio2+0x338>)
 8008c66:	461e      	mov	r6, r3
 8008c68:	ab70      	add	r3, sp, #448	; 0x1c0
 8008c6a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8008c6e:	1b2b      	subs	r3, r5, r4
 8008c70:	f04f 0900 	mov.w	r9, #0
 8008c74:	f04f 0a00 	mov.w	sl, #0
 8008c78:	2700      	movs	r7, #0
 8008c7a:	9306      	str	r3, [sp, #24]
 8008c7c:	e0e6      	b.n	8008e4c <__kernel_rem_pio2+0x4bc>
 8008c7e:	f04f 0b02 	mov.w	fp, #2
 8008c82:	e756      	b.n	8008b32 <__kernel_rem_pio2+0x1a2>
 8008c84:	f8d8 3000 	ldr.w	r3, [r8]
 8008c88:	bb05      	cbnz	r5, 8008ccc <__kernel_rem_pio2+0x33c>
 8008c8a:	b123      	cbz	r3, 8008c96 <__kernel_rem_pio2+0x306>
 8008c8c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008c90:	f8c8 3000 	str.w	r3, [r8]
 8008c94:	2301      	movs	r3, #1
 8008c96:	3201      	adds	r2, #1
 8008c98:	f108 0804 	add.w	r8, r8, #4
 8008c9c:	461d      	mov	r5, r3
 8008c9e:	e74f      	b.n	8008b40 <__kernel_rem_pio2+0x1b0>
	...
 8008cac:	3ff00000 	.word	0x3ff00000
 8008cb0:	0800f338 	.word	0x0800f338
 8008cb4:	40200000 	.word	0x40200000
 8008cb8:	3ff00000 	.word	0x3ff00000
 8008cbc:	3e700000 	.word	0x3e700000
 8008cc0:	41700000 	.word	0x41700000
 8008cc4:	3fe00000 	.word	0x3fe00000
 8008cc8:	0800f2f8 	.word	0x0800f2f8
 8008ccc:	1acb      	subs	r3, r1, r3
 8008cce:	f8c8 3000 	str.w	r3, [r8]
 8008cd2:	462b      	mov	r3, r5
 8008cd4:	e7df      	b.n	8008c96 <__kernel_rem_pio2+0x306>
 8008cd6:	1e62      	subs	r2, r4, #1
 8008cd8:	ab0c      	add	r3, sp, #48	; 0x30
 8008cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cde:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008ce2:	a90c      	add	r1, sp, #48	; 0x30
 8008ce4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008ce8:	e738      	b.n	8008b5c <__kernel_rem_pio2+0x1cc>
 8008cea:	1e62      	subs	r2, r4, #1
 8008cec:	ab0c      	add	r3, sp, #48	; 0x30
 8008cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008cf6:	e7f4      	b.n	8008ce2 <__kernel_rem_pio2+0x352>
 8008cf8:	a90c      	add	r1, sp, #48	; 0x30
 8008cfa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	430a      	orrs	r2, r1
 8008d02:	e788      	b.n	8008c16 <__kernel_rem_pio2+0x286>
 8008d04:	3301      	adds	r3, #1
 8008d06:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008d0a:	2900      	cmp	r1, #0
 8008d0c:	d0fa      	beq.n	8008d04 <__kernel_rem_pio2+0x374>
 8008d0e:	9a08      	ldr	r2, [sp, #32]
 8008d10:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8008d14:	446a      	add	r2, sp
 8008d16:	3a98      	subs	r2, #152	; 0x98
 8008d18:	9208      	str	r2, [sp, #32]
 8008d1a:	9a06      	ldr	r2, [sp, #24]
 8008d1c:	a920      	add	r1, sp, #128	; 0x80
 8008d1e:	18a2      	adds	r2, r4, r2
 8008d20:	18e3      	adds	r3, r4, r3
 8008d22:	f104 0801 	add.w	r8, r4, #1
 8008d26:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8008d2a:	9302      	str	r3, [sp, #8]
 8008d2c:	9b02      	ldr	r3, [sp, #8]
 8008d2e:	4543      	cmp	r3, r8
 8008d30:	da04      	bge.n	8008d3c <__kernel_rem_pio2+0x3ac>
 8008d32:	461c      	mov	r4, r3
 8008d34:	e6a2      	b.n	8008a7c <__kernel_rem_pio2+0xec>
 8008d36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e7e4      	b.n	8008d06 <__kernel_rem_pio2+0x376>
 8008d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d3e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008d42:	f7f7 fbf9 	bl	8000538 <__aeabi_i2d>
 8008d46:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d4c:	46ab      	mov	fp, r5
 8008d4e:	461c      	mov	r4, r3
 8008d50:	f04f 0900 	mov.w	r9, #0
 8008d54:	2600      	movs	r6, #0
 8008d56:	2700      	movs	r7, #0
 8008d58:	9b05      	ldr	r3, [sp, #20]
 8008d5a:	4599      	cmp	r9, r3
 8008d5c:	dd06      	ble.n	8008d6c <__kernel_rem_pio2+0x3dc>
 8008d5e:	9b08      	ldr	r3, [sp, #32]
 8008d60:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008d64:	f108 0801 	add.w	r8, r8, #1
 8008d68:	9308      	str	r3, [sp, #32]
 8008d6a:	e7df      	b.n	8008d2c <__kernel_rem_pio2+0x39c>
 8008d6c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008d70:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008d74:	f7f7 fc4a 	bl	800060c <__aeabi_dmul>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	4639      	mov	r1, r7
 8008d80:	f7f7 fa8e 	bl	80002a0 <__adddf3>
 8008d84:	f109 0901 	add.w	r9, r9, #1
 8008d88:	4606      	mov	r6, r0
 8008d8a:	460f      	mov	r7, r1
 8008d8c:	e7e4      	b.n	8008d58 <__kernel_rem_pio2+0x3c8>
 8008d8e:	3d01      	subs	r5, #1
 8008d90:	e747      	b.n	8008c22 <__kernel_rem_pio2+0x292>
 8008d92:	ec47 6b10 	vmov	d0, r6, r7
 8008d96:	f1ca 0000 	rsb	r0, sl, #0
 8008d9a:	f000 fad9 	bl	8009350 <scalbn>
 8008d9e:	ec57 6b10 	vmov	r6, r7, d0
 8008da2:	4ba0      	ldr	r3, [pc, #640]	; (8009024 <__kernel_rem_pio2+0x694>)
 8008da4:	ee10 0a10 	vmov	r0, s0
 8008da8:	2200      	movs	r2, #0
 8008daa:	4639      	mov	r1, r7
 8008dac:	f7f7 feb4 	bl	8000b18 <__aeabi_dcmpge>
 8008db0:	b1f8      	cbz	r0, 8008df2 <__kernel_rem_pio2+0x462>
 8008db2:	4b9d      	ldr	r3, [pc, #628]	; (8009028 <__kernel_rem_pio2+0x698>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	4630      	mov	r0, r6
 8008db8:	4639      	mov	r1, r7
 8008dba:	f7f7 fc27 	bl	800060c <__aeabi_dmul>
 8008dbe:	f7f7 fed5 	bl	8000b6c <__aeabi_d2iz>
 8008dc2:	4680      	mov	r8, r0
 8008dc4:	f7f7 fbb8 	bl	8000538 <__aeabi_i2d>
 8008dc8:	4b96      	ldr	r3, [pc, #600]	; (8009024 <__kernel_rem_pio2+0x694>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f7f7 fc1e 	bl	800060c <__aeabi_dmul>
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	4639      	mov	r1, r7
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	f7f7 fa60 	bl	800029c <__aeabi_dsub>
 8008ddc:	f7f7 fec6 	bl	8000b6c <__aeabi_d2iz>
 8008de0:	1c65      	adds	r5, r4, #1
 8008de2:	ab0c      	add	r3, sp, #48	; 0x30
 8008de4:	f10a 0a18 	add.w	sl, sl, #24
 8008de8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008dec:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008df0:	e71f      	b.n	8008c32 <__kernel_rem_pio2+0x2a2>
 8008df2:	4630      	mov	r0, r6
 8008df4:	4639      	mov	r1, r7
 8008df6:	f7f7 feb9 	bl	8000b6c <__aeabi_d2iz>
 8008dfa:	ab0c      	add	r3, sp, #48	; 0x30
 8008dfc:	4625      	mov	r5, r4
 8008dfe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008e02:	e716      	b.n	8008c32 <__kernel_rem_pio2+0x2a2>
 8008e04:	ab0c      	add	r3, sp, #48	; 0x30
 8008e06:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008e0a:	f7f7 fb95 	bl	8000538 <__aeabi_i2d>
 8008e0e:	4632      	mov	r2, r6
 8008e10:	463b      	mov	r3, r7
 8008e12:	f7f7 fbfb 	bl	800060c <__aeabi_dmul>
 8008e16:	4642      	mov	r2, r8
 8008e18:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008e1c:	464b      	mov	r3, r9
 8008e1e:	4630      	mov	r0, r6
 8008e20:	4639      	mov	r1, r7
 8008e22:	f7f7 fbf3 	bl	800060c <__aeabi_dmul>
 8008e26:	3c01      	subs	r4, #1
 8008e28:	4606      	mov	r6, r0
 8008e2a:	460f      	mov	r7, r1
 8008e2c:	e713      	b.n	8008c56 <__kernel_rem_pio2+0x2c6>
 8008e2e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8008e32:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8008e36:	f7f7 fbe9 	bl	800060c <__aeabi_dmul>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	4648      	mov	r0, r9
 8008e40:	4651      	mov	r1, sl
 8008e42:	f7f7 fa2d 	bl	80002a0 <__adddf3>
 8008e46:	3701      	adds	r7, #1
 8008e48:	4681      	mov	r9, r0
 8008e4a:	468a      	mov	sl, r1
 8008e4c:	9b00      	ldr	r3, [sp, #0]
 8008e4e:	429f      	cmp	r7, r3
 8008e50:	dc02      	bgt.n	8008e58 <__kernel_rem_pio2+0x4c8>
 8008e52:	9b06      	ldr	r3, [sp, #24]
 8008e54:	429f      	cmp	r7, r3
 8008e56:	ddea      	ble.n	8008e2e <__kernel_rem_pio2+0x49e>
 8008e58:	9a06      	ldr	r2, [sp, #24]
 8008e5a:	ab48      	add	r3, sp, #288	; 0x120
 8008e5c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8008e60:	e9c6 9a00 	strd	r9, sl, [r6]
 8008e64:	3c01      	subs	r4, #1
 8008e66:	e6fa      	b.n	8008c5e <__kernel_rem_pio2+0x2ce>
 8008e68:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	dc0b      	bgt.n	8008e86 <__kernel_rem_pio2+0x4f6>
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	dc39      	bgt.n	8008ee6 <__kernel_rem_pio2+0x556>
 8008e72:	d05d      	beq.n	8008f30 <__kernel_rem_pio2+0x5a0>
 8008e74:	9b02      	ldr	r3, [sp, #8]
 8008e76:	f003 0007 	and.w	r0, r3, #7
 8008e7a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008e7e:	ecbd 8b02 	vpop	{d8}
 8008e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e86:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008e88:	2b03      	cmp	r3, #3
 8008e8a:	d1f3      	bne.n	8008e74 <__kernel_rem_pio2+0x4e4>
 8008e8c:	9b05      	ldr	r3, [sp, #20]
 8008e8e:	9500      	str	r5, [sp, #0]
 8008e90:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008e94:	eb0d 0403 	add.w	r4, sp, r3
 8008e98:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8008e9c:	46a2      	mov	sl, r4
 8008e9e:	9b00      	ldr	r3, [sp, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f1aa 0a08 	sub.w	sl, sl, #8
 8008ea6:	dc69      	bgt.n	8008f7c <__kernel_rem_pio2+0x5ec>
 8008ea8:	46aa      	mov	sl, r5
 8008eaa:	f1ba 0f01 	cmp.w	sl, #1
 8008eae:	f1a4 0408 	sub.w	r4, r4, #8
 8008eb2:	f300 8083 	bgt.w	8008fbc <__kernel_rem_pio2+0x62c>
 8008eb6:	9c05      	ldr	r4, [sp, #20]
 8008eb8:	ab48      	add	r3, sp, #288	; 0x120
 8008eba:	441c      	add	r4, r3
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	2d01      	cmp	r5, #1
 8008ec2:	f300 809a 	bgt.w	8008ffa <__kernel_rem_pio2+0x66a>
 8008ec6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8008eca:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008ece:	f1bb 0f00 	cmp.w	fp, #0
 8008ed2:	f040 8098 	bne.w	8009006 <__kernel_rem_pio2+0x676>
 8008ed6:	9b04      	ldr	r3, [sp, #16]
 8008ed8:	e9c3 7800 	strd	r7, r8, [r3]
 8008edc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008ee0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008ee4:	e7c6      	b.n	8008e74 <__kernel_rem_pio2+0x4e4>
 8008ee6:	9e05      	ldr	r6, [sp, #20]
 8008ee8:	ab48      	add	r3, sp, #288	; 0x120
 8008eea:	441e      	add	r6, r3
 8008eec:	462c      	mov	r4, r5
 8008eee:	2000      	movs	r0, #0
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	2c00      	cmp	r4, #0
 8008ef4:	da33      	bge.n	8008f5e <__kernel_rem_pio2+0x5ce>
 8008ef6:	f1bb 0f00 	cmp.w	fp, #0
 8008efa:	d036      	beq.n	8008f6a <__kernel_rem_pio2+0x5da>
 8008efc:	4602      	mov	r2, r0
 8008efe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f02:	9c04      	ldr	r4, [sp, #16]
 8008f04:	e9c4 2300 	strd	r2, r3, [r4]
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008f10:	f7f7 f9c4 	bl	800029c <__aeabi_dsub>
 8008f14:	ae4a      	add	r6, sp, #296	; 0x128
 8008f16:	2401      	movs	r4, #1
 8008f18:	42a5      	cmp	r5, r4
 8008f1a:	da29      	bge.n	8008f70 <__kernel_rem_pio2+0x5e0>
 8008f1c:	f1bb 0f00 	cmp.w	fp, #0
 8008f20:	d002      	beq.n	8008f28 <__kernel_rem_pio2+0x598>
 8008f22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f26:	4619      	mov	r1, r3
 8008f28:	9b04      	ldr	r3, [sp, #16]
 8008f2a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008f2e:	e7a1      	b.n	8008e74 <__kernel_rem_pio2+0x4e4>
 8008f30:	9c05      	ldr	r4, [sp, #20]
 8008f32:	ab48      	add	r3, sp, #288	; 0x120
 8008f34:	441c      	add	r4, r3
 8008f36:	2000      	movs	r0, #0
 8008f38:	2100      	movs	r1, #0
 8008f3a:	2d00      	cmp	r5, #0
 8008f3c:	da09      	bge.n	8008f52 <__kernel_rem_pio2+0x5c2>
 8008f3e:	f1bb 0f00 	cmp.w	fp, #0
 8008f42:	d002      	beq.n	8008f4a <__kernel_rem_pio2+0x5ba>
 8008f44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f48:	4619      	mov	r1, r3
 8008f4a:	9b04      	ldr	r3, [sp, #16]
 8008f4c:	e9c3 0100 	strd	r0, r1, [r3]
 8008f50:	e790      	b.n	8008e74 <__kernel_rem_pio2+0x4e4>
 8008f52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008f56:	f7f7 f9a3 	bl	80002a0 <__adddf3>
 8008f5a:	3d01      	subs	r5, #1
 8008f5c:	e7ed      	b.n	8008f3a <__kernel_rem_pio2+0x5aa>
 8008f5e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008f62:	f7f7 f99d 	bl	80002a0 <__adddf3>
 8008f66:	3c01      	subs	r4, #1
 8008f68:	e7c3      	b.n	8008ef2 <__kernel_rem_pio2+0x562>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	e7c8      	b.n	8008f02 <__kernel_rem_pio2+0x572>
 8008f70:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008f74:	f7f7 f994 	bl	80002a0 <__adddf3>
 8008f78:	3401      	adds	r4, #1
 8008f7a:	e7cd      	b.n	8008f18 <__kernel_rem_pio2+0x588>
 8008f7c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008f80:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008f84:	9b00      	ldr	r3, [sp, #0]
 8008f86:	3b01      	subs	r3, #1
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	4632      	mov	r2, r6
 8008f8c:	463b      	mov	r3, r7
 8008f8e:	4640      	mov	r0, r8
 8008f90:	4649      	mov	r1, r9
 8008f92:	f7f7 f985 	bl	80002a0 <__adddf3>
 8008f96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4640      	mov	r0, r8
 8008fa0:	4649      	mov	r1, r9
 8008fa2:	f7f7 f97b 	bl	800029c <__aeabi_dsub>
 8008fa6:	4632      	mov	r2, r6
 8008fa8:	463b      	mov	r3, r7
 8008faa:	f7f7 f979 	bl	80002a0 <__adddf3>
 8008fae:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008fb2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008fb6:	ed8a 7b00 	vstr	d7, [sl]
 8008fba:	e770      	b.n	8008e9e <__kernel_rem_pio2+0x50e>
 8008fbc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008fc0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008fc4:	4640      	mov	r0, r8
 8008fc6:	4632      	mov	r2, r6
 8008fc8:	463b      	mov	r3, r7
 8008fca:	4649      	mov	r1, r9
 8008fcc:	f7f7 f968 	bl	80002a0 <__adddf3>
 8008fd0:	e9cd 0100 	strd	r0, r1, [sp]
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4640      	mov	r0, r8
 8008fda:	4649      	mov	r1, r9
 8008fdc:	f7f7 f95e 	bl	800029c <__aeabi_dsub>
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	f7f7 f95c 	bl	80002a0 <__adddf3>
 8008fe8:	ed9d 7b00 	vldr	d7, [sp]
 8008fec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008ff0:	ed84 7b00 	vstr	d7, [r4]
 8008ff4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008ff8:	e757      	b.n	8008eaa <__kernel_rem_pio2+0x51a>
 8008ffa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008ffe:	f7f7 f94f 	bl	80002a0 <__adddf3>
 8009002:	3d01      	subs	r5, #1
 8009004:	e75c      	b.n	8008ec0 <__kernel_rem_pio2+0x530>
 8009006:	9b04      	ldr	r3, [sp, #16]
 8009008:	9a04      	ldr	r2, [sp, #16]
 800900a:	601f      	str	r7, [r3, #0]
 800900c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8009010:	605c      	str	r4, [r3, #4]
 8009012:	609d      	str	r5, [r3, #8]
 8009014:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009018:	60d3      	str	r3, [r2, #12]
 800901a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800901e:	6110      	str	r0, [r2, #16]
 8009020:	6153      	str	r3, [r2, #20]
 8009022:	e727      	b.n	8008e74 <__kernel_rem_pio2+0x4e4>
 8009024:	41700000 	.word	0x41700000
 8009028:	3e700000 	.word	0x3e700000
 800902c:	00000000 	.word	0x00000000

08009030 <__kernel_cos>:
 8009030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	ec57 6b10 	vmov	r6, r7, d0
 8009038:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800903c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009040:	ed8d 1b00 	vstr	d1, [sp]
 8009044:	da07      	bge.n	8009056 <__kernel_cos+0x26>
 8009046:	ee10 0a10 	vmov	r0, s0
 800904a:	4639      	mov	r1, r7
 800904c:	f7f7 fd8e 	bl	8000b6c <__aeabi_d2iz>
 8009050:	2800      	cmp	r0, #0
 8009052:	f000 8088 	beq.w	8009166 <__kernel_cos+0x136>
 8009056:	4632      	mov	r2, r6
 8009058:	463b      	mov	r3, r7
 800905a:	4630      	mov	r0, r6
 800905c:	4639      	mov	r1, r7
 800905e:	f7f7 fad5 	bl	800060c <__aeabi_dmul>
 8009062:	4b51      	ldr	r3, [pc, #324]	; (80091a8 <__kernel_cos+0x178>)
 8009064:	2200      	movs	r2, #0
 8009066:	4604      	mov	r4, r0
 8009068:	460d      	mov	r5, r1
 800906a:	f7f7 facf 	bl	800060c <__aeabi_dmul>
 800906e:	a340      	add	r3, pc, #256	; (adr r3, 8009170 <__kernel_cos+0x140>)
 8009070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009074:	4682      	mov	sl, r0
 8009076:	468b      	mov	fp, r1
 8009078:	4620      	mov	r0, r4
 800907a:	4629      	mov	r1, r5
 800907c:	f7f7 fac6 	bl	800060c <__aeabi_dmul>
 8009080:	a33d      	add	r3, pc, #244	; (adr r3, 8009178 <__kernel_cos+0x148>)
 8009082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009086:	f7f7 f90b 	bl	80002a0 <__adddf3>
 800908a:	4622      	mov	r2, r4
 800908c:	462b      	mov	r3, r5
 800908e:	f7f7 fabd 	bl	800060c <__aeabi_dmul>
 8009092:	a33b      	add	r3, pc, #236	; (adr r3, 8009180 <__kernel_cos+0x150>)
 8009094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009098:	f7f7 f900 	bl	800029c <__aeabi_dsub>
 800909c:	4622      	mov	r2, r4
 800909e:	462b      	mov	r3, r5
 80090a0:	f7f7 fab4 	bl	800060c <__aeabi_dmul>
 80090a4:	a338      	add	r3, pc, #224	; (adr r3, 8009188 <__kernel_cos+0x158>)
 80090a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090aa:	f7f7 f8f9 	bl	80002a0 <__adddf3>
 80090ae:	4622      	mov	r2, r4
 80090b0:	462b      	mov	r3, r5
 80090b2:	f7f7 faab 	bl	800060c <__aeabi_dmul>
 80090b6:	a336      	add	r3, pc, #216	; (adr r3, 8009190 <__kernel_cos+0x160>)
 80090b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090bc:	f7f7 f8ee 	bl	800029c <__aeabi_dsub>
 80090c0:	4622      	mov	r2, r4
 80090c2:	462b      	mov	r3, r5
 80090c4:	f7f7 faa2 	bl	800060c <__aeabi_dmul>
 80090c8:	a333      	add	r3, pc, #204	; (adr r3, 8009198 <__kernel_cos+0x168>)
 80090ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ce:	f7f7 f8e7 	bl	80002a0 <__adddf3>
 80090d2:	4622      	mov	r2, r4
 80090d4:	462b      	mov	r3, r5
 80090d6:	f7f7 fa99 	bl	800060c <__aeabi_dmul>
 80090da:	4622      	mov	r2, r4
 80090dc:	462b      	mov	r3, r5
 80090de:	f7f7 fa95 	bl	800060c <__aeabi_dmul>
 80090e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090e6:	4604      	mov	r4, r0
 80090e8:	460d      	mov	r5, r1
 80090ea:	4630      	mov	r0, r6
 80090ec:	4639      	mov	r1, r7
 80090ee:	f7f7 fa8d 	bl	800060c <__aeabi_dmul>
 80090f2:	460b      	mov	r3, r1
 80090f4:	4602      	mov	r2, r0
 80090f6:	4629      	mov	r1, r5
 80090f8:	4620      	mov	r0, r4
 80090fa:	f7f7 f8cf 	bl	800029c <__aeabi_dsub>
 80090fe:	4b2b      	ldr	r3, [pc, #172]	; (80091ac <__kernel_cos+0x17c>)
 8009100:	4598      	cmp	r8, r3
 8009102:	4606      	mov	r6, r0
 8009104:	460f      	mov	r7, r1
 8009106:	dc10      	bgt.n	800912a <__kernel_cos+0xfa>
 8009108:	4602      	mov	r2, r0
 800910a:	460b      	mov	r3, r1
 800910c:	4650      	mov	r0, sl
 800910e:	4659      	mov	r1, fp
 8009110:	f7f7 f8c4 	bl	800029c <__aeabi_dsub>
 8009114:	460b      	mov	r3, r1
 8009116:	4926      	ldr	r1, [pc, #152]	; (80091b0 <__kernel_cos+0x180>)
 8009118:	4602      	mov	r2, r0
 800911a:	2000      	movs	r0, #0
 800911c:	f7f7 f8be 	bl	800029c <__aeabi_dsub>
 8009120:	ec41 0b10 	vmov	d0, r0, r1
 8009124:	b003      	add	sp, #12
 8009126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800912a:	4b22      	ldr	r3, [pc, #136]	; (80091b4 <__kernel_cos+0x184>)
 800912c:	4920      	ldr	r1, [pc, #128]	; (80091b0 <__kernel_cos+0x180>)
 800912e:	4598      	cmp	r8, r3
 8009130:	bfcc      	ite	gt
 8009132:	4d21      	ldrgt	r5, [pc, #132]	; (80091b8 <__kernel_cos+0x188>)
 8009134:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009138:	2400      	movs	r4, #0
 800913a:	4622      	mov	r2, r4
 800913c:	462b      	mov	r3, r5
 800913e:	2000      	movs	r0, #0
 8009140:	f7f7 f8ac 	bl	800029c <__aeabi_dsub>
 8009144:	4622      	mov	r2, r4
 8009146:	4680      	mov	r8, r0
 8009148:	4689      	mov	r9, r1
 800914a:	462b      	mov	r3, r5
 800914c:	4650      	mov	r0, sl
 800914e:	4659      	mov	r1, fp
 8009150:	f7f7 f8a4 	bl	800029c <__aeabi_dsub>
 8009154:	4632      	mov	r2, r6
 8009156:	463b      	mov	r3, r7
 8009158:	f7f7 f8a0 	bl	800029c <__aeabi_dsub>
 800915c:	4602      	mov	r2, r0
 800915e:	460b      	mov	r3, r1
 8009160:	4640      	mov	r0, r8
 8009162:	4649      	mov	r1, r9
 8009164:	e7da      	b.n	800911c <__kernel_cos+0xec>
 8009166:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80091a0 <__kernel_cos+0x170>
 800916a:	e7db      	b.n	8009124 <__kernel_cos+0xf4>
 800916c:	f3af 8000 	nop.w
 8009170:	be8838d4 	.word	0xbe8838d4
 8009174:	bda8fae9 	.word	0xbda8fae9
 8009178:	bdb4b1c4 	.word	0xbdb4b1c4
 800917c:	3e21ee9e 	.word	0x3e21ee9e
 8009180:	809c52ad 	.word	0x809c52ad
 8009184:	3e927e4f 	.word	0x3e927e4f
 8009188:	19cb1590 	.word	0x19cb1590
 800918c:	3efa01a0 	.word	0x3efa01a0
 8009190:	16c15177 	.word	0x16c15177
 8009194:	3f56c16c 	.word	0x3f56c16c
 8009198:	5555554c 	.word	0x5555554c
 800919c:	3fa55555 	.word	0x3fa55555
 80091a0:	00000000 	.word	0x00000000
 80091a4:	3ff00000 	.word	0x3ff00000
 80091a8:	3fe00000 	.word	0x3fe00000
 80091ac:	3fd33332 	.word	0x3fd33332
 80091b0:	3ff00000 	.word	0x3ff00000
 80091b4:	3fe90000 	.word	0x3fe90000
 80091b8:	3fd20000 	.word	0x3fd20000
 80091bc:	00000000 	.word	0x00000000

080091c0 <__kernel_sin>:
 80091c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c4:	ed2d 8b04 	vpush	{d8-d9}
 80091c8:	eeb0 8a41 	vmov.f32	s16, s2
 80091cc:	eef0 8a61 	vmov.f32	s17, s3
 80091d0:	ec55 4b10 	vmov	r4, r5, d0
 80091d4:	b083      	sub	sp, #12
 80091d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80091da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80091de:	9001      	str	r0, [sp, #4]
 80091e0:	da06      	bge.n	80091f0 <__kernel_sin+0x30>
 80091e2:	ee10 0a10 	vmov	r0, s0
 80091e6:	4629      	mov	r1, r5
 80091e8:	f7f7 fcc0 	bl	8000b6c <__aeabi_d2iz>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d051      	beq.n	8009294 <__kernel_sin+0xd4>
 80091f0:	4622      	mov	r2, r4
 80091f2:	462b      	mov	r3, r5
 80091f4:	4620      	mov	r0, r4
 80091f6:	4629      	mov	r1, r5
 80091f8:	f7f7 fa08 	bl	800060c <__aeabi_dmul>
 80091fc:	4682      	mov	sl, r0
 80091fe:	468b      	mov	fp, r1
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	4620      	mov	r0, r4
 8009206:	4629      	mov	r1, r5
 8009208:	f7f7 fa00 	bl	800060c <__aeabi_dmul>
 800920c:	a341      	add	r3, pc, #260	; (adr r3, 8009314 <__kernel_sin+0x154>)
 800920e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009212:	4680      	mov	r8, r0
 8009214:	4689      	mov	r9, r1
 8009216:	4650      	mov	r0, sl
 8009218:	4659      	mov	r1, fp
 800921a:	f7f7 f9f7 	bl	800060c <__aeabi_dmul>
 800921e:	a33f      	add	r3, pc, #252	; (adr r3, 800931c <__kernel_sin+0x15c>)
 8009220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009224:	f7f7 f83a 	bl	800029c <__aeabi_dsub>
 8009228:	4652      	mov	r2, sl
 800922a:	465b      	mov	r3, fp
 800922c:	f7f7 f9ee 	bl	800060c <__aeabi_dmul>
 8009230:	a33c      	add	r3, pc, #240	; (adr r3, 8009324 <__kernel_sin+0x164>)
 8009232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009236:	f7f7 f833 	bl	80002a0 <__adddf3>
 800923a:	4652      	mov	r2, sl
 800923c:	465b      	mov	r3, fp
 800923e:	f7f7 f9e5 	bl	800060c <__aeabi_dmul>
 8009242:	a33a      	add	r3, pc, #232	; (adr r3, 800932c <__kernel_sin+0x16c>)
 8009244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009248:	f7f7 f828 	bl	800029c <__aeabi_dsub>
 800924c:	4652      	mov	r2, sl
 800924e:	465b      	mov	r3, fp
 8009250:	f7f7 f9dc 	bl	800060c <__aeabi_dmul>
 8009254:	a337      	add	r3, pc, #220	; (adr r3, 8009334 <__kernel_sin+0x174>)
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	f7f7 f821 	bl	80002a0 <__adddf3>
 800925e:	9b01      	ldr	r3, [sp, #4]
 8009260:	4606      	mov	r6, r0
 8009262:	460f      	mov	r7, r1
 8009264:	b9eb      	cbnz	r3, 80092a2 <__kernel_sin+0xe2>
 8009266:	4602      	mov	r2, r0
 8009268:	460b      	mov	r3, r1
 800926a:	4650      	mov	r0, sl
 800926c:	4659      	mov	r1, fp
 800926e:	f7f7 f9cd 	bl	800060c <__aeabi_dmul>
 8009272:	a325      	add	r3, pc, #148	; (adr r3, 8009308 <__kernel_sin+0x148>)
 8009274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009278:	f7f7 f810 	bl	800029c <__aeabi_dsub>
 800927c:	4642      	mov	r2, r8
 800927e:	464b      	mov	r3, r9
 8009280:	f7f7 f9c4 	bl	800060c <__aeabi_dmul>
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	4620      	mov	r0, r4
 800928a:	4629      	mov	r1, r5
 800928c:	f7f7 f808 	bl	80002a0 <__adddf3>
 8009290:	4604      	mov	r4, r0
 8009292:	460d      	mov	r5, r1
 8009294:	ec45 4b10 	vmov	d0, r4, r5
 8009298:	b003      	add	sp, #12
 800929a:	ecbd 8b04 	vpop	{d8-d9}
 800929e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a2:	4b1b      	ldr	r3, [pc, #108]	; (8009310 <__kernel_sin+0x150>)
 80092a4:	ec51 0b18 	vmov	r0, r1, d8
 80092a8:	2200      	movs	r2, #0
 80092aa:	f7f7 f9af 	bl	800060c <__aeabi_dmul>
 80092ae:	4632      	mov	r2, r6
 80092b0:	ec41 0b19 	vmov	d9, r0, r1
 80092b4:	463b      	mov	r3, r7
 80092b6:	4640      	mov	r0, r8
 80092b8:	4649      	mov	r1, r9
 80092ba:	f7f7 f9a7 	bl	800060c <__aeabi_dmul>
 80092be:	4602      	mov	r2, r0
 80092c0:	460b      	mov	r3, r1
 80092c2:	ec51 0b19 	vmov	r0, r1, d9
 80092c6:	f7f6 ffe9 	bl	800029c <__aeabi_dsub>
 80092ca:	4652      	mov	r2, sl
 80092cc:	465b      	mov	r3, fp
 80092ce:	f7f7 f99d 	bl	800060c <__aeabi_dmul>
 80092d2:	ec53 2b18 	vmov	r2, r3, d8
 80092d6:	f7f6 ffe1 	bl	800029c <__aeabi_dsub>
 80092da:	a30b      	add	r3, pc, #44	; (adr r3, 8009308 <__kernel_sin+0x148>)
 80092dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e0:	4606      	mov	r6, r0
 80092e2:	460f      	mov	r7, r1
 80092e4:	4640      	mov	r0, r8
 80092e6:	4649      	mov	r1, r9
 80092e8:	f7f7 f990 	bl	800060c <__aeabi_dmul>
 80092ec:	4602      	mov	r2, r0
 80092ee:	460b      	mov	r3, r1
 80092f0:	4630      	mov	r0, r6
 80092f2:	4639      	mov	r1, r7
 80092f4:	f7f6 ffd4 	bl	80002a0 <__adddf3>
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	4620      	mov	r0, r4
 80092fe:	4629      	mov	r1, r5
 8009300:	f7f6 ffcc 	bl	800029c <__aeabi_dsub>
 8009304:	e7c4      	b.n	8009290 <__kernel_sin+0xd0>
 8009306:	bf00      	nop
 8009308:	55555549 	.word	0x55555549
 800930c:	3fc55555 	.word	0x3fc55555
 8009310:	3fe00000 	.word	0x3fe00000
 8009314:	5acfd57c 	.word	0x5acfd57c
 8009318:	3de5d93a 	.word	0x3de5d93a
 800931c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009320:	3e5ae5e6 	.word	0x3e5ae5e6
 8009324:	57b1fe7d 	.word	0x57b1fe7d
 8009328:	3ec71de3 	.word	0x3ec71de3
 800932c:	19c161d5 	.word	0x19c161d5
 8009330:	3f2a01a0 	.word	0x3f2a01a0
 8009334:	1110f8a6 	.word	0x1110f8a6
 8009338:	3f811111 	.word	0x3f811111

0800933c <fabs>:
 800933c:	ec51 0b10 	vmov	r0, r1, d0
 8009340:	ee10 2a10 	vmov	r2, s0
 8009344:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009348:	ec43 2b10 	vmov	d0, r2, r3
 800934c:	4770      	bx	lr
	...

08009350 <scalbn>:
 8009350:	b570      	push	{r4, r5, r6, lr}
 8009352:	ec55 4b10 	vmov	r4, r5, d0
 8009356:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800935a:	4606      	mov	r6, r0
 800935c:	462b      	mov	r3, r5
 800935e:	b999      	cbnz	r1, 8009388 <scalbn+0x38>
 8009360:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009364:	4323      	orrs	r3, r4
 8009366:	d03f      	beq.n	80093e8 <scalbn+0x98>
 8009368:	4b35      	ldr	r3, [pc, #212]	; (8009440 <scalbn+0xf0>)
 800936a:	4629      	mov	r1, r5
 800936c:	ee10 0a10 	vmov	r0, s0
 8009370:	2200      	movs	r2, #0
 8009372:	f7f7 f94b 	bl	800060c <__aeabi_dmul>
 8009376:	4b33      	ldr	r3, [pc, #204]	; (8009444 <scalbn+0xf4>)
 8009378:	429e      	cmp	r6, r3
 800937a:	4604      	mov	r4, r0
 800937c:	460d      	mov	r5, r1
 800937e:	da10      	bge.n	80093a2 <scalbn+0x52>
 8009380:	a327      	add	r3, pc, #156	; (adr r3, 8009420 <scalbn+0xd0>)
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	e01f      	b.n	80093c8 <scalbn+0x78>
 8009388:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800938c:	4291      	cmp	r1, r2
 800938e:	d10c      	bne.n	80093aa <scalbn+0x5a>
 8009390:	ee10 2a10 	vmov	r2, s0
 8009394:	4620      	mov	r0, r4
 8009396:	4629      	mov	r1, r5
 8009398:	f7f6 ff82 	bl	80002a0 <__adddf3>
 800939c:	4604      	mov	r4, r0
 800939e:	460d      	mov	r5, r1
 80093a0:	e022      	b.n	80093e8 <scalbn+0x98>
 80093a2:	460b      	mov	r3, r1
 80093a4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80093a8:	3936      	subs	r1, #54	; 0x36
 80093aa:	f24c 3250 	movw	r2, #50000	; 0xc350
 80093ae:	4296      	cmp	r6, r2
 80093b0:	dd0d      	ble.n	80093ce <scalbn+0x7e>
 80093b2:	2d00      	cmp	r5, #0
 80093b4:	a11c      	add	r1, pc, #112	; (adr r1, 8009428 <scalbn+0xd8>)
 80093b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093ba:	da02      	bge.n	80093c2 <scalbn+0x72>
 80093bc:	a11c      	add	r1, pc, #112	; (adr r1, 8009430 <scalbn+0xe0>)
 80093be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093c2:	a319      	add	r3, pc, #100	; (adr r3, 8009428 <scalbn+0xd8>)
 80093c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c8:	f7f7 f920 	bl	800060c <__aeabi_dmul>
 80093cc:	e7e6      	b.n	800939c <scalbn+0x4c>
 80093ce:	1872      	adds	r2, r6, r1
 80093d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80093d4:	428a      	cmp	r2, r1
 80093d6:	dcec      	bgt.n	80093b2 <scalbn+0x62>
 80093d8:	2a00      	cmp	r2, #0
 80093da:	dd08      	ble.n	80093ee <scalbn+0x9e>
 80093dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80093e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80093e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80093e8:	ec45 4b10 	vmov	d0, r4, r5
 80093ec:	bd70      	pop	{r4, r5, r6, pc}
 80093ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80093f2:	da08      	bge.n	8009406 <scalbn+0xb6>
 80093f4:	2d00      	cmp	r5, #0
 80093f6:	a10a      	add	r1, pc, #40	; (adr r1, 8009420 <scalbn+0xd0>)
 80093f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093fc:	dac0      	bge.n	8009380 <scalbn+0x30>
 80093fe:	a10e      	add	r1, pc, #56	; (adr r1, 8009438 <scalbn+0xe8>)
 8009400:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009404:	e7bc      	b.n	8009380 <scalbn+0x30>
 8009406:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800940a:	3236      	adds	r2, #54	; 0x36
 800940c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009410:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009414:	4620      	mov	r0, r4
 8009416:	4b0c      	ldr	r3, [pc, #48]	; (8009448 <scalbn+0xf8>)
 8009418:	2200      	movs	r2, #0
 800941a:	e7d5      	b.n	80093c8 <scalbn+0x78>
 800941c:	f3af 8000 	nop.w
 8009420:	c2f8f359 	.word	0xc2f8f359
 8009424:	01a56e1f 	.word	0x01a56e1f
 8009428:	8800759c 	.word	0x8800759c
 800942c:	7e37e43c 	.word	0x7e37e43c
 8009430:	8800759c 	.word	0x8800759c
 8009434:	fe37e43c 	.word	0xfe37e43c
 8009438:	c2f8f359 	.word	0xc2f8f359
 800943c:	81a56e1f 	.word	0x81a56e1f
 8009440:	43500000 	.word	0x43500000
 8009444:	ffff3cb0 	.word	0xffff3cb0
 8009448:	3c900000 	.word	0x3c900000

0800944c <abort>:
 800944c:	b508      	push	{r3, lr}
 800944e:	2006      	movs	r0, #6
 8009450:	f001 f8d4 	bl	800a5fc <raise>
 8009454:	2001      	movs	r0, #1
 8009456:	f7f9 f987 	bl	8002768 <_exit>

0800945a <__cvt>:
 800945a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800945e:	ec55 4b10 	vmov	r4, r5, d0
 8009462:	2d00      	cmp	r5, #0
 8009464:	460e      	mov	r6, r1
 8009466:	4619      	mov	r1, r3
 8009468:	462b      	mov	r3, r5
 800946a:	bfbb      	ittet	lt
 800946c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009470:	461d      	movlt	r5, r3
 8009472:	2300      	movge	r3, #0
 8009474:	232d      	movlt	r3, #45	; 0x2d
 8009476:	700b      	strb	r3, [r1, #0]
 8009478:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800947a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800947e:	4691      	mov	r9, r2
 8009480:	f023 0820 	bic.w	r8, r3, #32
 8009484:	bfbc      	itt	lt
 8009486:	4622      	movlt	r2, r4
 8009488:	4614      	movlt	r4, r2
 800948a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800948e:	d005      	beq.n	800949c <__cvt+0x42>
 8009490:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009494:	d100      	bne.n	8009498 <__cvt+0x3e>
 8009496:	3601      	adds	r6, #1
 8009498:	2102      	movs	r1, #2
 800949a:	e000      	b.n	800949e <__cvt+0x44>
 800949c:	2103      	movs	r1, #3
 800949e:	ab03      	add	r3, sp, #12
 80094a0:	9301      	str	r3, [sp, #4]
 80094a2:	ab02      	add	r3, sp, #8
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	ec45 4b10 	vmov	d0, r4, r5
 80094aa:	4653      	mov	r3, sl
 80094ac:	4632      	mov	r2, r6
 80094ae:	f001 f9d3 	bl	800a858 <_dtoa_r>
 80094b2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80094b6:	4607      	mov	r7, r0
 80094b8:	d102      	bne.n	80094c0 <__cvt+0x66>
 80094ba:	f019 0f01 	tst.w	r9, #1
 80094be:	d022      	beq.n	8009506 <__cvt+0xac>
 80094c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80094c4:	eb07 0906 	add.w	r9, r7, r6
 80094c8:	d110      	bne.n	80094ec <__cvt+0x92>
 80094ca:	783b      	ldrb	r3, [r7, #0]
 80094cc:	2b30      	cmp	r3, #48	; 0x30
 80094ce:	d10a      	bne.n	80094e6 <__cvt+0x8c>
 80094d0:	2200      	movs	r2, #0
 80094d2:	2300      	movs	r3, #0
 80094d4:	4620      	mov	r0, r4
 80094d6:	4629      	mov	r1, r5
 80094d8:	f7f7 fb00 	bl	8000adc <__aeabi_dcmpeq>
 80094dc:	b918      	cbnz	r0, 80094e6 <__cvt+0x8c>
 80094de:	f1c6 0601 	rsb	r6, r6, #1
 80094e2:	f8ca 6000 	str.w	r6, [sl]
 80094e6:	f8da 3000 	ldr.w	r3, [sl]
 80094ea:	4499      	add	r9, r3
 80094ec:	2200      	movs	r2, #0
 80094ee:	2300      	movs	r3, #0
 80094f0:	4620      	mov	r0, r4
 80094f2:	4629      	mov	r1, r5
 80094f4:	f7f7 faf2 	bl	8000adc <__aeabi_dcmpeq>
 80094f8:	b108      	cbz	r0, 80094fe <__cvt+0xa4>
 80094fa:	f8cd 900c 	str.w	r9, [sp, #12]
 80094fe:	2230      	movs	r2, #48	; 0x30
 8009500:	9b03      	ldr	r3, [sp, #12]
 8009502:	454b      	cmp	r3, r9
 8009504:	d307      	bcc.n	8009516 <__cvt+0xbc>
 8009506:	9b03      	ldr	r3, [sp, #12]
 8009508:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800950a:	1bdb      	subs	r3, r3, r7
 800950c:	4638      	mov	r0, r7
 800950e:	6013      	str	r3, [r2, #0]
 8009510:	b004      	add	sp, #16
 8009512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009516:	1c59      	adds	r1, r3, #1
 8009518:	9103      	str	r1, [sp, #12]
 800951a:	701a      	strb	r2, [r3, #0]
 800951c:	e7f0      	b.n	8009500 <__cvt+0xa6>

0800951e <__exponent>:
 800951e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009520:	4603      	mov	r3, r0
 8009522:	2900      	cmp	r1, #0
 8009524:	bfb8      	it	lt
 8009526:	4249      	neglt	r1, r1
 8009528:	f803 2b02 	strb.w	r2, [r3], #2
 800952c:	bfb4      	ite	lt
 800952e:	222d      	movlt	r2, #45	; 0x2d
 8009530:	222b      	movge	r2, #43	; 0x2b
 8009532:	2909      	cmp	r1, #9
 8009534:	7042      	strb	r2, [r0, #1]
 8009536:	dd2a      	ble.n	800958e <__exponent+0x70>
 8009538:	f10d 0207 	add.w	r2, sp, #7
 800953c:	4617      	mov	r7, r2
 800953e:	260a      	movs	r6, #10
 8009540:	4694      	mov	ip, r2
 8009542:	fb91 f5f6 	sdiv	r5, r1, r6
 8009546:	fb06 1415 	mls	r4, r6, r5, r1
 800954a:	3430      	adds	r4, #48	; 0x30
 800954c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009550:	460c      	mov	r4, r1
 8009552:	2c63      	cmp	r4, #99	; 0x63
 8009554:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009558:	4629      	mov	r1, r5
 800955a:	dcf1      	bgt.n	8009540 <__exponent+0x22>
 800955c:	3130      	adds	r1, #48	; 0x30
 800955e:	f1ac 0402 	sub.w	r4, ip, #2
 8009562:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009566:	1c41      	adds	r1, r0, #1
 8009568:	4622      	mov	r2, r4
 800956a:	42ba      	cmp	r2, r7
 800956c:	d30a      	bcc.n	8009584 <__exponent+0x66>
 800956e:	f10d 0209 	add.w	r2, sp, #9
 8009572:	eba2 020c 	sub.w	r2, r2, ip
 8009576:	42bc      	cmp	r4, r7
 8009578:	bf88      	it	hi
 800957a:	2200      	movhi	r2, #0
 800957c:	4413      	add	r3, r2
 800957e:	1a18      	subs	r0, r3, r0
 8009580:	b003      	add	sp, #12
 8009582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009584:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009588:	f801 5f01 	strb.w	r5, [r1, #1]!
 800958c:	e7ed      	b.n	800956a <__exponent+0x4c>
 800958e:	2330      	movs	r3, #48	; 0x30
 8009590:	3130      	adds	r1, #48	; 0x30
 8009592:	7083      	strb	r3, [r0, #2]
 8009594:	70c1      	strb	r1, [r0, #3]
 8009596:	1d03      	adds	r3, r0, #4
 8009598:	e7f1      	b.n	800957e <__exponent+0x60>
	...

0800959c <_printf_float>:
 800959c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a0:	ed2d 8b02 	vpush	{d8}
 80095a4:	b08d      	sub	sp, #52	; 0x34
 80095a6:	460c      	mov	r4, r1
 80095a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80095ac:	4616      	mov	r6, r2
 80095ae:	461f      	mov	r7, r3
 80095b0:	4605      	mov	r5, r0
 80095b2:	f000 ffc3 	bl	800a53c <_localeconv_r>
 80095b6:	f8d0 a000 	ldr.w	sl, [r0]
 80095ba:	4650      	mov	r0, sl
 80095bc:	f7f6 fe58 	bl	8000270 <strlen>
 80095c0:	2300      	movs	r3, #0
 80095c2:	930a      	str	r3, [sp, #40]	; 0x28
 80095c4:	6823      	ldr	r3, [r4, #0]
 80095c6:	9305      	str	r3, [sp, #20]
 80095c8:	f8d8 3000 	ldr.w	r3, [r8]
 80095cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80095d0:	3307      	adds	r3, #7
 80095d2:	f023 0307 	bic.w	r3, r3, #7
 80095d6:	f103 0208 	add.w	r2, r3, #8
 80095da:	f8c8 2000 	str.w	r2, [r8]
 80095de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80095e6:	9307      	str	r3, [sp, #28]
 80095e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80095ec:	ee08 0a10 	vmov	s16, r0
 80095f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80095f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095f8:	4b9e      	ldr	r3, [pc, #632]	; (8009874 <_printf_float+0x2d8>)
 80095fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095fe:	f7f7 fa9f 	bl	8000b40 <__aeabi_dcmpun>
 8009602:	bb88      	cbnz	r0, 8009668 <_printf_float+0xcc>
 8009604:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009608:	4b9a      	ldr	r3, [pc, #616]	; (8009874 <_printf_float+0x2d8>)
 800960a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800960e:	f7f7 fa79 	bl	8000b04 <__aeabi_dcmple>
 8009612:	bb48      	cbnz	r0, 8009668 <_printf_float+0xcc>
 8009614:	2200      	movs	r2, #0
 8009616:	2300      	movs	r3, #0
 8009618:	4640      	mov	r0, r8
 800961a:	4649      	mov	r1, r9
 800961c:	f7f7 fa68 	bl	8000af0 <__aeabi_dcmplt>
 8009620:	b110      	cbz	r0, 8009628 <_printf_float+0x8c>
 8009622:	232d      	movs	r3, #45	; 0x2d
 8009624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009628:	4a93      	ldr	r2, [pc, #588]	; (8009878 <_printf_float+0x2dc>)
 800962a:	4b94      	ldr	r3, [pc, #592]	; (800987c <_printf_float+0x2e0>)
 800962c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009630:	bf94      	ite	ls
 8009632:	4690      	movls	r8, r2
 8009634:	4698      	movhi	r8, r3
 8009636:	2303      	movs	r3, #3
 8009638:	6123      	str	r3, [r4, #16]
 800963a:	9b05      	ldr	r3, [sp, #20]
 800963c:	f023 0304 	bic.w	r3, r3, #4
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	f04f 0900 	mov.w	r9, #0
 8009646:	9700      	str	r7, [sp, #0]
 8009648:	4633      	mov	r3, r6
 800964a:	aa0b      	add	r2, sp, #44	; 0x2c
 800964c:	4621      	mov	r1, r4
 800964e:	4628      	mov	r0, r5
 8009650:	f000 fa8a 	bl	8009b68 <_printf_common>
 8009654:	3001      	adds	r0, #1
 8009656:	f040 8090 	bne.w	800977a <_printf_float+0x1de>
 800965a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800965e:	b00d      	add	sp, #52	; 0x34
 8009660:	ecbd 8b02 	vpop	{d8}
 8009664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009668:	4642      	mov	r2, r8
 800966a:	464b      	mov	r3, r9
 800966c:	4640      	mov	r0, r8
 800966e:	4649      	mov	r1, r9
 8009670:	f7f7 fa66 	bl	8000b40 <__aeabi_dcmpun>
 8009674:	b140      	cbz	r0, 8009688 <_printf_float+0xec>
 8009676:	464b      	mov	r3, r9
 8009678:	2b00      	cmp	r3, #0
 800967a:	bfbc      	itt	lt
 800967c:	232d      	movlt	r3, #45	; 0x2d
 800967e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009682:	4a7f      	ldr	r2, [pc, #508]	; (8009880 <_printf_float+0x2e4>)
 8009684:	4b7f      	ldr	r3, [pc, #508]	; (8009884 <_printf_float+0x2e8>)
 8009686:	e7d1      	b.n	800962c <_printf_float+0x90>
 8009688:	6863      	ldr	r3, [r4, #4]
 800968a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800968e:	9206      	str	r2, [sp, #24]
 8009690:	1c5a      	adds	r2, r3, #1
 8009692:	d13f      	bne.n	8009714 <_printf_float+0x178>
 8009694:	2306      	movs	r3, #6
 8009696:	6063      	str	r3, [r4, #4]
 8009698:	9b05      	ldr	r3, [sp, #20]
 800969a:	6861      	ldr	r1, [r4, #4]
 800969c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80096a0:	2300      	movs	r3, #0
 80096a2:	9303      	str	r3, [sp, #12]
 80096a4:	ab0a      	add	r3, sp, #40	; 0x28
 80096a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80096aa:	ab09      	add	r3, sp, #36	; 0x24
 80096ac:	ec49 8b10 	vmov	d0, r8, r9
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	6022      	str	r2, [r4, #0]
 80096b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80096b8:	4628      	mov	r0, r5
 80096ba:	f7ff fece 	bl	800945a <__cvt>
 80096be:	9b06      	ldr	r3, [sp, #24]
 80096c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096c2:	2b47      	cmp	r3, #71	; 0x47
 80096c4:	4680      	mov	r8, r0
 80096c6:	d108      	bne.n	80096da <_printf_float+0x13e>
 80096c8:	1cc8      	adds	r0, r1, #3
 80096ca:	db02      	blt.n	80096d2 <_printf_float+0x136>
 80096cc:	6863      	ldr	r3, [r4, #4]
 80096ce:	4299      	cmp	r1, r3
 80096d0:	dd41      	ble.n	8009756 <_printf_float+0x1ba>
 80096d2:	f1ab 0302 	sub.w	r3, fp, #2
 80096d6:	fa5f fb83 	uxtb.w	fp, r3
 80096da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80096de:	d820      	bhi.n	8009722 <_printf_float+0x186>
 80096e0:	3901      	subs	r1, #1
 80096e2:	465a      	mov	r2, fp
 80096e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80096e8:	9109      	str	r1, [sp, #36]	; 0x24
 80096ea:	f7ff ff18 	bl	800951e <__exponent>
 80096ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096f0:	1813      	adds	r3, r2, r0
 80096f2:	2a01      	cmp	r2, #1
 80096f4:	4681      	mov	r9, r0
 80096f6:	6123      	str	r3, [r4, #16]
 80096f8:	dc02      	bgt.n	8009700 <_printf_float+0x164>
 80096fa:	6822      	ldr	r2, [r4, #0]
 80096fc:	07d2      	lsls	r2, r2, #31
 80096fe:	d501      	bpl.n	8009704 <_printf_float+0x168>
 8009700:	3301      	adds	r3, #1
 8009702:	6123      	str	r3, [r4, #16]
 8009704:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009708:	2b00      	cmp	r3, #0
 800970a:	d09c      	beq.n	8009646 <_printf_float+0xaa>
 800970c:	232d      	movs	r3, #45	; 0x2d
 800970e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009712:	e798      	b.n	8009646 <_printf_float+0xaa>
 8009714:	9a06      	ldr	r2, [sp, #24]
 8009716:	2a47      	cmp	r2, #71	; 0x47
 8009718:	d1be      	bne.n	8009698 <_printf_float+0xfc>
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1bc      	bne.n	8009698 <_printf_float+0xfc>
 800971e:	2301      	movs	r3, #1
 8009720:	e7b9      	b.n	8009696 <_printf_float+0xfa>
 8009722:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009726:	d118      	bne.n	800975a <_printf_float+0x1be>
 8009728:	2900      	cmp	r1, #0
 800972a:	6863      	ldr	r3, [r4, #4]
 800972c:	dd0b      	ble.n	8009746 <_printf_float+0x1aa>
 800972e:	6121      	str	r1, [r4, #16]
 8009730:	b913      	cbnz	r3, 8009738 <_printf_float+0x19c>
 8009732:	6822      	ldr	r2, [r4, #0]
 8009734:	07d0      	lsls	r0, r2, #31
 8009736:	d502      	bpl.n	800973e <_printf_float+0x1a2>
 8009738:	3301      	adds	r3, #1
 800973a:	440b      	add	r3, r1
 800973c:	6123      	str	r3, [r4, #16]
 800973e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009740:	f04f 0900 	mov.w	r9, #0
 8009744:	e7de      	b.n	8009704 <_printf_float+0x168>
 8009746:	b913      	cbnz	r3, 800974e <_printf_float+0x1b2>
 8009748:	6822      	ldr	r2, [r4, #0]
 800974a:	07d2      	lsls	r2, r2, #31
 800974c:	d501      	bpl.n	8009752 <_printf_float+0x1b6>
 800974e:	3302      	adds	r3, #2
 8009750:	e7f4      	b.n	800973c <_printf_float+0x1a0>
 8009752:	2301      	movs	r3, #1
 8009754:	e7f2      	b.n	800973c <_printf_float+0x1a0>
 8009756:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800975a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800975c:	4299      	cmp	r1, r3
 800975e:	db05      	blt.n	800976c <_printf_float+0x1d0>
 8009760:	6823      	ldr	r3, [r4, #0]
 8009762:	6121      	str	r1, [r4, #16]
 8009764:	07d8      	lsls	r0, r3, #31
 8009766:	d5ea      	bpl.n	800973e <_printf_float+0x1a2>
 8009768:	1c4b      	adds	r3, r1, #1
 800976a:	e7e7      	b.n	800973c <_printf_float+0x1a0>
 800976c:	2900      	cmp	r1, #0
 800976e:	bfd4      	ite	le
 8009770:	f1c1 0202 	rsble	r2, r1, #2
 8009774:	2201      	movgt	r2, #1
 8009776:	4413      	add	r3, r2
 8009778:	e7e0      	b.n	800973c <_printf_float+0x1a0>
 800977a:	6823      	ldr	r3, [r4, #0]
 800977c:	055a      	lsls	r2, r3, #21
 800977e:	d407      	bmi.n	8009790 <_printf_float+0x1f4>
 8009780:	6923      	ldr	r3, [r4, #16]
 8009782:	4642      	mov	r2, r8
 8009784:	4631      	mov	r1, r6
 8009786:	4628      	mov	r0, r5
 8009788:	47b8      	blx	r7
 800978a:	3001      	adds	r0, #1
 800978c:	d12c      	bne.n	80097e8 <_printf_float+0x24c>
 800978e:	e764      	b.n	800965a <_printf_float+0xbe>
 8009790:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009794:	f240 80e0 	bls.w	8009958 <_printf_float+0x3bc>
 8009798:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800979c:	2200      	movs	r2, #0
 800979e:	2300      	movs	r3, #0
 80097a0:	f7f7 f99c 	bl	8000adc <__aeabi_dcmpeq>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	d034      	beq.n	8009812 <_printf_float+0x276>
 80097a8:	4a37      	ldr	r2, [pc, #220]	; (8009888 <_printf_float+0x2ec>)
 80097aa:	2301      	movs	r3, #1
 80097ac:	4631      	mov	r1, r6
 80097ae:	4628      	mov	r0, r5
 80097b0:	47b8      	blx	r7
 80097b2:	3001      	adds	r0, #1
 80097b4:	f43f af51 	beq.w	800965a <_printf_float+0xbe>
 80097b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097bc:	429a      	cmp	r2, r3
 80097be:	db02      	blt.n	80097c6 <_printf_float+0x22a>
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	07d8      	lsls	r0, r3, #31
 80097c4:	d510      	bpl.n	80097e8 <_printf_float+0x24c>
 80097c6:	ee18 3a10 	vmov	r3, s16
 80097ca:	4652      	mov	r2, sl
 80097cc:	4631      	mov	r1, r6
 80097ce:	4628      	mov	r0, r5
 80097d0:	47b8      	blx	r7
 80097d2:	3001      	adds	r0, #1
 80097d4:	f43f af41 	beq.w	800965a <_printf_float+0xbe>
 80097d8:	f04f 0800 	mov.w	r8, #0
 80097dc:	f104 091a 	add.w	r9, r4, #26
 80097e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097e2:	3b01      	subs	r3, #1
 80097e4:	4543      	cmp	r3, r8
 80097e6:	dc09      	bgt.n	80097fc <_printf_float+0x260>
 80097e8:	6823      	ldr	r3, [r4, #0]
 80097ea:	079b      	lsls	r3, r3, #30
 80097ec:	f100 8107 	bmi.w	80099fe <_printf_float+0x462>
 80097f0:	68e0      	ldr	r0, [r4, #12]
 80097f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097f4:	4298      	cmp	r0, r3
 80097f6:	bfb8      	it	lt
 80097f8:	4618      	movlt	r0, r3
 80097fa:	e730      	b.n	800965e <_printf_float+0xc2>
 80097fc:	2301      	movs	r3, #1
 80097fe:	464a      	mov	r2, r9
 8009800:	4631      	mov	r1, r6
 8009802:	4628      	mov	r0, r5
 8009804:	47b8      	blx	r7
 8009806:	3001      	adds	r0, #1
 8009808:	f43f af27 	beq.w	800965a <_printf_float+0xbe>
 800980c:	f108 0801 	add.w	r8, r8, #1
 8009810:	e7e6      	b.n	80097e0 <_printf_float+0x244>
 8009812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009814:	2b00      	cmp	r3, #0
 8009816:	dc39      	bgt.n	800988c <_printf_float+0x2f0>
 8009818:	4a1b      	ldr	r2, [pc, #108]	; (8009888 <_printf_float+0x2ec>)
 800981a:	2301      	movs	r3, #1
 800981c:	4631      	mov	r1, r6
 800981e:	4628      	mov	r0, r5
 8009820:	47b8      	blx	r7
 8009822:	3001      	adds	r0, #1
 8009824:	f43f af19 	beq.w	800965a <_printf_float+0xbe>
 8009828:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800982c:	4313      	orrs	r3, r2
 800982e:	d102      	bne.n	8009836 <_printf_float+0x29a>
 8009830:	6823      	ldr	r3, [r4, #0]
 8009832:	07d9      	lsls	r1, r3, #31
 8009834:	d5d8      	bpl.n	80097e8 <_printf_float+0x24c>
 8009836:	ee18 3a10 	vmov	r3, s16
 800983a:	4652      	mov	r2, sl
 800983c:	4631      	mov	r1, r6
 800983e:	4628      	mov	r0, r5
 8009840:	47b8      	blx	r7
 8009842:	3001      	adds	r0, #1
 8009844:	f43f af09 	beq.w	800965a <_printf_float+0xbe>
 8009848:	f04f 0900 	mov.w	r9, #0
 800984c:	f104 0a1a 	add.w	sl, r4, #26
 8009850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009852:	425b      	negs	r3, r3
 8009854:	454b      	cmp	r3, r9
 8009856:	dc01      	bgt.n	800985c <_printf_float+0x2c0>
 8009858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800985a:	e792      	b.n	8009782 <_printf_float+0x1e6>
 800985c:	2301      	movs	r3, #1
 800985e:	4652      	mov	r2, sl
 8009860:	4631      	mov	r1, r6
 8009862:	4628      	mov	r0, r5
 8009864:	47b8      	blx	r7
 8009866:	3001      	adds	r0, #1
 8009868:	f43f aef7 	beq.w	800965a <_printf_float+0xbe>
 800986c:	f109 0901 	add.w	r9, r9, #1
 8009870:	e7ee      	b.n	8009850 <_printf_float+0x2b4>
 8009872:	bf00      	nop
 8009874:	7fefffff 	.word	0x7fefffff
 8009878:	0800f348 	.word	0x0800f348
 800987c:	0800f34c 	.word	0x0800f34c
 8009880:	0800f350 	.word	0x0800f350
 8009884:	0800f354 	.word	0x0800f354
 8009888:	0800f358 	.word	0x0800f358
 800988c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800988e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009890:	429a      	cmp	r2, r3
 8009892:	bfa8      	it	ge
 8009894:	461a      	movge	r2, r3
 8009896:	2a00      	cmp	r2, #0
 8009898:	4691      	mov	r9, r2
 800989a:	dc37      	bgt.n	800990c <_printf_float+0x370>
 800989c:	f04f 0b00 	mov.w	fp, #0
 80098a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098a4:	f104 021a 	add.w	r2, r4, #26
 80098a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098aa:	9305      	str	r3, [sp, #20]
 80098ac:	eba3 0309 	sub.w	r3, r3, r9
 80098b0:	455b      	cmp	r3, fp
 80098b2:	dc33      	bgt.n	800991c <_printf_float+0x380>
 80098b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098b8:	429a      	cmp	r2, r3
 80098ba:	db3b      	blt.n	8009934 <_printf_float+0x398>
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	07da      	lsls	r2, r3, #31
 80098c0:	d438      	bmi.n	8009934 <_printf_float+0x398>
 80098c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80098c6:	eba2 0903 	sub.w	r9, r2, r3
 80098ca:	9b05      	ldr	r3, [sp, #20]
 80098cc:	1ad2      	subs	r2, r2, r3
 80098ce:	4591      	cmp	r9, r2
 80098d0:	bfa8      	it	ge
 80098d2:	4691      	movge	r9, r2
 80098d4:	f1b9 0f00 	cmp.w	r9, #0
 80098d8:	dc35      	bgt.n	8009946 <_printf_float+0x3aa>
 80098da:	f04f 0800 	mov.w	r8, #0
 80098de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098e2:	f104 0a1a 	add.w	sl, r4, #26
 80098e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098ea:	1a9b      	subs	r3, r3, r2
 80098ec:	eba3 0309 	sub.w	r3, r3, r9
 80098f0:	4543      	cmp	r3, r8
 80098f2:	f77f af79 	ble.w	80097e8 <_printf_float+0x24c>
 80098f6:	2301      	movs	r3, #1
 80098f8:	4652      	mov	r2, sl
 80098fa:	4631      	mov	r1, r6
 80098fc:	4628      	mov	r0, r5
 80098fe:	47b8      	blx	r7
 8009900:	3001      	adds	r0, #1
 8009902:	f43f aeaa 	beq.w	800965a <_printf_float+0xbe>
 8009906:	f108 0801 	add.w	r8, r8, #1
 800990a:	e7ec      	b.n	80098e6 <_printf_float+0x34a>
 800990c:	4613      	mov	r3, r2
 800990e:	4631      	mov	r1, r6
 8009910:	4642      	mov	r2, r8
 8009912:	4628      	mov	r0, r5
 8009914:	47b8      	blx	r7
 8009916:	3001      	adds	r0, #1
 8009918:	d1c0      	bne.n	800989c <_printf_float+0x300>
 800991a:	e69e      	b.n	800965a <_printf_float+0xbe>
 800991c:	2301      	movs	r3, #1
 800991e:	4631      	mov	r1, r6
 8009920:	4628      	mov	r0, r5
 8009922:	9205      	str	r2, [sp, #20]
 8009924:	47b8      	blx	r7
 8009926:	3001      	adds	r0, #1
 8009928:	f43f ae97 	beq.w	800965a <_printf_float+0xbe>
 800992c:	9a05      	ldr	r2, [sp, #20]
 800992e:	f10b 0b01 	add.w	fp, fp, #1
 8009932:	e7b9      	b.n	80098a8 <_printf_float+0x30c>
 8009934:	ee18 3a10 	vmov	r3, s16
 8009938:	4652      	mov	r2, sl
 800993a:	4631      	mov	r1, r6
 800993c:	4628      	mov	r0, r5
 800993e:	47b8      	blx	r7
 8009940:	3001      	adds	r0, #1
 8009942:	d1be      	bne.n	80098c2 <_printf_float+0x326>
 8009944:	e689      	b.n	800965a <_printf_float+0xbe>
 8009946:	9a05      	ldr	r2, [sp, #20]
 8009948:	464b      	mov	r3, r9
 800994a:	4442      	add	r2, r8
 800994c:	4631      	mov	r1, r6
 800994e:	4628      	mov	r0, r5
 8009950:	47b8      	blx	r7
 8009952:	3001      	adds	r0, #1
 8009954:	d1c1      	bne.n	80098da <_printf_float+0x33e>
 8009956:	e680      	b.n	800965a <_printf_float+0xbe>
 8009958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800995a:	2a01      	cmp	r2, #1
 800995c:	dc01      	bgt.n	8009962 <_printf_float+0x3c6>
 800995e:	07db      	lsls	r3, r3, #31
 8009960:	d53a      	bpl.n	80099d8 <_printf_float+0x43c>
 8009962:	2301      	movs	r3, #1
 8009964:	4642      	mov	r2, r8
 8009966:	4631      	mov	r1, r6
 8009968:	4628      	mov	r0, r5
 800996a:	47b8      	blx	r7
 800996c:	3001      	adds	r0, #1
 800996e:	f43f ae74 	beq.w	800965a <_printf_float+0xbe>
 8009972:	ee18 3a10 	vmov	r3, s16
 8009976:	4652      	mov	r2, sl
 8009978:	4631      	mov	r1, r6
 800997a:	4628      	mov	r0, r5
 800997c:	47b8      	blx	r7
 800997e:	3001      	adds	r0, #1
 8009980:	f43f ae6b 	beq.w	800965a <_printf_float+0xbe>
 8009984:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009988:	2200      	movs	r2, #0
 800998a:	2300      	movs	r3, #0
 800998c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009990:	f7f7 f8a4 	bl	8000adc <__aeabi_dcmpeq>
 8009994:	b9d8      	cbnz	r0, 80099ce <_printf_float+0x432>
 8009996:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800999a:	f108 0201 	add.w	r2, r8, #1
 800999e:	4631      	mov	r1, r6
 80099a0:	4628      	mov	r0, r5
 80099a2:	47b8      	blx	r7
 80099a4:	3001      	adds	r0, #1
 80099a6:	d10e      	bne.n	80099c6 <_printf_float+0x42a>
 80099a8:	e657      	b.n	800965a <_printf_float+0xbe>
 80099aa:	2301      	movs	r3, #1
 80099ac:	4652      	mov	r2, sl
 80099ae:	4631      	mov	r1, r6
 80099b0:	4628      	mov	r0, r5
 80099b2:	47b8      	blx	r7
 80099b4:	3001      	adds	r0, #1
 80099b6:	f43f ae50 	beq.w	800965a <_printf_float+0xbe>
 80099ba:	f108 0801 	add.w	r8, r8, #1
 80099be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099c0:	3b01      	subs	r3, #1
 80099c2:	4543      	cmp	r3, r8
 80099c4:	dcf1      	bgt.n	80099aa <_printf_float+0x40e>
 80099c6:	464b      	mov	r3, r9
 80099c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80099cc:	e6da      	b.n	8009784 <_printf_float+0x1e8>
 80099ce:	f04f 0800 	mov.w	r8, #0
 80099d2:	f104 0a1a 	add.w	sl, r4, #26
 80099d6:	e7f2      	b.n	80099be <_printf_float+0x422>
 80099d8:	2301      	movs	r3, #1
 80099da:	4642      	mov	r2, r8
 80099dc:	e7df      	b.n	800999e <_printf_float+0x402>
 80099de:	2301      	movs	r3, #1
 80099e0:	464a      	mov	r2, r9
 80099e2:	4631      	mov	r1, r6
 80099e4:	4628      	mov	r0, r5
 80099e6:	47b8      	blx	r7
 80099e8:	3001      	adds	r0, #1
 80099ea:	f43f ae36 	beq.w	800965a <_printf_float+0xbe>
 80099ee:	f108 0801 	add.w	r8, r8, #1
 80099f2:	68e3      	ldr	r3, [r4, #12]
 80099f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099f6:	1a5b      	subs	r3, r3, r1
 80099f8:	4543      	cmp	r3, r8
 80099fa:	dcf0      	bgt.n	80099de <_printf_float+0x442>
 80099fc:	e6f8      	b.n	80097f0 <_printf_float+0x254>
 80099fe:	f04f 0800 	mov.w	r8, #0
 8009a02:	f104 0919 	add.w	r9, r4, #25
 8009a06:	e7f4      	b.n	80099f2 <_printf_float+0x456>

08009a08 <malloc>:
 8009a08:	4b02      	ldr	r3, [pc, #8]	; (8009a14 <malloc+0xc>)
 8009a0a:	4601      	mov	r1, r0
 8009a0c:	6818      	ldr	r0, [r3, #0]
 8009a0e:	f000 b82b 	b.w	8009a68 <_malloc_r>
 8009a12:	bf00      	nop
 8009a14:	200001f8 	.word	0x200001f8

08009a18 <free>:
 8009a18:	4b02      	ldr	r3, [pc, #8]	; (8009a24 <free+0xc>)
 8009a1a:	4601      	mov	r1, r0
 8009a1c:	6818      	ldr	r0, [r3, #0]
 8009a1e:	f001 bd0d 	b.w	800b43c <_free_r>
 8009a22:	bf00      	nop
 8009a24:	200001f8 	.word	0x200001f8

08009a28 <sbrk_aligned>:
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	4e0e      	ldr	r6, [pc, #56]	; (8009a64 <sbrk_aligned+0x3c>)
 8009a2c:	460c      	mov	r4, r1
 8009a2e:	6831      	ldr	r1, [r6, #0]
 8009a30:	4605      	mov	r5, r0
 8009a32:	b911      	cbnz	r1, 8009a3a <sbrk_aligned+0x12>
 8009a34:	f000 fdfe 	bl	800a634 <_sbrk_r>
 8009a38:	6030      	str	r0, [r6, #0]
 8009a3a:	4621      	mov	r1, r4
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	f000 fdf9 	bl	800a634 <_sbrk_r>
 8009a42:	1c43      	adds	r3, r0, #1
 8009a44:	d00a      	beq.n	8009a5c <sbrk_aligned+0x34>
 8009a46:	1cc4      	adds	r4, r0, #3
 8009a48:	f024 0403 	bic.w	r4, r4, #3
 8009a4c:	42a0      	cmp	r0, r4
 8009a4e:	d007      	beq.n	8009a60 <sbrk_aligned+0x38>
 8009a50:	1a21      	subs	r1, r4, r0
 8009a52:	4628      	mov	r0, r5
 8009a54:	f000 fdee 	bl	800a634 <_sbrk_r>
 8009a58:	3001      	adds	r0, #1
 8009a5a:	d101      	bne.n	8009a60 <sbrk_aligned+0x38>
 8009a5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009a60:	4620      	mov	r0, r4
 8009a62:	bd70      	pop	{r4, r5, r6, pc}
 8009a64:	20000a78 	.word	0x20000a78

08009a68 <_malloc_r>:
 8009a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a6c:	1ccd      	adds	r5, r1, #3
 8009a6e:	f025 0503 	bic.w	r5, r5, #3
 8009a72:	3508      	adds	r5, #8
 8009a74:	2d0c      	cmp	r5, #12
 8009a76:	bf38      	it	cc
 8009a78:	250c      	movcc	r5, #12
 8009a7a:	2d00      	cmp	r5, #0
 8009a7c:	4607      	mov	r7, r0
 8009a7e:	db01      	blt.n	8009a84 <_malloc_r+0x1c>
 8009a80:	42a9      	cmp	r1, r5
 8009a82:	d905      	bls.n	8009a90 <_malloc_r+0x28>
 8009a84:	230c      	movs	r3, #12
 8009a86:	603b      	str	r3, [r7, #0]
 8009a88:	2600      	movs	r6, #0
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009b64 <_malloc_r+0xfc>
 8009a94:	f000 fa2c 	bl	8009ef0 <__malloc_lock>
 8009a98:	f8d8 3000 	ldr.w	r3, [r8]
 8009a9c:	461c      	mov	r4, r3
 8009a9e:	bb5c      	cbnz	r4, 8009af8 <_malloc_r+0x90>
 8009aa0:	4629      	mov	r1, r5
 8009aa2:	4638      	mov	r0, r7
 8009aa4:	f7ff ffc0 	bl	8009a28 <sbrk_aligned>
 8009aa8:	1c43      	adds	r3, r0, #1
 8009aaa:	4604      	mov	r4, r0
 8009aac:	d155      	bne.n	8009b5a <_malloc_r+0xf2>
 8009aae:	f8d8 4000 	ldr.w	r4, [r8]
 8009ab2:	4626      	mov	r6, r4
 8009ab4:	2e00      	cmp	r6, #0
 8009ab6:	d145      	bne.n	8009b44 <_malloc_r+0xdc>
 8009ab8:	2c00      	cmp	r4, #0
 8009aba:	d048      	beq.n	8009b4e <_malloc_r+0xe6>
 8009abc:	6823      	ldr	r3, [r4, #0]
 8009abe:	4631      	mov	r1, r6
 8009ac0:	4638      	mov	r0, r7
 8009ac2:	eb04 0903 	add.w	r9, r4, r3
 8009ac6:	f000 fdb5 	bl	800a634 <_sbrk_r>
 8009aca:	4581      	cmp	r9, r0
 8009acc:	d13f      	bne.n	8009b4e <_malloc_r+0xe6>
 8009ace:	6821      	ldr	r1, [r4, #0]
 8009ad0:	1a6d      	subs	r5, r5, r1
 8009ad2:	4629      	mov	r1, r5
 8009ad4:	4638      	mov	r0, r7
 8009ad6:	f7ff ffa7 	bl	8009a28 <sbrk_aligned>
 8009ada:	3001      	adds	r0, #1
 8009adc:	d037      	beq.n	8009b4e <_malloc_r+0xe6>
 8009ade:	6823      	ldr	r3, [r4, #0]
 8009ae0:	442b      	add	r3, r5
 8009ae2:	6023      	str	r3, [r4, #0]
 8009ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d038      	beq.n	8009b5e <_malloc_r+0xf6>
 8009aec:	685a      	ldr	r2, [r3, #4]
 8009aee:	42a2      	cmp	r2, r4
 8009af0:	d12b      	bne.n	8009b4a <_malloc_r+0xe2>
 8009af2:	2200      	movs	r2, #0
 8009af4:	605a      	str	r2, [r3, #4]
 8009af6:	e00f      	b.n	8009b18 <_malloc_r+0xb0>
 8009af8:	6822      	ldr	r2, [r4, #0]
 8009afa:	1b52      	subs	r2, r2, r5
 8009afc:	d41f      	bmi.n	8009b3e <_malloc_r+0xd6>
 8009afe:	2a0b      	cmp	r2, #11
 8009b00:	d917      	bls.n	8009b32 <_malloc_r+0xca>
 8009b02:	1961      	adds	r1, r4, r5
 8009b04:	42a3      	cmp	r3, r4
 8009b06:	6025      	str	r5, [r4, #0]
 8009b08:	bf18      	it	ne
 8009b0a:	6059      	strne	r1, [r3, #4]
 8009b0c:	6863      	ldr	r3, [r4, #4]
 8009b0e:	bf08      	it	eq
 8009b10:	f8c8 1000 	streq.w	r1, [r8]
 8009b14:	5162      	str	r2, [r4, r5]
 8009b16:	604b      	str	r3, [r1, #4]
 8009b18:	4638      	mov	r0, r7
 8009b1a:	f104 060b 	add.w	r6, r4, #11
 8009b1e:	f000 f9ed 	bl	8009efc <__malloc_unlock>
 8009b22:	f026 0607 	bic.w	r6, r6, #7
 8009b26:	1d23      	adds	r3, r4, #4
 8009b28:	1af2      	subs	r2, r6, r3
 8009b2a:	d0ae      	beq.n	8009a8a <_malloc_r+0x22>
 8009b2c:	1b9b      	subs	r3, r3, r6
 8009b2e:	50a3      	str	r3, [r4, r2]
 8009b30:	e7ab      	b.n	8009a8a <_malloc_r+0x22>
 8009b32:	42a3      	cmp	r3, r4
 8009b34:	6862      	ldr	r2, [r4, #4]
 8009b36:	d1dd      	bne.n	8009af4 <_malloc_r+0x8c>
 8009b38:	f8c8 2000 	str.w	r2, [r8]
 8009b3c:	e7ec      	b.n	8009b18 <_malloc_r+0xb0>
 8009b3e:	4623      	mov	r3, r4
 8009b40:	6864      	ldr	r4, [r4, #4]
 8009b42:	e7ac      	b.n	8009a9e <_malloc_r+0x36>
 8009b44:	4634      	mov	r4, r6
 8009b46:	6876      	ldr	r6, [r6, #4]
 8009b48:	e7b4      	b.n	8009ab4 <_malloc_r+0x4c>
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	e7cc      	b.n	8009ae8 <_malloc_r+0x80>
 8009b4e:	230c      	movs	r3, #12
 8009b50:	603b      	str	r3, [r7, #0]
 8009b52:	4638      	mov	r0, r7
 8009b54:	f000 f9d2 	bl	8009efc <__malloc_unlock>
 8009b58:	e797      	b.n	8009a8a <_malloc_r+0x22>
 8009b5a:	6025      	str	r5, [r4, #0]
 8009b5c:	e7dc      	b.n	8009b18 <_malloc_r+0xb0>
 8009b5e:	605b      	str	r3, [r3, #4]
 8009b60:	deff      	udf	#255	; 0xff
 8009b62:	bf00      	nop
 8009b64:	20000a74 	.word	0x20000a74

08009b68 <_printf_common>:
 8009b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b6c:	4616      	mov	r6, r2
 8009b6e:	4699      	mov	r9, r3
 8009b70:	688a      	ldr	r2, [r1, #8]
 8009b72:	690b      	ldr	r3, [r1, #16]
 8009b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	bfb8      	it	lt
 8009b7c:	4613      	movlt	r3, r2
 8009b7e:	6033      	str	r3, [r6, #0]
 8009b80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b84:	4607      	mov	r7, r0
 8009b86:	460c      	mov	r4, r1
 8009b88:	b10a      	cbz	r2, 8009b8e <_printf_common+0x26>
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	6033      	str	r3, [r6, #0]
 8009b8e:	6823      	ldr	r3, [r4, #0]
 8009b90:	0699      	lsls	r1, r3, #26
 8009b92:	bf42      	ittt	mi
 8009b94:	6833      	ldrmi	r3, [r6, #0]
 8009b96:	3302      	addmi	r3, #2
 8009b98:	6033      	strmi	r3, [r6, #0]
 8009b9a:	6825      	ldr	r5, [r4, #0]
 8009b9c:	f015 0506 	ands.w	r5, r5, #6
 8009ba0:	d106      	bne.n	8009bb0 <_printf_common+0x48>
 8009ba2:	f104 0a19 	add.w	sl, r4, #25
 8009ba6:	68e3      	ldr	r3, [r4, #12]
 8009ba8:	6832      	ldr	r2, [r6, #0]
 8009baa:	1a9b      	subs	r3, r3, r2
 8009bac:	42ab      	cmp	r3, r5
 8009bae:	dc26      	bgt.n	8009bfe <_printf_common+0x96>
 8009bb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bb4:	1e13      	subs	r3, r2, #0
 8009bb6:	6822      	ldr	r2, [r4, #0]
 8009bb8:	bf18      	it	ne
 8009bba:	2301      	movne	r3, #1
 8009bbc:	0692      	lsls	r2, r2, #26
 8009bbe:	d42b      	bmi.n	8009c18 <_printf_common+0xb0>
 8009bc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bc4:	4649      	mov	r1, r9
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	47c0      	blx	r8
 8009bca:	3001      	adds	r0, #1
 8009bcc:	d01e      	beq.n	8009c0c <_printf_common+0xa4>
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	6922      	ldr	r2, [r4, #16]
 8009bd2:	f003 0306 	and.w	r3, r3, #6
 8009bd6:	2b04      	cmp	r3, #4
 8009bd8:	bf02      	ittt	eq
 8009bda:	68e5      	ldreq	r5, [r4, #12]
 8009bdc:	6833      	ldreq	r3, [r6, #0]
 8009bde:	1aed      	subeq	r5, r5, r3
 8009be0:	68a3      	ldr	r3, [r4, #8]
 8009be2:	bf0c      	ite	eq
 8009be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009be8:	2500      	movne	r5, #0
 8009bea:	4293      	cmp	r3, r2
 8009bec:	bfc4      	itt	gt
 8009bee:	1a9b      	subgt	r3, r3, r2
 8009bf0:	18ed      	addgt	r5, r5, r3
 8009bf2:	2600      	movs	r6, #0
 8009bf4:	341a      	adds	r4, #26
 8009bf6:	42b5      	cmp	r5, r6
 8009bf8:	d11a      	bne.n	8009c30 <_printf_common+0xc8>
 8009bfa:	2000      	movs	r0, #0
 8009bfc:	e008      	b.n	8009c10 <_printf_common+0xa8>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	4652      	mov	r2, sl
 8009c02:	4649      	mov	r1, r9
 8009c04:	4638      	mov	r0, r7
 8009c06:	47c0      	blx	r8
 8009c08:	3001      	adds	r0, #1
 8009c0a:	d103      	bne.n	8009c14 <_printf_common+0xac>
 8009c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c14:	3501      	adds	r5, #1
 8009c16:	e7c6      	b.n	8009ba6 <_printf_common+0x3e>
 8009c18:	18e1      	adds	r1, r4, r3
 8009c1a:	1c5a      	adds	r2, r3, #1
 8009c1c:	2030      	movs	r0, #48	; 0x30
 8009c1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c22:	4422      	add	r2, r4
 8009c24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c2c:	3302      	adds	r3, #2
 8009c2e:	e7c7      	b.n	8009bc0 <_printf_common+0x58>
 8009c30:	2301      	movs	r3, #1
 8009c32:	4622      	mov	r2, r4
 8009c34:	4649      	mov	r1, r9
 8009c36:	4638      	mov	r0, r7
 8009c38:	47c0      	blx	r8
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	d0e6      	beq.n	8009c0c <_printf_common+0xa4>
 8009c3e:	3601      	adds	r6, #1
 8009c40:	e7d9      	b.n	8009bf6 <_printf_common+0x8e>
	...

08009c44 <_printf_i>:
 8009c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c48:	7e0f      	ldrb	r7, [r1, #24]
 8009c4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c4c:	2f78      	cmp	r7, #120	; 0x78
 8009c4e:	4691      	mov	r9, r2
 8009c50:	4680      	mov	r8, r0
 8009c52:	460c      	mov	r4, r1
 8009c54:	469a      	mov	sl, r3
 8009c56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c5a:	d807      	bhi.n	8009c6c <_printf_i+0x28>
 8009c5c:	2f62      	cmp	r7, #98	; 0x62
 8009c5e:	d80a      	bhi.n	8009c76 <_printf_i+0x32>
 8009c60:	2f00      	cmp	r7, #0
 8009c62:	f000 80d4 	beq.w	8009e0e <_printf_i+0x1ca>
 8009c66:	2f58      	cmp	r7, #88	; 0x58
 8009c68:	f000 80c0 	beq.w	8009dec <_printf_i+0x1a8>
 8009c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c74:	e03a      	b.n	8009cec <_printf_i+0xa8>
 8009c76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c7a:	2b15      	cmp	r3, #21
 8009c7c:	d8f6      	bhi.n	8009c6c <_printf_i+0x28>
 8009c7e:	a101      	add	r1, pc, #4	; (adr r1, 8009c84 <_printf_i+0x40>)
 8009c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c84:	08009cdd 	.word	0x08009cdd
 8009c88:	08009cf1 	.word	0x08009cf1
 8009c8c:	08009c6d 	.word	0x08009c6d
 8009c90:	08009c6d 	.word	0x08009c6d
 8009c94:	08009c6d 	.word	0x08009c6d
 8009c98:	08009c6d 	.word	0x08009c6d
 8009c9c:	08009cf1 	.word	0x08009cf1
 8009ca0:	08009c6d 	.word	0x08009c6d
 8009ca4:	08009c6d 	.word	0x08009c6d
 8009ca8:	08009c6d 	.word	0x08009c6d
 8009cac:	08009c6d 	.word	0x08009c6d
 8009cb0:	08009df5 	.word	0x08009df5
 8009cb4:	08009d1d 	.word	0x08009d1d
 8009cb8:	08009daf 	.word	0x08009daf
 8009cbc:	08009c6d 	.word	0x08009c6d
 8009cc0:	08009c6d 	.word	0x08009c6d
 8009cc4:	08009e17 	.word	0x08009e17
 8009cc8:	08009c6d 	.word	0x08009c6d
 8009ccc:	08009d1d 	.word	0x08009d1d
 8009cd0:	08009c6d 	.word	0x08009c6d
 8009cd4:	08009c6d 	.word	0x08009c6d
 8009cd8:	08009db7 	.word	0x08009db7
 8009cdc:	682b      	ldr	r3, [r5, #0]
 8009cde:	1d1a      	adds	r2, r3, #4
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	602a      	str	r2, [r5, #0]
 8009ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cec:	2301      	movs	r3, #1
 8009cee:	e09f      	b.n	8009e30 <_printf_i+0x1ec>
 8009cf0:	6820      	ldr	r0, [r4, #0]
 8009cf2:	682b      	ldr	r3, [r5, #0]
 8009cf4:	0607      	lsls	r7, r0, #24
 8009cf6:	f103 0104 	add.w	r1, r3, #4
 8009cfa:	6029      	str	r1, [r5, #0]
 8009cfc:	d501      	bpl.n	8009d02 <_printf_i+0xbe>
 8009cfe:	681e      	ldr	r6, [r3, #0]
 8009d00:	e003      	b.n	8009d0a <_printf_i+0xc6>
 8009d02:	0646      	lsls	r6, r0, #25
 8009d04:	d5fb      	bpl.n	8009cfe <_printf_i+0xba>
 8009d06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009d0a:	2e00      	cmp	r6, #0
 8009d0c:	da03      	bge.n	8009d16 <_printf_i+0xd2>
 8009d0e:	232d      	movs	r3, #45	; 0x2d
 8009d10:	4276      	negs	r6, r6
 8009d12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d16:	485a      	ldr	r0, [pc, #360]	; (8009e80 <_printf_i+0x23c>)
 8009d18:	230a      	movs	r3, #10
 8009d1a:	e012      	b.n	8009d42 <_printf_i+0xfe>
 8009d1c:	682b      	ldr	r3, [r5, #0]
 8009d1e:	6820      	ldr	r0, [r4, #0]
 8009d20:	1d19      	adds	r1, r3, #4
 8009d22:	6029      	str	r1, [r5, #0]
 8009d24:	0605      	lsls	r5, r0, #24
 8009d26:	d501      	bpl.n	8009d2c <_printf_i+0xe8>
 8009d28:	681e      	ldr	r6, [r3, #0]
 8009d2a:	e002      	b.n	8009d32 <_printf_i+0xee>
 8009d2c:	0641      	lsls	r1, r0, #25
 8009d2e:	d5fb      	bpl.n	8009d28 <_printf_i+0xe4>
 8009d30:	881e      	ldrh	r6, [r3, #0]
 8009d32:	4853      	ldr	r0, [pc, #332]	; (8009e80 <_printf_i+0x23c>)
 8009d34:	2f6f      	cmp	r7, #111	; 0x6f
 8009d36:	bf0c      	ite	eq
 8009d38:	2308      	moveq	r3, #8
 8009d3a:	230a      	movne	r3, #10
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d42:	6865      	ldr	r5, [r4, #4]
 8009d44:	60a5      	str	r5, [r4, #8]
 8009d46:	2d00      	cmp	r5, #0
 8009d48:	bfa2      	ittt	ge
 8009d4a:	6821      	ldrge	r1, [r4, #0]
 8009d4c:	f021 0104 	bicge.w	r1, r1, #4
 8009d50:	6021      	strge	r1, [r4, #0]
 8009d52:	b90e      	cbnz	r6, 8009d58 <_printf_i+0x114>
 8009d54:	2d00      	cmp	r5, #0
 8009d56:	d04b      	beq.n	8009df0 <_printf_i+0x1ac>
 8009d58:	4615      	mov	r5, r2
 8009d5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d5e:	fb03 6711 	mls	r7, r3, r1, r6
 8009d62:	5dc7      	ldrb	r7, [r0, r7]
 8009d64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d68:	4637      	mov	r7, r6
 8009d6a:	42bb      	cmp	r3, r7
 8009d6c:	460e      	mov	r6, r1
 8009d6e:	d9f4      	bls.n	8009d5a <_printf_i+0x116>
 8009d70:	2b08      	cmp	r3, #8
 8009d72:	d10b      	bne.n	8009d8c <_printf_i+0x148>
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	07de      	lsls	r6, r3, #31
 8009d78:	d508      	bpl.n	8009d8c <_printf_i+0x148>
 8009d7a:	6923      	ldr	r3, [r4, #16]
 8009d7c:	6861      	ldr	r1, [r4, #4]
 8009d7e:	4299      	cmp	r1, r3
 8009d80:	bfde      	ittt	le
 8009d82:	2330      	movle	r3, #48	; 0x30
 8009d84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009d8c:	1b52      	subs	r2, r2, r5
 8009d8e:	6122      	str	r2, [r4, #16]
 8009d90:	f8cd a000 	str.w	sl, [sp]
 8009d94:	464b      	mov	r3, r9
 8009d96:	aa03      	add	r2, sp, #12
 8009d98:	4621      	mov	r1, r4
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	f7ff fee4 	bl	8009b68 <_printf_common>
 8009da0:	3001      	adds	r0, #1
 8009da2:	d14a      	bne.n	8009e3a <_printf_i+0x1f6>
 8009da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009da8:	b004      	add	sp, #16
 8009daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dae:	6823      	ldr	r3, [r4, #0]
 8009db0:	f043 0320 	orr.w	r3, r3, #32
 8009db4:	6023      	str	r3, [r4, #0]
 8009db6:	4833      	ldr	r0, [pc, #204]	; (8009e84 <_printf_i+0x240>)
 8009db8:	2778      	movs	r7, #120	; 0x78
 8009dba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009dbe:	6823      	ldr	r3, [r4, #0]
 8009dc0:	6829      	ldr	r1, [r5, #0]
 8009dc2:	061f      	lsls	r7, r3, #24
 8009dc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009dc8:	d402      	bmi.n	8009dd0 <_printf_i+0x18c>
 8009dca:	065f      	lsls	r7, r3, #25
 8009dcc:	bf48      	it	mi
 8009dce:	b2b6      	uxthmi	r6, r6
 8009dd0:	07df      	lsls	r7, r3, #31
 8009dd2:	bf48      	it	mi
 8009dd4:	f043 0320 	orrmi.w	r3, r3, #32
 8009dd8:	6029      	str	r1, [r5, #0]
 8009dda:	bf48      	it	mi
 8009ddc:	6023      	strmi	r3, [r4, #0]
 8009dde:	b91e      	cbnz	r6, 8009de8 <_printf_i+0x1a4>
 8009de0:	6823      	ldr	r3, [r4, #0]
 8009de2:	f023 0320 	bic.w	r3, r3, #32
 8009de6:	6023      	str	r3, [r4, #0]
 8009de8:	2310      	movs	r3, #16
 8009dea:	e7a7      	b.n	8009d3c <_printf_i+0xf8>
 8009dec:	4824      	ldr	r0, [pc, #144]	; (8009e80 <_printf_i+0x23c>)
 8009dee:	e7e4      	b.n	8009dba <_printf_i+0x176>
 8009df0:	4615      	mov	r5, r2
 8009df2:	e7bd      	b.n	8009d70 <_printf_i+0x12c>
 8009df4:	682b      	ldr	r3, [r5, #0]
 8009df6:	6826      	ldr	r6, [r4, #0]
 8009df8:	6961      	ldr	r1, [r4, #20]
 8009dfa:	1d18      	adds	r0, r3, #4
 8009dfc:	6028      	str	r0, [r5, #0]
 8009dfe:	0635      	lsls	r5, r6, #24
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	d501      	bpl.n	8009e08 <_printf_i+0x1c4>
 8009e04:	6019      	str	r1, [r3, #0]
 8009e06:	e002      	b.n	8009e0e <_printf_i+0x1ca>
 8009e08:	0670      	lsls	r0, r6, #25
 8009e0a:	d5fb      	bpl.n	8009e04 <_printf_i+0x1c0>
 8009e0c:	8019      	strh	r1, [r3, #0]
 8009e0e:	2300      	movs	r3, #0
 8009e10:	6123      	str	r3, [r4, #16]
 8009e12:	4615      	mov	r5, r2
 8009e14:	e7bc      	b.n	8009d90 <_printf_i+0x14c>
 8009e16:	682b      	ldr	r3, [r5, #0]
 8009e18:	1d1a      	adds	r2, r3, #4
 8009e1a:	602a      	str	r2, [r5, #0]
 8009e1c:	681d      	ldr	r5, [r3, #0]
 8009e1e:	6862      	ldr	r2, [r4, #4]
 8009e20:	2100      	movs	r1, #0
 8009e22:	4628      	mov	r0, r5
 8009e24:	f7f6 f9d4 	bl	80001d0 <memchr>
 8009e28:	b108      	cbz	r0, 8009e2e <_printf_i+0x1ea>
 8009e2a:	1b40      	subs	r0, r0, r5
 8009e2c:	6060      	str	r0, [r4, #4]
 8009e2e:	6863      	ldr	r3, [r4, #4]
 8009e30:	6123      	str	r3, [r4, #16]
 8009e32:	2300      	movs	r3, #0
 8009e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e38:	e7aa      	b.n	8009d90 <_printf_i+0x14c>
 8009e3a:	6923      	ldr	r3, [r4, #16]
 8009e3c:	462a      	mov	r2, r5
 8009e3e:	4649      	mov	r1, r9
 8009e40:	4640      	mov	r0, r8
 8009e42:	47d0      	blx	sl
 8009e44:	3001      	adds	r0, #1
 8009e46:	d0ad      	beq.n	8009da4 <_printf_i+0x160>
 8009e48:	6823      	ldr	r3, [r4, #0]
 8009e4a:	079b      	lsls	r3, r3, #30
 8009e4c:	d413      	bmi.n	8009e76 <_printf_i+0x232>
 8009e4e:	68e0      	ldr	r0, [r4, #12]
 8009e50:	9b03      	ldr	r3, [sp, #12]
 8009e52:	4298      	cmp	r0, r3
 8009e54:	bfb8      	it	lt
 8009e56:	4618      	movlt	r0, r3
 8009e58:	e7a6      	b.n	8009da8 <_printf_i+0x164>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	4632      	mov	r2, r6
 8009e5e:	4649      	mov	r1, r9
 8009e60:	4640      	mov	r0, r8
 8009e62:	47d0      	blx	sl
 8009e64:	3001      	adds	r0, #1
 8009e66:	d09d      	beq.n	8009da4 <_printf_i+0x160>
 8009e68:	3501      	adds	r5, #1
 8009e6a:	68e3      	ldr	r3, [r4, #12]
 8009e6c:	9903      	ldr	r1, [sp, #12]
 8009e6e:	1a5b      	subs	r3, r3, r1
 8009e70:	42ab      	cmp	r3, r5
 8009e72:	dcf2      	bgt.n	8009e5a <_printf_i+0x216>
 8009e74:	e7eb      	b.n	8009e4e <_printf_i+0x20a>
 8009e76:	2500      	movs	r5, #0
 8009e78:	f104 0619 	add.w	r6, r4, #25
 8009e7c:	e7f5      	b.n	8009e6a <_printf_i+0x226>
 8009e7e:	bf00      	nop
 8009e80:	0800f35a 	.word	0x0800f35a
 8009e84:	0800f36b 	.word	0x0800f36b

08009e88 <sniprintf>:
 8009e88:	b40c      	push	{r2, r3}
 8009e8a:	b530      	push	{r4, r5, lr}
 8009e8c:	4b17      	ldr	r3, [pc, #92]	; (8009eec <sniprintf+0x64>)
 8009e8e:	1e0c      	subs	r4, r1, #0
 8009e90:	681d      	ldr	r5, [r3, #0]
 8009e92:	b09d      	sub	sp, #116	; 0x74
 8009e94:	da08      	bge.n	8009ea8 <sniprintf+0x20>
 8009e96:	238b      	movs	r3, #139	; 0x8b
 8009e98:	602b      	str	r3, [r5, #0]
 8009e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e9e:	b01d      	add	sp, #116	; 0x74
 8009ea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ea4:	b002      	add	sp, #8
 8009ea6:	4770      	bx	lr
 8009ea8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009eac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009eb0:	bf14      	ite	ne
 8009eb2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009eb6:	4623      	moveq	r3, r4
 8009eb8:	9304      	str	r3, [sp, #16]
 8009eba:	9307      	str	r3, [sp, #28]
 8009ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ec0:	9002      	str	r0, [sp, #8]
 8009ec2:	9006      	str	r0, [sp, #24]
 8009ec4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009ec8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009eca:	ab21      	add	r3, sp, #132	; 0x84
 8009ecc:	a902      	add	r1, sp, #8
 8009ece:	4628      	mov	r0, r5
 8009ed0:	9301      	str	r3, [sp, #4]
 8009ed2:	f001 fb59 	bl	800b588 <_svfiprintf_r>
 8009ed6:	1c43      	adds	r3, r0, #1
 8009ed8:	bfbc      	itt	lt
 8009eda:	238b      	movlt	r3, #139	; 0x8b
 8009edc:	602b      	strlt	r3, [r5, #0]
 8009ede:	2c00      	cmp	r4, #0
 8009ee0:	d0dd      	beq.n	8009e9e <sniprintf+0x16>
 8009ee2:	9b02      	ldr	r3, [sp, #8]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	701a      	strb	r2, [r3, #0]
 8009ee8:	e7d9      	b.n	8009e9e <sniprintf+0x16>
 8009eea:	bf00      	nop
 8009eec:	200001f8 	.word	0x200001f8

08009ef0 <__malloc_lock>:
 8009ef0:	4801      	ldr	r0, [pc, #4]	; (8009ef8 <__malloc_lock+0x8>)
 8009ef2:	f000 bbec 	b.w	800a6ce <__retarget_lock_acquire_recursive>
 8009ef6:	bf00      	nop
 8009ef8:	20000bbc 	.word	0x20000bbc

08009efc <__malloc_unlock>:
 8009efc:	4801      	ldr	r0, [pc, #4]	; (8009f04 <__malloc_unlock+0x8>)
 8009efe:	f000 bbe7 	b.w	800a6d0 <__retarget_lock_release_recursive>
 8009f02:	bf00      	nop
 8009f04:	20000bbc 	.word	0x20000bbc

08009f08 <__sread>:
 8009f08:	b510      	push	{r4, lr}
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f10:	f000 fb3a 	bl	800a588 <_read_r>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	bfab      	itete	ge
 8009f18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8009f1c:	181b      	addge	r3, r3, r0
 8009f1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f22:	bfac      	ite	ge
 8009f24:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f26:	81a3      	strhlt	r3, [r4, #12]
 8009f28:	bd10      	pop	{r4, pc}

08009f2a <__swrite>:
 8009f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2e:	461f      	mov	r7, r3
 8009f30:	898b      	ldrh	r3, [r1, #12]
 8009f32:	05db      	lsls	r3, r3, #23
 8009f34:	4605      	mov	r5, r0
 8009f36:	460c      	mov	r4, r1
 8009f38:	4616      	mov	r6, r2
 8009f3a:	d505      	bpl.n	8009f48 <__swrite+0x1e>
 8009f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f40:	2302      	movs	r3, #2
 8009f42:	2200      	movs	r2, #0
 8009f44:	f000 fb0e 	bl	800a564 <_lseek_r>
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f52:	81a3      	strh	r3, [r4, #12]
 8009f54:	4632      	mov	r2, r6
 8009f56:	463b      	mov	r3, r7
 8009f58:	4628      	mov	r0, r5
 8009f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f5e:	f000 bb79 	b.w	800a654 <_write_r>

08009f62 <__sseek>:
 8009f62:	b510      	push	{r4, lr}
 8009f64:	460c      	mov	r4, r1
 8009f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f6a:	f000 fafb 	bl	800a564 <_lseek_r>
 8009f6e:	1c43      	adds	r3, r0, #1
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	bf15      	itete	ne
 8009f74:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f7e:	81a3      	strheq	r3, [r4, #12]
 8009f80:	bf18      	it	ne
 8009f82:	81a3      	strhne	r3, [r4, #12]
 8009f84:	bd10      	pop	{r4, pc}

08009f86 <__sclose>:
 8009f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f8a:	f000 badb 	b.w	800a544 <_close_r>
	...

08009f90 <std>:
 8009f90:	2300      	movs	r3, #0
 8009f92:	b510      	push	{r4, lr}
 8009f94:	4604      	mov	r4, r0
 8009f96:	e9c0 3300 	strd	r3, r3, [r0]
 8009f9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f9e:	6083      	str	r3, [r0, #8]
 8009fa0:	8181      	strh	r1, [r0, #12]
 8009fa2:	6643      	str	r3, [r0, #100]	; 0x64
 8009fa4:	81c2      	strh	r2, [r0, #14]
 8009fa6:	6183      	str	r3, [r0, #24]
 8009fa8:	4619      	mov	r1, r3
 8009faa:	2208      	movs	r2, #8
 8009fac:	305c      	adds	r0, #92	; 0x5c
 8009fae:	f000 fabd 	bl	800a52c <memset>
 8009fb2:	4b0d      	ldr	r3, [pc, #52]	; (8009fe8 <std+0x58>)
 8009fb4:	6263      	str	r3, [r4, #36]	; 0x24
 8009fb6:	4b0d      	ldr	r3, [pc, #52]	; (8009fec <std+0x5c>)
 8009fb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fba:	4b0d      	ldr	r3, [pc, #52]	; (8009ff0 <std+0x60>)
 8009fbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fbe:	4b0d      	ldr	r3, [pc, #52]	; (8009ff4 <std+0x64>)
 8009fc0:	6323      	str	r3, [r4, #48]	; 0x30
 8009fc2:	4b0d      	ldr	r3, [pc, #52]	; (8009ff8 <std+0x68>)
 8009fc4:	6224      	str	r4, [r4, #32]
 8009fc6:	429c      	cmp	r4, r3
 8009fc8:	d006      	beq.n	8009fd8 <std+0x48>
 8009fca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009fce:	4294      	cmp	r4, r2
 8009fd0:	d002      	beq.n	8009fd8 <std+0x48>
 8009fd2:	33d0      	adds	r3, #208	; 0xd0
 8009fd4:	429c      	cmp	r4, r3
 8009fd6:	d105      	bne.n	8009fe4 <std+0x54>
 8009fd8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fe0:	f000 bb74 	b.w	800a6cc <__retarget_lock_init_recursive>
 8009fe4:	bd10      	pop	{r4, pc}
 8009fe6:	bf00      	nop
 8009fe8:	08009f09 	.word	0x08009f09
 8009fec:	08009f2b 	.word	0x08009f2b
 8009ff0:	08009f63 	.word	0x08009f63
 8009ff4:	08009f87 	.word	0x08009f87
 8009ff8:	20000a7c 	.word	0x20000a7c

08009ffc <stdio_exit_handler>:
 8009ffc:	4a02      	ldr	r2, [pc, #8]	; (800a008 <stdio_exit_handler+0xc>)
 8009ffe:	4903      	ldr	r1, [pc, #12]	; (800a00c <stdio_exit_handler+0x10>)
 800a000:	4803      	ldr	r0, [pc, #12]	; (800a010 <stdio_exit_handler+0x14>)
 800a002:	f000 b869 	b.w	800a0d8 <_fwalk_sglue>
 800a006:	bf00      	nop
 800a008:	20000034 	.word	0x20000034
 800a00c:	0800b8b5 	.word	0x0800b8b5
 800a010:	200001ac 	.word	0x200001ac

0800a014 <cleanup_stdio>:
 800a014:	6841      	ldr	r1, [r0, #4]
 800a016:	4b0c      	ldr	r3, [pc, #48]	; (800a048 <cleanup_stdio+0x34>)
 800a018:	4299      	cmp	r1, r3
 800a01a:	b510      	push	{r4, lr}
 800a01c:	4604      	mov	r4, r0
 800a01e:	d001      	beq.n	800a024 <cleanup_stdio+0x10>
 800a020:	f001 fc48 	bl	800b8b4 <_fflush_r>
 800a024:	68a1      	ldr	r1, [r4, #8]
 800a026:	4b09      	ldr	r3, [pc, #36]	; (800a04c <cleanup_stdio+0x38>)
 800a028:	4299      	cmp	r1, r3
 800a02a:	d002      	beq.n	800a032 <cleanup_stdio+0x1e>
 800a02c:	4620      	mov	r0, r4
 800a02e:	f001 fc41 	bl	800b8b4 <_fflush_r>
 800a032:	68e1      	ldr	r1, [r4, #12]
 800a034:	4b06      	ldr	r3, [pc, #24]	; (800a050 <cleanup_stdio+0x3c>)
 800a036:	4299      	cmp	r1, r3
 800a038:	d004      	beq.n	800a044 <cleanup_stdio+0x30>
 800a03a:	4620      	mov	r0, r4
 800a03c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a040:	f001 bc38 	b.w	800b8b4 <_fflush_r>
 800a044:	bd10      	pop	{r4, pc}
 800a046:	bf00      	nop
 800a048:	20000a7c 	.word	0x20000a7c
 800a04c:	20000ae4 	.word	0x20000ae4
 800a050:	20000b4c 	.word	0x20000b4c

0800a054 <global_stdio_init.part.0>:
 800a054:	b510      	push	{r4, lr}
 800a056:	4b0b      	ldr	r3, [pc, #44]	; (800a084 <global_stdio_init.part.0+0x30>)
 800a058:	4c0b      	ldr	r4, [pc, #44]	; (800a088 <global_stdio_init.part.0+0x34>)
 800a05a:	4a0c      	ldr	r2, [pc, #48]	; (800a08c <global_stdio_init.part.0+0x38>)
 800a05c:	601a      	str	r2, [r3, #0]
 800a05e:	4620      	mov	r0, r4
 800a060:	2200      	movs	r2, #0
 800a062:	2104      	movs	r1, #4
 800a064:	f7ff ff94 	bl	8009f90 <std>
 800a068:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a06c:	2201      	movs	r2, #1
 800a06e:	2109      	movs	r1, #9
 800a070:	f7ff ff8e 	bl	8009f90 <std>
 800a074:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a078:	2202      	movs	r2, #2
 800a07a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a07e:	2112      	movs	r1, #18
 800a080:	f7ff bf86 	b.w	8009f90 <std>
 800a084:	20000bb4 	.word	0x20000bb4
 800a088:	20000a7c 	.word	0x20000a7c
 800a08c:	08009ffd 	.word	0x08009ffd

0800a090 <__sfp_lock_acquire>:
 800a090:	4801      	ldr	r0, [pc, #4]	; (800a098 <__sfp_lock_acquire+0x8>)
 800a092:	f000 bb1c 	b.w	800a6ce <__retarget_lock_acquire_recursive>
 800a096:	bf00      	nop
 800a098:	20000bbd 	.word	0x20000bbd

0800a09c <__sfp_lock_release>:
 800a09c:	4801      	ldr	r0, [pc, #4]	; (800a0a4 <__sfp_lock_release+0x8>)
 800a09e:	f000 bb17 	b.w	800a6d0 <__retarget_lock_release_recursive>
 800a0a2:	bf00      	nop
 800a0a4:	20000bbd 	.word	0x20000bbd

0800a0a8 <__sinit>:
 800a0a8:	b510      	push	{r4, lr}
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	f7ff fff0 	bl	800a090 <__sfp_lock_acquire>
 800a0b0:	6a23      	ldr	r3, [r4, #32]
 800a0b2:	b11b      	cbz	r3, 800a0bc <__sinit+0x14>
 800a0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0b8:	f7ff bff0 	b.w	800a09c <__sfp_lock_release>
 800a0bc:	4b04      	ldr	r3, [pc, #16]	; (800a0d0 <__sinit+0x28>)
 800a0be:	6223      	str	r3, [r4, #32]
 800a0c0:	4b04      	ldr	r3, [pc, #16]	; (800a0d4 <__sinit+0x2c>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d1f5      	bne.n	800a0b4 <__sinit+0xc>
 800a0c8:	f7ff ffc4 	bl	800a054 <global_stdio_init.part.0>
 800a0cc:	e7f2      	b.n	800a0b4 <__sinit+0xc>
 800a0ce:	bf00      	nop
 800a0d0:	0800a015 	.word	0x0800a015
 800a0d4:	20000bb4 	.word	0x20000bb4

0800a0d8 <_fwalk_sglue>:
 800a0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0dc:	4607      	mov	r7, r0
 800a0de:	4688      	mov	r8, r1
 800a0e0:	4614      	mov	r4, r2
 800a0e2:	2600      	movs	r6, #0
 800a0e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0e8:	f1b9 0901 	subs.w	r9, r9, #1
 800a0ec:	d505      	bpl.n	800a0fa <_fwalk_sglue+0x22>
 800a0ee:	6824      	ldr	r4, [r4, #0]
 800a0f0:	2c00      	cmp	r4, #0
 800a0f2:	d1f7      	bne.n	800a0e4 <_fwalk_sglue+0xc>
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0fa:	89ab      	ldrh	r3, [r5, #12]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d907      	bls.n	800a110 <_fwalk_sglue+0x38>
 800a100:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a104:	3301      	adds	r3, #1
 800a106:	d003      	beq.n	800a110 <_fwalk_sglue+0x38>
 800a108:	4629      	mov	r1, r5
 800a10a:	4638      	mov	r0, r7
 800a10c:	47c0      	blx	r8
 800a10e:	4306      	orrs	r6, r0
 800a110:	3568      	adds	r5, #104	; 0x68
 800a112:	e7e9      	b.n	800a0e8 <_fwalk_sglue+0x10>

0800a114 <_strerror_r>:
 800a114:	b510      	push	{r4, lr}
 800a116:	4604      	mov	r4, r0
 800a118:	4608      	mov	r0, r1
 800a11a:	4611      	mov	r1, r2
 800a11c:	288e      	cmp	r0, #142	; 0x8e
 800a11e:	f200 8130 	bhi.w	800a382 <_strerror_r+0x26e>
 800a122:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a126:	0139      	.short	0x0139
 800a128:	0092008f 	.word	0x0092008f
 800a12c:	00960094 	.word	0x00960094
 800a130:	009a0098 	.word	0x009a0098
 800a134:	009e009c 	.word	0x009e009c
 800a138:	00a400a2 	.word	0x00a400a2
 800a13c:	00aa00a8 	.word	0x00aa00a8
 800a140:	00ae00ac 	.word	0x00ae00ac
 800a144:	00b0012e 	.word	0x00b0012e
 800a148:	00b400b2 	.word	0x00b400b2
 800a14c:	00b800b6 	.word	0x00b800b6
 800a150:	00c000be 	.word	0x00c000be
 800a154:	00c800c6 	.word	0x00c800c6
 800a158:	00cc00ca 	.word	0x00cc00ca
 800a15c:	00d200ce 	.word	0x00d200ce
 800a160:	00d800d6 	.word	0x00d800d6
 800a164:	00dc00da 	.word	0x00dc00da
 800a168:	00e000de 	.word	0x00e000de
 800a16c:	00e400e2 	.word	0x00e400e2
 800a170:	012e012e 	.word	0x012e012e
 800a174:	012e012e 	.word	0x012e012e
 800a178:	012e012e 	.word	0x012e012e
 800a17c:	012e012e 	.word	0x012e012e
 800a180:	00ec00e8 	.word	0x00ec00e8
 800a184:	012e012e 	.word	0x012e012e
 800a188:	012e012e 	.word	0x012e012e
 800a18c:	012e012e 	.word	0x012e012e
 800a190:	012e012e 	.word	0x012e012e
 800a194:	012e012e 	.word	0x012e012e
 800a198:	012e012e 	.word	0x012e012e
 800a19c:	00ee012e 	.word	0x00ee012e
 800a1a0:	00f00108 	.word	0x00f00108
 800a1a4:	012e00f2 	.word	0x012e00f2
 800a1a8:	012e012e 	.word	0x012e012e
 800a1ac:	012e00f4 	.word	0x012e00f4
 800a1b0:	012e012e 	.word	0x012e012e
 800a1b4:	012e00f6 	.word	0x012e00f6
 800a1b8:	00fa012e 	.word	0x00fa012e
 800a1bc:	012e012e 	.word	0x012e012e
 800a1c0:	012e00fc 	.word	0x012e00fc
 800a1c4:	012e012e 	.word	0x012e012e
 800a1c8:	012e012e 	.word	0x012e012e
 800a1cc:	012e012e 	.word	0x012e012e
 800a1d0:	012e012e 	.word	0x012e012e
 800a1d4:	00fe012e 	.word	0x00fe012e
 800a1d8:	0100012e 	.word	0x0100012e
 800a1dc:	01040102 	.word	0x01040102
 800a1e0:	012e012e 	.word	0x012e012e
 800a1e4:	012e0126 	.word	0x012e0126
 800a1e8:	012e012e 	.word	0x012e012e
 800a1ec:	012e012e 	.word	0x012e012e
 800a1f0:	012e012e 	.word	0x012e012e
 800a1f4:	0114012e 	.word	0x0114012e
 800a1f8:	010a0106 	.word	0x010a0106
 800a1fc:	010e010c 	.word	0x010e010c
 800a200:	012e0110 	.word	0x012e0110
 800a204:	01160112 	.word	0x01160112
 800a208:	00ea011a 	.word	0x00ea011a
 800a20c:	012c00c2 	.word	0x012c00c2
 800a210:	00d000ba 	.word	0x00d000ba
 800a214:	00a000bc 	.word	0x00a000bc
 800a218:	012a00a6 	.word	0x012a00a6
 800a21c:	012e00f8 	.word	0x012e00f8
 800a220:	00c40118 	.word	0x00c40118
 800a224:	011c011e 	.word	0x011c011e
 800a228:	012e012e 	.word	0x012e012e
 800a22c:	012e012e 	.word	0x012e012e
 800a230:	00d4012e 	.word	0x00d4012e
 800a234:	012e012e 	.word	0x012e012e
 800a238:	00e6012e 	.word	0x00e6012e
 800a23c:	01200128 	.word	0x01200128
 800a240:	01240122 	.word	0x01240122
 800a244:	4b55      	ldr	r3, [pc, #340]	; (800a39c <_strerror_r+0x288>)
 800a246:	4618      	mov	r0, r3
 800a248:	bd10      	pop	{r4, pc}
 800a24a:	4b55      	ldr	r3, [pc, #340]	; (800a3a0 <_strerror_r+0x28c>)
 800a24c:	e7fb      	b.n	800a246 <_strerror_r+0x132>
 800a24e:	4b55      	ldr	r3, [pc, #340]	; (800a3a4 <_strerror_r+0x290>)
 800a250:	e7f9      	b.n	800a246 <_strerror_r+0x132>
 800a252:	4b55      	ldr	r3, [pc, #340]	; (800a3a8 <_strerror_r+0x294>)
 800a254:	e7f7      	b.n	800a246 <_strerror_r+0x132>
 800a256:	4b55      	ldr	r3, [pc, #340]	; (800a3ac <_strerror_r+0x298>)
 800a258:	e7f5      	b.n	800a246 <_strerror_r+0x132>
 800a25a:	4b55      	ldr	r3, [pc, #340]	; (800a3b0 <_strerror_r+0x29c>)
 800a25c:	e7f3      	b.n	800a246 <_strerror_r+0x132>
 800a25e:	4b55      	ldr	r3, [pc, #340]	; (800a3b4 <_strerror_r+0x2a0>)
 800a260:	e7f1      	b.n	800a246 <_strerror_r+0x132>
 800a262:	4b55      	ldr	r3, [pc, #340]	; (800a3b8 <_strerror_r+0x2a4>)
 800a264:	e7ef      	b.n	800a246 <_strerror_r+0x132>
 800a266:	4b55      	ldr	r3, [pc, #340]	; (800a3bc <_strerror_r+0x2a8>)
 800a268:	e7ed      	b.n	800a246 <_strerror_r+0x132>
 800a26a:	4b55      	ldr	r3, [pc, #340]	; (800a3c0 <_strerror_r+0x2ac>)
 800a26c:	e7eb      	b.n	800a246 <_strerror_r+0x132>
 800a26e:	4b55      	ldr	r3, [pc, #340]	; (800a3c4 <_strerror_r+0x2b0>)
 800a270:	e7e9      	b.n	800a246 <_strerror_r+0x132>
 800a272:	4b55      	ldr	r3, [pc, #340]	; (800a3c8 <_strerror_r+0x2b4>)
 800a274:	e7e7      	b.n	800a246 <_strerror_r+0x132>
 800a276:	4b55      	ldr	r3, [pc, #340]	; (800a3cc <_strerror_r+0x2b8>)
 800a278:	e7e5      	b.n	800a246 <_strerror_r+0x132>
 800a27a:	4b55      	ldr	r3, [pc, #340]	; (800a3d0 <_strerror_r+0x2bc>)
 800a27c:	e7e3      	b.n	800a246 <_strerror_r+0x132>
 800a27e:	4b55      	ldr	r3, [pc, #340]	; (800a3d4 <_strerror_r+0x2c0>)
 800a280:	e7e1      	b.n	800a246 <_strerror_r+0x132>
 800a282:	4b55      	ldr	r3, [pc, #340]	; (800a3d8 <_strerror_r+0x2c4>)
 800a284:	e7df      	b.n	800a246 <_strerror_r+0x132>
 800a286:	4b55      	ldr	r3, [pc, #340]	; (800a3dc <_strerror_r+0x2c8>)
 800a288:	e7dd      	b.n	800a246 <_strerror_r+0x132>
 800a28a:	4b55      	ldr	r3, [pc, #340]	; (800a3e0 <_strerror_r+0x2cc>)
 800a28c:	e7db      	b.n	800a246 <_strerror_r+0x132>
 800a28e:	4b55      	ldr	r3, [pc, #340]	; (800a3e4 <_strerror_r+0x2d0>)
 800a290:	e7d9      	b.n	800a246 <_strerror_r+0x132>
 800a292:	4b55      	ldr	r3, [pc, #340]	; (800a3e8 <_strerror_r+0x2d4>)
 800a294:	e7d7      	b.n	800a246 <_strerror_r+0x132>
 800a296:	4b55      	ldr	r3, [pc, #340]	; (800a3ec <_strerror_r+0x2d8>)
 800a298:	e7d5      	b.n	800a246 <_strerror_r+0x132>
 800a29a:	4b55      	ldr	r3, [pc, #340]	; (800a3f0 <_strerror_r+0x2dc>)
 800a29c:	e7d3      	b.n	800a246 <_strerror_r+0x132>
 800a29e:	4b55      	ldr	r3, [pc, #340]	; (800a3f4 <_strerror_r+0x2e0>)
 800a2a0:	e7d1      	b.n	800a246 <_strerror_r+0x132>
 800a2a2:	4b55      	ldr	r3, [pc, #340]	; (800a3f8 <_strerror_r+0x2e4>)
 800a2a4:	e7cf      	b.n	800a246 <_strerror_r+0x132>
 800a2a6:	4b55      	ldr	r3, [pc, #340]	; (800a3fc <_strerror_r+0x2e8>)
 800a2a8:	e7cd      	b.n	800a246 <_strerror_r+0x132>
 800a2aa:	4b55      	ldr	r3, [pc, #340]	; (800a400 <_strerror_r+0x2ec>)
 800a2ac:	e7cb      	b.n	800a246 <_strerror_r+0x132>
 800a2ae:	4b55      	ldr	r3, [pc, #340]	; (800a404 <_strerror_r+0x2f0>)
 800a2b0:	e7c9      	b.n	800a246 <_strerror_r+0x132>
 800a2b2:	4b55      	ldr	r3, [pc, #340]	; (800a408 <_strerror_r+0x2f4>)
 800a2b4:	e7c7      	b.n	800a246 <_strerror_r+0x132>
 800a2b6:	4b55      	ldr	r3, [pc, #340]	; (800a40c <_strerror_r+0x2f8>)
 800a2b8:	e7c5      	b.n	800a246 <_strerror_r+0x132>
 800a2ba:	4b55      	ldr	r3, [pc, #340]	; (800a410 <_strerror_r+0x2fc>)
 800a2bc:	e7c3      	b.n	800a246 <_strerror_r+0x132>
 800a2be:	4b55      	ldr	r3, [pc, #340]	; (800a414 <_strerror_r+0x300>)
 800a2c0:	e7c1      	b.n	800a246 <_strerror_r+0x132>
 800a2c2:	4b55      	ldr	r3, [pc, #340]	; (800a418 <_strerror_r+0x304>)
 800a2c4:	e7bf      	b.n	800a246 <_strerror_r+0x132>
 800a2c6:	4b55      	ldr	r3, [pc, #340]	; (800a41c <_strerror_r+0x308>)
 800a2c8:	e7bd      	b.n	800a246 <_strerror_r+0x132>
 800a2ca:	4b55      	ldr	r3, [pc, #340]	; (800a420 <_strerror_r+0x30c>)
 800a2cc:	e7bb      	b.n	800a246 <_strerror_r+0x132>
 800a2ce:	4b55      	ldr	r3, [pc, #340]	; (800a424 <_strerror_r+0x310>)
 800a2d0:	e7b9      	b.n	800a246 <_strerror_r+0x132>
 800a2d2:	4b55      	ldr	r3, [pc, #340]	; (800a428 <_strerror_r+0x314>)
 800a2d4:	e7b7      	b.n	800a246 <_strerror_r+0x132>
 800a2d6:	4b55      	ldr	r3, [pc, #340]	; (800a42c <_strerror_r+0x318>)
 800a2d8:	e7b5      	b.n	800a246 <_strerror_r+0x132>
 800a2da:	4b55      	ldr	r3, [pc, #340]	; (800a430 <_strerror_r+0x31c>)
 800a2dc:	e7b3      	b.n	800a246 <_strerror_r+0x132>
 800a2de:	4b55      	ldr	r3, [pc, #340]	; (800a434 <_strerror_r+0x320>)
 800a2e0:	e7b1      	b.n	800a246 <_strerror_r+0x132>
 800a2e2:	4b55      	ldr	r3, [pc, #340]	; (800a438 <_strerror_r+0x324>)
 800a2e4:	e7af      	b.n	800a246 <_strerror_r+0x132>
 800a2e6:	4b55      	ldr	r3, [pc, #340]	; (800a43c <_strerror_r+0x328>)
 800a2e8:	e7ad      	b.n	800a246 <_strerror_r+0x132>
 800a2ea:	4b55      	ldr	r3, [pc, #340]	; (800a440 <_strerror_r+0x32c>)
 800a2ec:	e7ab      	b.n	800a246 <_strerror_r+0x132>
 800a2ee:	4b55      	ldr	r3, [pc, #340]	; (800a444 <_strerror_r+0x330>)
 800a2f0:	e7a9      	b.n	800a246 <_strerror_r+0x132>
 800a2f2:	4b55      	ldr	r3, [pc, #340]	; (800a448 <_strerror_r+0x334>)
 800a2f4:	e7a7      	b.n	800a246 <_strerror_r+0x132>
 800a2f6:	4b55      	ldr	r3, [pc, #340]	; (800a44c <_strerror_r+0x338>)
 800a2f8:	e7a5      	b.n	800a246 <_strerror_r+0x132>
 800a2fa:	4b55      	ldr	r3, [pc, #340]	; (800a450 <_strerror_r+0x33c>)
 800a2fc:	e7a3      	b.n	800a246 <_strerror_r+0x132>
 800a2fe:	4b55      	ldr	r3, [pc, #340]	; (800a454 <_strerror_r+0x340>)
 800a300:	e7a1      	b.n	800a246 <_strerror_r+0x132>
 800a302:	4b55      	ldr	r3, [pc, #340]	; (800a458 <_strerror_r+0x344>)
 800a304:	e79f      	b.n	800a246 <_strerror_r+0x132>
 800a306:	4b55      	ldr	r3, [pc, #340]	; (800a45c <_strerror_r+0x348>)
 800a308:	e79d      	b.n	800a246 <_strerror_r+0x132>
 800a30a:	4b55      	ldr	r3, [pc, #340]	; (800a460 <_strerror_r+0x34c>)
 800a30c:	e79b      	b.n	800a246 <_strerror_r+0x132>
 800a30e:	4b55      	ldr	r3, [pc, #340]	; (800a464 <_strerror_r+0x350>)
 800a310:	e799      	b.n	800a246 <_strerror_r+0x132>
 800a312:	4b55      	ldr	r3, [pc, #340]	; (800a468 <_strerror_r+0x354>)
 800a314:	e797      	b.n	800a246 <_strerror_r+0x132>
 800a316:	4b55      	ldr	r3, [pc, #340]	; (800a46c <_strerror_r+0x358>)
 800a318:	e795      	b.n	800a246 <_strerror_r+0x132>
 800a31a:	4b55      	ldr	r3, [pc, #340]	; (800a470 <_strerror_r+0x35c>)
 800a31c:	e793      	b.n	800a246 <_strerror_r+0x132>
 800a31e:	4b55      	ldr	r3, [pc, #340]	; (800a474 <_strerror_r+0x360>)
 800a320:	e791      	b.n	800a246 <_strerror_r+0x132>
 800a322:	4b55      	ldr	r3, [pc, #340]	; (800a478 <_strerror_r+0x364>)
 800a324:	e78f      	b.n	800a246 <_strerror_r+0x132>
 800a326:	4b55      	ldr	r3, [pc, #340]	; (800a47c <_strerror_r+0x368>)
 800a328:	e78d      	b.n	800a246 <_strerror_r+0x132>
 800a32a:	4b55      	ldr	r3, [pc, #340]	; (800a480 <_strerror_r+0x36c>)
 800a32c:	e78b      	b.n	800a246 <_strerror_r+0x132>
 800a32e:	4b55      	ldr	r3, [pc, #340]	; (800a484 <_strerror_r+0x370>)
 800a330:	e789      	b.n	800a246 <_strerror_r+0x132>
 800a332:	4b55      	ldr	r3, [pc, #340]	; (800a488 <_strerror_r+0x374>)
 800a334:	e787      	b.n	800a246 <_strerror_r+0x132>
 800a336:	4b55      	ldr	r3, [pc, #340]	; (800a48c <_strerror_r+0x378>)
 800a338:	e785      	b.n	800a246 <_strerror_r+0x132>
 800a33a:	4b55      	ldr	r3, [pc, #340]	; (800a490 <_strerror_r+0x37c>)
 800a33c:	e783      	b.n	800a246 <_strerror_r+0x132>
 800a33e:	4b55      	ldr	r3, [pc, #340]	; (800a494 <_strerror_r+0x380>)
 800a340:	e781      	b.n	800a246 <_strerror_r+0x132>
 800a342:	4b55      	ldr	r3, [pc, #340]	; (800a498 <_strerror_r+0x384>)
 800a344:	e77f      	b.n	800a246 <_strerror_r+0x132>
 800a346:	4b55      	ldr	r3, [pc, #340]	; (800a49c <_strerror_r+0x388>)
 800a348:	e77d      	b.n	800a246 <_strerror_r+0x132>
 800a34a:	4b55      	ldr	r3, [pc, #340]	; (800a4a0 <_strerror_r+0x38c>)
 800a34c:	e77b      	b.n	800a246 <_strerror_r+0x132>
 800a34e:	4b55      	ldr	r3, [pc, #340]	; (800a4a4 <_strerror_r+0x390>)
 800a350:	e779      	b.n	800a246 <_strerror_r+0x132>
 800a352:	4b55      	ldr	r3, [pc, #340]	; (800a4a8 <_strerror_r+0x394>)
 800a354:	e777      	b.n	800a246 <_strerror_r+0x132>
 800a356:	4b55      	ldr	r3, [pc, #340]	; (800a4ac <_strerror_r+0x398>)
 800a358:	e775      	b.n	800a246 <_strerror_r+0x132>
 800a35a:	4b55      	ldr	r3, [pc, #340]	; (800a4b0 <_strerror_r+0x39c>)
 800a35c:	e773      	b.n	800a246 <_strerror_r+0x132>
 800a35e:	4b55      	ldr	r3, [pc, #340]	; (800a4b4 <_strerror_r+0x3a0>)
 800a360:	e771      	b.n	800a246 <_strerror_r+0x132>
 800a362:	4b55      	ldr	r3, [pc, #340]	; (800a4b8 <_strerror_r+0x3a4>)
 800a364:	e76f      	b.n	800a246 <_strerror_r+0x132>
 800a366:	4b55      	ldr	r3, [pc, #340]	; (800a4bc <_strerror_r+0x3a8>)
 800a368:	e76d      	b.n	800a246 <_strerror_r+0x132>
 800a36a:	4b55      	ldr	r3, [pc, #340]	; (800a4c0 <_strerror_r+0x3ac>)
 800a36c:	e76b      	b.n	800a246 <_strerror_r+0x132>
 800a36e:	4b55      	ldr	r3, [pc, #340]	; (800a4c4 <_strerror_r+0x3b0>)
 800a370:	e769      	b.n	800a246 <_strerror_r+0x132>
 800a372:	4b55      	ldr	r3, [pc, #340]	; (800a4c8 <_strerror_r+0x3b4>)
 800a374:	e767      	b.n	800a246 <_strerror_r+0x132>
 800a376:	4b55      	ldr	r3, [pc, #340]	; (800a4cc <_strerror_r+0x3b8>)
 800a378:	e765      	b.n	800a246 <_strerror_r+0x132>
 800a37a:	4b55      	ldr	r3, [pc, #340]	; (800a4d0 <_strerror_r+0x3bc>)
 800a37c:	e763      	b.n	800a246 <_strerror_r+0x132>
 800a37e:	4b55      	ldr	r3, [pc, #340]	; (800a4d4 <_strerror_r+0x3c0>)
 800a380:	e761      	b.n	800a246 <_strerror_r+0x132>
 800a382:	2b00      	cmp	r3, #0
 800a384:	bf14      	ite	ne
 800a386:	461a      	movne	r2, r3
 800a388:	4622      	moveq	r2, r4
 800a38a:	f000 f8b3 	bl	800a4f4 <_user_strerror>
 800a38e:	4b52      	ldr	r3, [pc, #328]	; (800a4d8 <_strerror_r+0x3c4>)
 800a390:	2800      	cmp	r0, #0
 800a392:	bf18      	it	ne
 800a394:	4603      	movne	r3, r0
 800a396:	e756      	b.n	800a246 <_strerror_r+0x132>
 800a398:	4b50      	ldr	r3, [pc, #320]	; (800a4dc <_strerror_r+0x3c8>)
 800a39a:	e754      	b.n	800a246 <_strerror_r+0x132>
 800a39c:	0800f384 	.word	0x0800f384
 800a3a0:	0800f38e 	.word	0x0800f38e
 800a3a4:	0800f3a8 	.word	0x0800f3a8
 800a3a8:	0800f3b8 	.word	0x0800f3b8
 800a3ac:	0800f3d0 	.word	0x0800f3d0
 800a3b0:	0800f3da 	.word	0x0800f3da
 800a3b4:	0800f3f4 	.word	0x0800f3f4
 800a3b8:	0800f406 	.word	0x0800f406
 800a3bc:	0800f418 	.word	0x0800f418
 800a3c0:	0800f431 	.word	0x0800f431
 800a3c4:	0800f441 	.word	0x0800f441
 800a3c8:	0800f44d 	.word	0x0800f44d
 800a3cc:	0800f46a 	.word	0x0800f46a
 800a3d0:	0800f47c 	.word	0x0800f47c
 800a3d4:	0800f48d 	.word	0x0800f48d
 800a3d8:	0800f49f 	.word	0x0800f49f
 800a3dc:	0800f4ab 	.word	0x0800f4ab
 800a3e0:	0800f4c3 	.word	0x0800f4c3
 800a3e4:	0800f4cf 	.word	0x0800f4cf
 800a3e8:	0800f4e1 	.word	0x0800f4e1
 800a3ec:	0800f4f0 	.word	0x0800f4f0
 800a3f0:	0800f500 	.word	0x0800f500
 800a3f4:	0800f50d 	.word	0x0800f50d
 800a3f8:	0800f52c 	.word	0x0800f52c
 800a3fc:	0800f53b 	.word	0x0800f53b
 800a400:	0800f54c 	.word	0x0800f54c
 800a404:	0800f570 	.word	0x0800f570
 800a408:	0800f58e 	.word	0x0800f58e
 800a40c:	0800f5ac 	.word	0x0800f5ac
 800a410:	0800f5cc 	.word	0x0800f5cc
 800a414:	0800f5e3 	.word	0x0800f5e3
 800a418:	0800f5f2 	.word	0x0800f5f2
 800a41c:	0800f601 	.word	0x0800f601
 800a420:	0800f615 	.word	0x0800f615
 800a424:	0800f62d 	.word	0x0800f62d
 800a428:	0800f63b 	.word	0x0800f63b
 800a42c:	0800f648 	.word	0x0800f648
 800a430:	0800f65e 	.word	0x0800f65e
 800a434:	0800f66d 	.word	0x0800f66d
 800a438:	0800f679 	.word	0x0800f679
 800a43c:	0800f6a8 	.word	0x0800f6a8
 800a440:	0800f6b9 	.word	0x0800f6b9
 800a444:	0800f6d4 	.word	0x0800f6d4
 800a448:	0800f6e7 	.word	0x0800f6e7
 800a44c:	0800f6fd 	.word	0x0800f6fd
 800a450:	0800f706 	.word	0x0800f706
 800a454:	0800f71d 	.word	0x0800f71d
 800a458:	0800f725 	.word	0x0800f725
 800a45c:	0800f732 	.word	0x0800f732
 800a460:	0800f747 	.word	0x0800f747
 800a464:	0800f75b 	.word	0x0800f75b
 800a468:	0800f773 	.word	0x0800f773
 800a46c:	0800f782 	.word	0x0800f782
 800a470:	0800f793 	.word	0x0800f793
 800a474:	0800f7a6 	.word	0x0800f7a6
 800a478:	0800f7b2 	.word	0x0800f7b2
 800a47c:	0800f7cb 	.word	0x0800f7cb
 800a480:	0800f7df 	.word	0x0800f7df
 800a484:	0800f7fa 	.word	0x0800f7fa
 800a488:	0800f812 	.word	0x0800f812
 800a48c:	0800f82c 	.word	0x0800f82c
 800a490:	0800f834 	.word	0x0800f834
 800a494:	0800f864 	.word	0x0800f864
 800a498:	0800f883 	.word	0x0800f883
 800a49c:	0800f8a2 	.word	0x0800f8a2
 800a4a0:	0800f8b9 	.word	0x0800f8b9
 800a4a4:	0800f8cc 	.word	0x0800f8cc
 800a4a8:	0800f8e5 	.word	0x0800f8e5
 800a4ac:	0800f8fc 	.word	0x0800f8fc
 800a4b0:	0800f912 	.word	0x0800f912
 800a4b4:	0800f933 	.word	0x0800f933
 800a4b8:	0800f94b 	.word	0x0800f94b
 800a4bc:	0800f967 	.word	0x0800f967
 800a4c0:	0800f97a 	.word	0x0800f97a
 800a4c4:	0800f990 	.word	0x0800f990
 800a4c8:	0800f9a4 	.word	0x0800f9a4
 800a4cc:	0800f9c6 	.word	0x0800f9c6
 800a4d0:	0800f9ec 	.word	0x0800f9ec
 800a4d4:	0800f9fd 	.word	0x0800f9fd
 800a4d8:	0800fb58 	.word	0x0800fb58
 800a4dc:	0800f37c 	.word	0x0800f37c

0800a4e0 <strerror>:
 800a4e0:	4601      	mov	r1, r0
 800a4e2:	4803      	ldr	r0, [pc, #12]	; (800a4f0 <strerror+0x10>)
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	6800      	ldr	r0, [r0, #0]
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	f7ff be13 	b.w	800a114 <_strerror_r>
 800a4ee:	bf00      	nop
 800a4f0:	200001f8 	.word	0x200001f8

0800a4f4 <_user_strerror>:
 800a4f4:	2000      	movs	r0, #0
 800a4f6:	4770      	bx	lr

0800a4f8 <memmove>:
 800a4f8:	4288      	cmp	r0, r1
 800a4fa:	b510      	push	{r4, lr}
 800a4fc:	eb01 0402 	add.w	r4, r1, r2
 800a500:	d902      	bls.n	800a508 <memmove+0x10>
 800a502:	4284      	cmp	r4, r0
 800a504:	4623      	mov	r3, r4
 800a506:	d807      	bhi.n	800a518 <memmove+0x20>
 800a508:	1e43      	subs	r3, r0, #1
 800a50a:	42a1      	cmp	r1, r4
 800a50c:	d008      	beq.n	800a520 <memmove+0x28>
 800a50e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a512:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a516:	e7f8      	b.n	800a50a <memmove+0x12>
 800a518:	4402      	add	r2, r0
 800a51a:	4601      	mov	r1, r0
 800a51c:	428a      	cmp	r2, r1
 800a51e:	d100      	bne.n	800a522 <memmove+0x2a>
 800a520:	bd10      	pop	{r4, pc}
 800a522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a52a:	e7f7      	b.n	800a51c <memmove+0x24>

0800a52c <memset>:
 800a52c:	4402      	add	r2, r0
 800a52e:	4603      	mov	r3, r0
 800a530:	4293      	cmp	r3, r2
 800a532:	d100      	bne.n	800a536 <memset+0xa>
 800a534:	4770      	bx	lr
 800a536:	f803 1b01 	strb.w	r1, [r3], #1
 800a53a:	e7f9      	b.n	800a530 <memset+0x4>

0800a53c <_localeconv_r>:
 800a53c:	4800      	ldr	r0, [pc, #0]	; (800a540 <_localeconv_r+0x4>)
 800a53e:	4770      	bx	lr
 800a540:	20000130 	.word	0x20000130

0800a544 <_close_r>:
 800a544:	b538      	push	{r3, r4, r5, lr}
 800a546:	4d06      	ldr	r5, [pc, #24]	; (800a560 <_close_r+0x1c>)
 800a548:	2300      	movs	r3, #0
 800a54a:	4604      	mov	r4, r0
 800a54c:	4608      	mov	r0, r1
 800a54e:	602b      	str	r3, [r5, #0]
 800a550:	f7f8 f94d 	bl	80027ee <_close>
 800a554:	1c43      	adds	r3, r0, #1
 800a556:	d102      	bne.n	800a55e <_close_r+0x1a>
 800a558:	682b      	ldr	r3, [r5, #0]
 800a55a:	b103      	cbz	r3, 800a55e <_close_r+0x1a>
 800a55c:	6023      	str	r3, [r4, #0]
 800a55e:	bd38      	pop	{r3, r4, r5, pc}
 800a560:	20000bb8 	.word	0x20000bb8

0800a564 <_lseek_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4d07      	ldr	r5, [pc, #28]	; (800a584 <_lseek_r+0x20>)
 800a568:	4604      	mov	r4, r0
 800a56a:	4608      	mov	r0, r1
 800a56c:	4611      	mov	r1, r2
 800a56e:	2200      	movs	r2, #0
 800a570:	602a      	str	r2, [r5, #0]
 800a572:	461a      	mov	r2, r3
 800a574:	f7f8 f962 	bl	800283c <_lseek>
 800a578:	1c43      	adds	r3, r0, #1
 800a57a:	d102      	bne.n	800a582 <_lseek_r+0x1e>
 800a57c:	682b      	ldr	r3, [r5, #0]
 800a57e:	b103      	cbz	r3, 800a582 <_lseek_r+0x1e>
 800a580:	6023      	str	r3, [r4, #0]
 800a582:	bd38      	pop	{r3, r4, r5, pc}
 800a584:	20000bb8 	.word	0x20000bb8

0800a588 <_read_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4d07      	ldr	r5, [pc, #28]	; (800a5a8 <_read_r+0x20>)
 800a58c:	4604      	mov	r4, r0
 800a58e:	4608      	mov	r0, r1
 800a590:	4611      	mov	r1, r2
 800a592:	2200      	movs	r2, #0
 800a594:	602a      	str	r2, [r5, #0]
 800a596:	461a      	mov	r2, r3
 800a598:	f7f8 f8f0 	bl	800277c <_read>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d102      	bne.n	800a5a6 <_read_r+0x1e>
 800a5a0:	682b      	ldr	r3, [r5, #0]
 800a5a2:	b103      	cbz	r3, 800a5a6 <_read_r+0x1e>
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
 800a5a8:	20000bb8 	.word	0x20000bb8

0800a5ac <_raise_r>:
 800a5ac:	291f      	cmp	r1, #31
 800a5ae:	b538      	push	{r3, r4, r5, lr}
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	460d      	mov	r5, r1
 800a5b4:	d904      	bls.n	800a5c0 <_raise_r+0x14>
 800a5b6:	2316      	movs	r3, #22
 800a5b8:	6003      	str	r3, [r0, #0]
 800a5ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5be:	bd38      	pop	{r3, r4, r5, pc}
 800a5c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a5c2:	b112      	cbz	r2, 800a5ca <_raise_r+0x1e>
 800a5c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5c8:	b94b      	cbnz	r3, 800a5de <_raise_r+0x32>
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	f000 f830 	bl	800a630 <_getpid_r>
 800a5d0:	462a      	mov	r2, r5
 800a5d2:	4601      	mov	r1, r0
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5da:	f000 b817 	b.w	800a60c <_kill_r>
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d00a      	beq.n	800a5f8 <_raise_r+0x4c>
 800a5e2:	1c59      	adds	r1, r3, #1
 800a5e4:	d103      	bne.n	800a5ee <_raise_r+0x42>
 800a5e6:	2316      	movs	r3, #22
 800a5e8:	6003      	str	r3, [r0, #0]
 800a5ea:	2001      	movs	r0, #1
 800a5ec:	e7e7      	b.n	800a5be <_raise_r+0x12>
 800a5ee:	2400      	movs	r4, #0
 800a5f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	4798      	blx	r3
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	e7e0      	b.n	800a5be <_raise_r+0x12>

0800a5fc <raise>:
 800a5fc:	4b02      	ldr	r3, [pc, #8]	; (800a608 <raise+0xc>)
 800a5fe:	4601      	mov	r1, r0
 800a600:	6818      	ldr	r0, [r3, #0]
 800a602:	f7ff bfd3 	b.w	800a5ac <_raise_r>
 800a606:	bf00      	nop
 800a608:	200001f8 	.word	0x200001f8

0800a60c <_kill_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4d07      	ldr	r5, [pc, #28]	; (800a62c <_kill_r+0x20>)
 800a610:	2300      	movs	r3, #0
 800a612:	4604      	mov	r4, r0
 800a614:	4608      	mov	r0, r1
 800a616:	4611      	mov	r1, r2
 800a618:	602b      	str	r3, [r5, #0]
 800a61a:	f7f8 f895 	bl	8002748 <_kill>
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	d102      	bne.n	800a628 <_kill_r+0x1c>
 800a622:	682b      	ldr	r3, [r5, #0]
 800a624:	b103      	cbz	r3, 800a628 <_kill_r+0x1c>
 800a626:	6023      	str	r3, [r4, #0]
 800a628:	bd38      	pop	{r3, r4, r5, pc}
 800a62a:	bf00      	nop
 800a62c:	20000bb8 	.word	0x20000bb8

0800a630 <_getpid_r>:
 800a630:	f7f8 b882 	b.w	8002738 <_getpid>

0800a634 <_sbrk_r>:
 800a634:	b538      	push	{r3, r4, r5, lr}
 800a636:	4d06      	ldr	r5, [pc, #24]	; (800a650 <_sbrk_r+0x1c>)
 800a638:	2300      	movs	r3, #0
 800a63a:	4604      	mov	r4, r0
 800a63c:	4608      	mov	r0, r1
 800a63e:	602b      	str	r3, [r5, #0]
 800a640:	f7f8 f90a 	bl	8002858 <_sbrk>
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	d102      	bne.n	800a64e <_sbrk_r+0x1a>
 800a648:	682b      	ldr	r3, [r5, #0]
 800a64a:	b103      	cbz	r3, 800a64e <_sbrk_r+0x1a>
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	bd38      	pop	{r3, r4, r5, pc}
 800a650:	20000bb8 	.word	0x20000bb8

0800a654 <_write_r>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	4d07      	ldr	r5, [pc, #28]	; (800a674 <_write_r+0x20>)
 800a658:	4604      	mov	r4, r0
 800a65a:	4608      	mov	r0, r1
 800a65c:	4611      	mov	r1, r2
 800a65e:	2200      	movs	r2, #0
 800a660:	602a      	str	r2, [r5, #0]
 800a662:	461a      	mov	r2, r3
 800a664:	f7f8 f8a7 	bl	80027b6 <_write>
 800a668:	1c43      	adds	r3, r0, #1
 800a66a:	d102      	bne.n	800a672 <_write_r+0x1e>
 800a66c:	682b      	ldr	r3, [r5, #0]
 800a66e:	b103      	cbz	r3, 800a672 <_write_r+0x1e>
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	bd38      	pop	{r3, r4, r5, pc}
 800a674:	20000bb8 	.word	0x20000bb8

0800a678 <__errno>:
 800a678:	4b01      	ldr	r3, [pc, #4]	; (800a680 <__errno+0x8>)
 800a67a:	6818      	ldr	r0, [r3, #0]
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	200001f8 	.word	0x200001f8

0800a684 <__libc_init_array>:
 800a684:	b570      	push	{r4, r5, r6, lr}
 800a686:	4d0d      	ldr	r5, [pc, #52]	; (800a6bc <__libc_init_array+0x38>)
 800a688:	4c0d      	ldr	r4, [pc, #52]	; (800a6c0 <__libc_init_array+0x3c>)
 800a68a:	1b64      	subs	r4, r4, r5
 800a68c:	10a4      	asrs	r4, r4, #2
 800a68e:	2600      	movs	r6, #0
 800a690:	42a6      	cmp	r6, r4
 800a692:	d109      	bne.n	800a6a8 <__libc_init_array+0x24>
 800a694:	4d0b      	ldr	r5, [pc, #44]	; (800a6c4 <__libc_init_array+0x40>)
 800a696:	4c0c      	ldr	r4, [pc, #48]	; (800a6c8 <__libc_init_array+0x44>)
 800a698:	f001 ff7a 	bl	800c590 <_init>
 800a69c:	1b64      	subs	r4, r4, r5
 800a69e:	10a4      	asrs	r4, r4, #2
 800a6a0:	2600      	movs	r6, #0
 800a6a2:	42a6      	cmp	r6, r4
 800a6a4:	d105      	bne.n	800a6b2 <__libc_init_array+0x2e>
 800a6a6:	bd70      	pop	{r4, r5, r6, pc}
 800a6a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ac:	4798      	blx	r3
 800a6ae:	3601      	adds	r6, #1
 800a6b0:	e7ee      	b.n	800a690 <__libc_init_array+0xc>
 800a6b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6b6:	4798      	blx	r3
 800a6b8:	3601      	adds	r6, #1
 800a6ba:	e7f2      	b.n	800a6a2 <__libc_init_array+0x1e>
 800a6bc:	0800fd4c 	.word	0x0800fd4c
 800a6c0:	0800fd4c 	.word	0x0800fd4c
 800a6c4:	0800fd4c 	.word	0x0800fd4c
 800a6c8:	0800fd68 	.word	0x0800fd68

0800a6cc <__retarget_lock_init_recursive>:
 800a6cc:	4770      	bx	lr

0800a6ce <__retarget_lock_acquire_recursive>:
 800a6ce:	4770      	bx	lr

0800a6d0 <__retarget_lock_release_recursive>:
 800a6d0:	4770      	bx	lr
	...

0800a6d4 <__cxa_atexit>:
 800a6d4:	b510      	push	{r4, lr}
 800a6d6:	4c05      	ldr	r4, [pc, #20]	; (800a6ec <__cxa_atexit+0x18>)
 800a6d8:	4613      	mov	r3, r2
 800a6da:	b12c      	cbz	r4, 800a6e8 <__cxa_atexit+0x14>
 800a6dc:	460a      	mov	r2, r1
 800a6de:	4601      	mov	r1, r0
 800a6e0:	2002      	movs	r0, #2
 800a6e2:	f3af 8000 	nop.w
 800a6e6:	bd10      	pop	{r4, pc}
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	e7fc      	b.n	800a6e6 <__cxa_atexit+0x12>
 800a6ec:	00000000 	.word	0x00000000

0800a6f0 <memcpy>:
 800a6f0:	440a      	add	r2, r1
 800a6f2:	4291      	cmp	r1, r2
 800a6f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a6f8:	d100      	bne.n	800a6fc <memcpy+0xc>
 800a6fa:	4770      	bx	lr
 800a6fc:	b510      	push	{r4, lr}
 800a6fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a702:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a706:	4291      	cmp	r1, r2
 800a708:	d1f9      	bne.n	800a6fe <memcpy+0xe>
 800a70a:	bd10      	pop	{r4, pc}

0800a70c <__assert_func>:
 800a70c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a70e:	4614      	mov	r4, r2
 800a710:	461a      	mov	r2, r3
 800a712:	4b09      	ldr	r3, [pc, #36]	; (800a738 <__assert_func+0x2c>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4605      	mov	r5, r0
 800a718:	68d8      	ldr	r0, [r3, #12]
 800a71a:	b14c      	cbz	r4, 800a730 <__assert_func+0x24>
 800a71c:	4b07      	ldr	r3, [pc, #28]	; (800a73c <__assert_func+0x30>)
 800a71e:	9100      	str	r1, [sp, #0]
 800a720:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a724:	4906      	ldr	r1, [pc, #24]	; (800a740 <__assert_func+0x34>)
 800a726:	462b      	mov	r3, r5
 800a728:	f001 fc68 	bl	800bffc <fiprintf>
 800a72c:	f7fe fe8e 	bl	800944c <abort>
 800a730:	4b04      	ldr	r3, [pc, #16]	; (800a744 <__assert_func+0x38>)
 800a732:	461c      	mov	r4, r3
 800a734:	e7f3      	b.n	800a71e <__assert_func+0x12>
 800a736:	bf00      	nop
 800a738:	200001f8 	.word	0x200001f8
 800a73c:	0800fb1d 	.word	0x0800fb1d
 800a740:	0800fb2a 	.word	0x0800fb2a
 800a744:	0800fb58 	.word	0x0800fb58

0800a748 <quorem>:
 800a748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74c:	6903      	ldr	r3, [r0, #16]
 800a74e:	690c      	ldr	r4, [r1, #16]
 800a750:	42a3      	cmp	r3, r4
 800a752:	4607      	mov	r7, r0
 800a754:	db7e      	blt.n	800a854 <quorem+0x10c>
 800a756:	3c01      	subs	r4, #1
 800a758:	f101 0814 	add.w	r8, r1, #20
 800a75c:	f100 0514 	add.w	r5, r0, #20
 800a760:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a764:	9301      	str	r3, [sp, #4]
 800a766:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a76a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a76e:	3301      	adds	r3, #1
 800a770:	429a      	cmp	r2, r3
 800a772:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a776:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a77a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a77e:	d331      	bcc.n	800a7e4 <quorem+0x9c>
 800a780:	f04f 0e00 	mov.w	lr, #0
 800a784:	4640      	mov	r0, r8
 800a786:	46ac      	mov	ip, r5
 800a788:	46f2      	mov	sl, lr
 800a78a:	f850 2b04 	ldr.w	r2, [r0], #4
 800a78e:	b293      	uxth	r3, r2
 800a790:	fb06 e303 	mla	r3, r6, r3, lr
 800a794:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a798:	0c1a      	lsrs	r2, r3, #16
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	ebaa 0303 	sub.w	r3, sl, r3
 800a7a0:	f8dc a000 	ldr.w	sl, [ip]
 800a7a4:	fa13 f38a 	uxtah	r3, r3, sl
 800a7a8:	fb06 220e 	mla	r2, r6, lr, r2
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	9b00      	ldr	r3, [sp, #0]
 800a7b0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a7b4:	b292      	uxth	r2, r2
 800a7b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a7ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7be:	f8bd 3000 	ldrh.w	r3, [sp]
 800a7c2:	4581      	cmp	r9, r0
 800a7c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7c8:	f84c 3b04 	str.w	r3, [ip], #4
 800a7cc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a7d0:	d2db      	bcs.n	800a78a <quorem+0x42>
 800a7d2:	f855 300b 	ldr.w	r3, [r5, fp]
 800a7d6:	b92b      	cbnz	r3, 800a7e4 <quorem+0x9c>
 800a7d8:	9b01      	ldr	r3, [sp, #4]
 800a7da:	3b04      	subs	r3, #4
 800a7dc:	429d      	cmp	r5, r3
 800a7de:	461a      	mov	r2, r3
 800a7e0:	d32c      	bcc.n	800a83c <quorem+0xf4>
 800a7e2:	613c      	str	r4, [r7, #16]
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	f001 fb09 	bl	800bdfc <__mcmp>
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	db22      	blt.n	800a834 <quorem+0xec>
 800a7ee:	3601      	adds	r6, #1
 800a7f0:	4629      	mov	r1, r5
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7f8:	f8d1 c000 	ldr.w	ip, [r1]
 800a7fc:	b293      	uxth	r3, r2
 800a7fe:	1ac3      	subs	r3, r0, r3
 800a800:	0c12      	lsrs	r2, r2, #16
 800a802:	fa13 f38c 	uxtah	r3, r3, ip
 800a806:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a80a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a80e:	b29b      	uxth	r3, r3
 800a810:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a814:	45c1      	cmp	r9, r8
 800a816:	f841 3b04 	str.w	r3, [r1], #4
 800a81a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a81e:	d2e9      	bcs.n	800a7f4 <quorem+0xac>
 800a820:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a824:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a828:	b922      	cbnz	r2, 800a834 <quorem+0xec>
 800a82a:	3b04      	subs	r3, #4
 800a82c:	429d      	cmp	r5, r3
 800a82e:	461a      	mov	r2, r3
 800a830:	d30a      	bcc.n	800a848 <quorem+0x100>
 800a832:	613c      	str	r4, [r7, #16]
 800a834:	4630      	mov	r0, r6
 800a836:	b003      	add	sp, #12
 800a838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a83c:	6812      	ldr	r2, [r2, #0]
 800a83e:	3b04      	subs	r3, #4
 800a840:	2a00      	cmp	r2, #0
 800a842:	d1ce      	bne.n	800a7e2 <quorem+0x9a>
 800a844:	3c01      	subs	r4, #1
 800a846:	e7c9      	b.n	800a7dc <quorem+0x94>
 800a848:	6812      	ldr	r2, [r2, #0]
 800a84a:	3b04      	subs	r3, #4
 800a84c:	2a00      	cmp	r2, #0
 800a84e:	d1f0      	bne.n	800a832 <quorem+0xea>
 800a850:	3c01      	subs	r4, #1
 800a852:	e7eb      	b.n	800a82c <quorem+0xe4>
 800a854:	2000      	movs	r0, #0
 800a856:	e7ee      	b.n	800a836 <quorem+0xee>

0800a858 <_dtoa_r>:
 800a858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a85c:	ed2d 8b04 	vpush	{d8-d9}
 800a860:	69c5      	ldr	r5, [r0, #28]
 800a862:	b093      	sub	sp, #76	; 0x4c
 800a864:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a868:	ec57 6b10 	vmov	r6, r7, d0
 800a86c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a870:	9107      	str	r1, [sp, #28]
 800a872:	4604      	mov	r4, r0
 800a874:	920a      	str	r2, [sp, #40]	; 0x28
 800a876:	930d      	str	r3, [sp, #52]	; 0x34
 800a878:	b975      	cbnz	r5, 800a898 <_dtoa_r+0x40>
 800a87a:	2010      	movs	r0, #16
 800a87c:	f7ff f8c4 	bl	8009a08 <malloc>
 800a880:	4602      	mov	r2, r0
 800a882:	61e0      	str	r0, [r4, #28]
 800a884:	b920      	cbnz	r0, 800a890 <_dtoa_r+0x38>
 800a886:	4bae      	ldr	r3, [pc, #696]	; (800ab40 <_dtoa_r+0x2e8>)
 800a888:	21ef      	movs	r1, #239	; 0xef
 800a88a:	48ae      	ldr	r0, [pc, #696]	; (800ab44 <_dtoa_r+0x2ec>)
 800a88c:	f7ff ff3e 	bl	800a70c <__assert_func>
 800a890:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a894:	6005      	str	r5, [r0, #0]
 800a896:	60c5      	str	r5, [r0, #12]
 800a898:	69e3      	ldr	r3, [r4, #28]
 800a89a:	6819      	ldr	r1, [r3, #0]
 800a89c:	b151      	cbz	r1, 800a8b4 <_dtoa_r+0x5c>
 800a89e:	685a      	ldr	r2, [r3, #4]
 800a8a0:	604a      	str	r2, [r1, #4]
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	4093      	lsls	r3, r2
 800a8a6:	608b      	str	r3, [r1, #8]
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f001 f86b 	bl	800b984 <_Bfree>
 800a8ae:	69e3      	ldr	r3, [r4, #28]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	601a      	str	r2, [r3, #0]
 800a8b4:	1e3b      	subs	r3, r7, #0
 800a8b6:	bfbb      	ittet	lt
 800a8b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a8bc:	9303      	strlt	r3, [sp, #12]
 800a8be:	2300      	movge	r3, #0
 800a8c0:	2201      	movlt	r2, #1
 800a8c2:	bfac      	ite	ge
 800a8c4:	f8c8 3000 	strge.w	r3, [r8]
 800a8c8:	f8c8 2000 	strlt.w	r2, [r8]
 800a8cc:	4b9e      	ldr	r3, [pc, #632]	; (800ab48 <_dtoa_r+0x2f0>)
 800a8ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a8d2:	ea33 0308 	bics.w	r3, r3, r8
 800a8d6:	d11b      	bne.n	800a910 <_dtoa_r+0xb8>
 800a8d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8da:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8de:	6013      	str	r3, [r2, #0]
 800a8e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a8e4:	4333      	orrs	r3, r6
 800a8e6:	f000 8593 	beq.w	800b410 <_dtoa_r+0xbb8>
 800a8ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8ec:	b963      	cbnz	r3, 800a908 <_dtoa_r+0xb0>
 800a8ee:	4b97      	ldr	r3, [pc, #604]	; (800ab4c <_dtoa_r+0x2f4>)
 800a8f0:	e027      	b.n	800a942 <_dtoa_r+0xea>
 800a8f2:	4b97      	ldr	r3, [pc, #604]	; (800ab50 <_dtoa_r+0x2f8>)
 800a8f4:	9300      	str	r3, [sp, #0]
 800a8f6:	3308      	adds	r3, #8
 800a8f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a8fa:	6013      	str	r3, [r2, #0]
 800a8fc:	9800      	ldr	r0, [sp, #0]
 800a8fe:	b013      	add	sp, #76	; 0x4c
 800a900:	ecbd 8b04 	vpop	{d8-d9}
 800a904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a908:	4b90      	ldr	r3, [pc, #576]	; (800ab4c <_dtoa_r+0x2f4>)
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	3303      	adds	r3, #3
 800a90e:	e7f3      	b.n	800a8f8 <_dtoa_r+0xa0>
 800a910:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a914:	2200      	movs	r2, #0
 800a916:	ec51 0b17 	vmov	r0, r1, d7
 800a91a:	eeb0 8a47 	vmov.f32	s16, s14
 800a91e:	eef0 8a67 	vmov.f32	s17, s15
 800a922:	2300      	movs	r3, #0
 800a924:	f7f6 f8da 	bl	8000adc <__aeabi_dcmpeq>
 800a928:	4681      	mov	r9, r0
 800a92a:	b160      	cbz	r0, 800a946 <_dtoa_r+0xee>
 800a92c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a92e:	2301      	movs	r3, #1
 800a930:	6013      	str	r3, [r2, #0]
 800a932:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a934:	2b00      	cmp	r3, #0
 800a936:	f000 8568 	beq.w	800b40a <_dtoa_r+0xbb2>
 800a93a:	4b86      	ldr	r3, [pc, #536]	; (800ab54 <_dtoa_r+0x2fc>)
 800a93c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a93e:	6013      	str	r3, [r2, #0]
 800a940:	3b01      	subs	r3, #1
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	e7da      	b.n	800a8fc <_dtoa_r+0xa4>
 800a946:	aa10      	add	r2, sp, #64	; 0x40
 800a948:	a911      	add	r1, sp, #68	; 0x44
 800a94a:	4620      	mov	r0, r4
 800a94c:	eeb0 0a48 	vmov.f32	s0, s16
 800a950:	eef0 0a68 	vmov.f32	s1, s17
 800a954:	f001 faf8 	bl	800bf48 <__d2b>
 800a958:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a95c:	4682      	mov	sl, r0
 800a95e:	2d00      	cmp	r5, #0
 800a960:	d07f      	beq.n	800aa62 <_dtoa_r+0x20a>
 800a962:	ee18 3a90 	vmov	r3, s17
 800a966:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a96a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a96e:	ec51 0b18 	vmov	r0, r1, d8
 800a972:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a976:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a97a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a97e:	4619      	mov	r1, r3
 800a980:	2200      	movs	r2, #0
 800a982:	4b75      	ldr	r3, [pc, #468]	; (800ab58 <_dtoa_r+0x300>)
 800a984:	f7f5 fc8a 	bl	800029c <__aeabi_dsub>
 800a988:	a367      	add	r3, pc, #412	; (adr r3, 800ab28 <_dtoa_r+0x2d0>)
 800a98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98e:	f7f5 fe3d 	bl	800060c <__aeabi_dmul>
 800a992:	a367      	add	r3, pc, #412	; (adr r3, 800ab30 <_dtoa_r+0x2d8>)
 800a994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a998:	f7f5 fc82 	bl	80002a0 <__adddf3>
 800a99c:	4606      	mov	r6, r0
 800a99e:	4628      	mov	r0, r5
 800a9a0:	460f      	mov	r7, r1
 800a9a2:	f7f5 fdc9 	bl	8000538 <__aeabi_i2d>
 800a9a6:	a364      	add	r3, pc, #400	; (adr r3, 800ab38 <_dtoa_r+0x2e0>)
 800a9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ac:	f7f5 fe2e 	bl	800060c <__aeabi_dmul>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	4639      	mov	r1, r7
 800a9b8:	f7f5 fc72 	bl	80002a0 <__adddf3>
 800a9bc:	4606      	mov	r6, r0
 800a9be:	460f      	mov	r7, r1
 800a9c0:	f7f6 f8d4 	bl	8000b6c <__aeabi_d2iz>
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	4683      	mov	fp, r0
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	4639      	mov	r1, r7
 800a9ce:	f7f6 f88f 	bl	8000af0 <__aeabi_dcmplt>
 800a9d2:	b148      	cbz	r0, 800a9e8 <_dtoa_r+0x190>
 800a9d4:	4658      	mov	r0, fp
 800a9d6:	f7f5 fdaf 	bl	8000538 <__aeabi_i2d>
 800a9da:	4632      	mov	r2, r6
 800a9dc:	463b      	mov	r3, r7
 800a9de:	f7f6 f87d 	bl	8000adc <__aeabi_dcmpeq>
 800a9e2:	b908      	cbnz	r0, 800a9e8 <_dtoa_r+0x190>
 800a9e4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a9e8:	f1bb 0f16 	cmp.w	fp, #22
 800a9ec:	d857      	bhi.n	800aa9e <_dtoa_r+0x246>
 800a9ee:	4b5b      	ldr	r3, [pc, #364]	; (800ab5c <_dtoa_r+0x304>)
 800a9f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f8:	ec51 0b18 	vmov	r0, r1, d8
 800a9fc:	f7f6 f878 	bl	8000af0 <__aeabi_dcmplt>
 800aa00:	2800      	cmp	r0, #0
 800aa02:	d04e      	beq.n	800aaa2 <_dtoa_r+0x24a>
 800aa04:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800aa08:	2300      	movs	r3, #0
 800aa0a:	930c      	str	r3, [sp, #48]	; 0x30
 800aa0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa0e:	1b5b      	subs	r3, r3, r5
 800aa10:	1e5a      	subs	r2, r3, #1
 800aa12:	bf45      	ittet	mi
 800aa14:	f1c3 0301 	rsbmi	r3, r3, #1
 800aa18:	9305      	strmi	r3, [sp, #20]
 800aa1a:	2300      	movpl	r3, #0
 800aa1c:	2300      	movmi	r3, #0
 800aa1e:	9206      	str	r2, [sp, #24]
 800aa20:	bf54      	ite	pl
 800aa22:	9305      	strpl	r3, [sp, #20]
 800aa24:	9306      	strmi	r3, [sp, #24]
 800aa26:	f1bb 0f00 	cmp.w	fp, #0
 800aa2a:	db3c      	blt.n	800aaa6 <_dtoa_r+0x24e>
 800aa2c:	9b06      	ldr	r3, [sp, #24]
 800aa2e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800aa32:	445b      	add	r3, fp
 800aa34:	9306      	str	r3, [sp, #24]
 800aa36:	2300      	movs	r3, #0
 800aa38:	9308      	str	r3, [sp, #32]
 800aa3a:	9b07      	ldr	r3, [sp, #28]
 800aa3c:	2b09      	cmp	r3, #9
 800aa3e:	d868      	bhi.n	800ab12 <_dtoa_r+0x2ba>
 800aa40:	2b05      	cmp	r3, #5
 800aa42:	bfc4      	itt	gt
 800aa44:	3b04      	subgt	r3, #4
 800aa46:	9307      	strgt	r3, [sp, #28]
 800aa48:	9b07      	ldr	r3, [sp, #28]
 800aa4a:	f1a3 0302 	sub.w	r3, r3, #2
 800aa4e:	bfcc      	ite	gt
 800aa50:	2500      	movgt	r5, #0
 800aa52:	2501      	movle	r5, #1
 800aa54:	2b03      	cmp	r3, #3
 800aa56:	f200 8085 	bhi.w	800ab64 <_dtoa_r+0x30c>
 800aa5a:	e8df f003 	tbb	[pc, r3]
 800aa5e:	3b2e      	.short	0x3b2e
 800aa60:	5839      	.short	0x5839
 800aa62:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aa66:	441d      	add	r5, r3
 800aa68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aa6c:	2b20      	cmp	r3, #32
 800aa6e:	bfc1      	itttt	gt
 800aa70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aa74:	fa08 f803 	lslgt.w	r8, r8, r3
 800aa78:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800aa7c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800aa80:	bfd6      	itet	le
 800aa82:	f1c3 0320 	rsble	r3, r3, #32
 800aa86:	ea48 0003 	orrgt.w	r0, r8, r3
 800aa8a:	fa06 f003 	lslle.w	r0, r6, r3
 800aa8e:	f7f5 fd43 	bl	8000518 <__aeabi_ui2d>
 800aa92:	2201      	movs	r2, #1
 800aa94:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800aa98:	3d01      	subs	r5, #1
 800aa9a:	920e      	str	r2, [sp, #56]	; 0x38
 800aa9c:	e76f      	b.n	800a97e <_dtoa_r+0x126>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e7b3      	b.n	800aa0a <_dtoa_r+0x1b2>
 800aaa2:	900c      	str	r0, [sp, #48]	; 0x30
 800aaa4:	e7b2      	b.n	800aa0c <_dtoa_r+0x1b4>
 800aaa6:	9b05      	ldr	r3, [sp, #20]
 800aaa8:	eba3 030b 	sub.w	r3, r3, fp
 800aaac:	9305      	str	r3, [sp, #20]
 800aaae:	f1cb 0300 	rsb	r3, fp, #0
 800aab2:	9308      	str	r3, [sp, #32]
 800aab4:	2300      	movs	r3, #0
 800aab6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aab8:	e7bf      	b.n	800aa3a <_dtoa_r+0x1e2>
 800aaba:	2300      	movs	r3, #0
 800aabc:	9309      	str	r3, [sp, #36]	; 0x24
 800aabe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	dc52      	bgt.n	800ab6a <_dtoa_r+0x312>
 800aac4:	2301      	movs	r3, #1
 800aac6:	9301      	str	r3, [sp, #4]
 800aac8:	9304      	str	r3, [sp, #16]
 800aaca:	461a      	mov	r2, r3
 800aacc:	920a      	str	r2, [sp, #40]	; 0x28
 800aace:	e00b      	b.n	800aae8 <_dtoa_r+0x290>
 800aad0:	2301      	movs	r3, #1
 800aad2:	e7f3      	b.n	800aabc <_dtoa_r+0x264>
 800aad4:	2300      	movs	r3, #0
 800aad6:	9309      	str	r3, [sp, #36]	; 0x24
 800aad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aada:	445b      	add	r3, fp
 800aadc:	9301      	str	r3, [sp, #4]
 800aade:	3301      	adds	r3, #1
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	9304      	str	r3, [sp, #16]
 800aae4:	bfb8      	it	lt
 800aae6:	2301      	movlt	r3, #1
 800aae8:	69e0      	ldr	r0, [r4, #28]
 800aaea:	2100      	movs	r1, #0
 800aaec:	2204      	movs	r2, #4
 800aaee:	f102 0614 	add.w	r6, r2, #20
 800aaf2:	429e      	cmp	r6, r3
 800aaf4:	d93d      	bls.n	800ab72 <_dtoa_r+0x31a>
 800aaf6:	6041      	str	r1, [r0, #4]
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f000 ff03 	bl	800b904 <_Balloc>
 800aafe:	9000      	str	r0, [sp, #0]
 800ab00:	2800      	cmp	r0, #0
 800ab02:	d139      	bne.n	800ab78 <_dtoa_r+0x320>
 800ab04:	4b16      	ldr	r3, [pc, #88]	; (800ab60 <_dtoa_r+0x308>)
 800ab06:	4602      	mov	r2, r0
 800ab08:	f240 11af 	movw	r1, #431	; 0x1af
 800ab0c:	e6bd      	b.n	800a88a <_dtoa_r+0x32>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e7e1      	b.n	800aad6 <_dtoa_r+0x27e>
 800ab12:	2501      	movs	r5, #1
 800ab14:	2300      	movs	r3, #0
 800ab16:	9307      	str	r3, [sp, #28]
 800ab18:	9509      	str	r5, [sp, #36]	; 0x24
 800ab1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab1e:	9301      	str	r3, [sp, #4]
 800ab20:	9304      	str	r3, [sp, #16]
 800ab22:	2200      	movs	r2, #0
 800ab24:	2312      	movs	r3, #18
 800ab26:	e7d1      	b.n	800aacc <_dtoa_r+0x274>
 800ab28:	636f4361 	.word	0x636f4361
 800ab2c:	3fd287a7 	.word	0x3fd287a7
 800ab30:	8b60c8b3 	.word	0x8b60c8b3
 800ab34:	3fc68a28 	.word	0x3fc68a28
 800ab38:	509f79fb 	.word	0x509f79fb
 800ab3c:	3fd34413 	.word	0x3fd34413
 800ab40:	0800fb66 	.word	0x0800fb66
 800ab44:	0800fb7d 	.word	0x0800fb7d
 800ab48:	7ff00000 	.word	0x7ff00000
 800ab4c:	0800fb62 	.word	0x0800fb62
 800ab50:	0800fb59 	.word	0x0800fb59
 800ab54:	0800f359 	.word	0x0800f359
 800ab58:	3ff80000 	.word	0x3ff80000
 800ab5c:	0800fc78 	.word	0x0800fc78
 800ab60:	0800fbd5 	.word	0x0800fbd5
 800ab64:	2301      	movs	r3, #1
 800ab66:	9309      	str	r3, [sp, #36]	; 0x24
 800ab68:	e7d7      	b.n	800ab1a <_dtoa_r+0x2c2>
 800ab6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab6c:	9301      	str	r3, [sp, #4]
 800ab6e:	9304      	str	r3, [sp, #16]
 800ab70:	e7ba      	b.n	800aae8 <_dtoa_r+0x290>
 800ab72:	3101      	adds	r1, #1
 800ab74:	0052      	lsls	r2, r2, #1
 800ab76:	e7ba      	b.n	800aaee <_dtoa_r+0x296>
 800ab78:	69e3      	ldr	r3, [r4, #28]
 800ab7a:	9a00      	ldr	r2, [sp, #0]
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	9b04      	ldr	r3, [sp, #16]
 800ab80:	2b0e      	cmp	r3, #14
 800ab82:	f200 80a8 	bhi.w	800acd6 <_dtoa_r+0x47e>
 800ab86:	2d00      	cmp	r5, #0
 800ab88:	f000 80a5 	beq.w	800acd6 <_dtoa_r+0x47e>
 800ab8c:	f1bb 0f00 	cmp.w	fp, #0
 800ab90:	dd38      	ble.n	800ac04 <_dtoa_r+0x3ac>
 800ab92:	4bc0      	ldr	r3, [pc, #768]	; (800ae94 <_dtoa_r+0x63c>)
 800ab94:	f00b 020f 	and.w	r2, fp, #15
 800ab98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab9c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aba0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800aba4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800aba8:	d019      	beq.n	800abde <_dtoa_r+0x386>
 800abaa:	4bbb      	ldr	r3, [pc, #748]	; (800ae98 <_dtoa_r+0x640>)
 800abac:	ec51 0b18 	vmov	r0, r1, d8
 800abb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800abb4:	f7f5 fe54 	bl	8000860 <__aeabi_ddiv>
 800abb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abbc:	f008 080f 	and.w	r8, r8, #15
 800abc0:	2503      	movs	r5, #3
 800abc2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ae98 <_dtoa_r+0x640>
 800abc6:	f1b8 0f00 	cmp.w	r8, #0
 800abca:	d10a      	bne.n	800abe2 <_dtoa_r+0x38a>
 800abcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abd0:	4632      	mov	r2, r6
 800abd2:	463b      	mov	r3, r7
 800abd4:	f7f5 fe44 	bl	8000860 <__aeabi_ddiv>
 800abd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abdc:	e02b      	b.n	800ac36 <_dtoa_r+0x3de>
 800abde:	2502      	movs	r5, #2
 800abe0:	e7ef      	b.n	800abc2 <_dtoa_r+0x36a>
 800abe2:	f018 0f01 	tst.w	r8, #1
 800abe6:	d008      	beq.n	800abfa <_dtoa_r+0x3a2>
 800abe8:	4630      	mov	r0, r6
 800abea:	4639      	mov	r1, r7
 800abec:	e9d9 2300 	ldrd	r2, r3, [r9]
 800abf0:	f7f5 fd0c 	bl	800060c <__aeabi_dmul>
 800abf4:	3501      	adds	r5, #1
 800abf6:	4606      	mov	r6, r0
 800abf8:	460f      	mov	r7, r1
 800abfa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800abfe:	f109 0908 	add.w	r9, r9, #8
 800ac02:	e7e0      	b.n	800abc6 <_dtoa_r+0x36e>
 800ac04:	f000 809f 	beq.w	800ad46 <_dtoa_r+0x4ee>
 800ac08:	f1cb 0600 	rsb	r6, fp, #0
 800ac0c:	4ba1      	ldr	r3, [pc, #644]	; (800ae94 <_dtoa_r+0x63c>)
 800ac0e:	4fa2      	ldr	r7, [pc, #648]	; (800ae98 <_dtoa_r+0x640>)
 800ac10:	f006 020f 	and.w	r2, r6, #15
 800ac14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1c:	ec51 0b18 	vmov	r0, r1, d8
 800ac20:	f7f5 fcf4 	bl	800060c <__aeabi_dmul>
 800ac24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac28:	1136      	asrs	r6, r6, #4
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	2502      	movs	r5, #2
 800ac2e:	2e00      	cmp	r6, #0
 800ac30:	d17e      	bne.n	800ad30 <_dtoa_r+0x4d8>
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d1d0      	bne.n	800abd8 <_dtoa_r+0x380>
 800ac36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac38:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f000 8084 	beq.w	800ad4a <_dtoa_r+0x4f2>
 800ac42:	4b96      	ldr	r3, [pc, #600]	; (800ae9c <_dtoa_r+0x644>)
 800ac44:	2200      	movs	r2, #0
 800ac46:	4640      	mov	r0, r8
 800ac48:	4649      	mov	r1, r9
 800ac4a:	f7f5 ff51 	bl	8000af0 <__aeabi_dcmplt>
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	d07b      	beq.n	800ad4a <_dtoa_r+0x4f2>
 800ac52:	9b04      	ldr	r3, [sp, #16]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d078      	beq.n	800ad4a <_dtoa_r+0x4f2>
 800ac58:	9b01      	ldr	r3, [sp, #4]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	dd39      	ble.n	800acd2 <_dtoa_r+0x47a>
 800ac5e:	4b90      	ldr	r3, [pc, #576]	; (800aea0 <_dtoa_r+0x648>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	4640      	mov	r0, r8
 800ac64:	4649      	mov	r1, r9
 800ac66:	f7f5 fcd1 	bl	800060c <__aeabi_dmul>
 800ac6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac6e:	9e01      	ldr	r6, [sp, #4]
 800ac70:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800ac74:	3501      	adds	r5, #1
 800ac76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	f7f5 fc5c 	bl	8000538 <__aeabi_i2d>
 800ac80:	4642      	mov	r2, r8
 800ac82:	464b      	mov	r3, r9
 800ac84:	f7f5 fcc2 	bl	800060c <__aeabi_dmul>
 800ac88:	4b86      	ldr	r3, [pc, #536]	; (800aea4 <_dtoa_r+0x64c>)
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f7f5 fb08 	bl	80002a0 <__adddf3>
 800ac90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ac94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac98:	9303      	str	r3, [sp, #12]
 800ac9a:	2e00      	cmp	r6, #0
 800ac9c:	d158      	bne.n	800ad50 <_dtoa_r+0x4f8>
 800ac9e:	4b82      	ldr	r3, [pc, #520]	; (800aea8 <_dtoa_r+0x650>)
 800aca0:	2200      	movs	r2, #0
 800aca2:	4640      	mov	r0, r8
 800aca4:	4649      	mov	r1, r9
 800aca6:	f7f5 faf9 	bl	800029c <__aeabi_dsub>
 800acaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acae:	4680      	mov	r8, r0
 800acb0:	4689      	mov	r9, r1
 800acb2:	f7f5 ff3b 	bl	8000b2c <__aeabi_dcmpgt>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	f040 8296 	bne.w	800b1e8 <_dtoa_r+0x990>
 800acbc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800acc0:	4640      	mov	r0, r8
 800acc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acc6:	4649      	mov	r1, r9
 800acc8:	f7f5 ff12 	bl	8000af0 <__aeabi_dcmplt>
 800accc:	2800      	cmp	r0, #0
 800acce:	f040 8289 	bne.w	800b1e4 <_dtoa_r+0x98c>
 800acd2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800acd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acd8:	2b00      	cmp	r3, #0
 800acda:	f2c0 814e 	blt.w	800af7a <_dtoa_r+0x722>
 800acde:	f1bb 0f0e 	cmp.w	fp, #14
 800ace2:	f300 814a 	bgt.w	800af7a <_dtoa_r+0x722>
 800ace6:	4b6b      	ldr	r3, [pc, #428]	; (800ae94 <_dtoa_r+0x63c>)
 800ace8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800acec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800acf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f280 80dc 	bge.w	800aeb0 <_dtoa_r+0x658>
 800acf8:	9b04      	ldr	r3, [sp, #16]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	f300 80d8 	bgt.w	800aeb0 <_dtoa_r+0x658>
 800ad00:	f040 826f 	bne.w	800b1e2 <_dtoa_r+0x98a>
 800ad04:	4b68      	ldr	r3, [pc, #416]	; (800aea8 <_dtoa_r+0x650>)
 800ad06:	2200      	movs	r2, #0
 800ad08:	4640      	mov	r0, r8
 800ad0a:	4649      	mov	r1, r9
 800ad0c:	f7f5 fc7e 	bl	800060c <__aeabi_dmul>
 800ad10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad14:	f7f5 ff00 	bl	8000b18 <__aeabi_dcmpge>
 800ad18:	9e04      	ldr	r6, [sp, #16]
 800ad1a:	4637      	mov	r7, r6
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	f040 8245 	bne.w	800b1ac <_dtoa_r+0x954>
 800ad22:	9d00      	ldr	r5, [sp, #0]
 800ad24:	2331      	movs	r3, #49	; 0x31
 800ad26:	f805 3b01 	strb.w	r3, [r5], #1
 800ad2a:	f10b 0b01 	add.w	fp, fp, #1
 800ad2e:	e241      	b.n	800b1b4 <_dtoa_r+0x95c>
 800ad30:	07f2      	lsls	r2, r6, #31
 800ad32:	d505      	bpl.n	800ad40 <_dtoa_r+0x4e8>
 800ad34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad38:	f7f5 fc68 	bl	800060c <__aeabi_dmul>
 800ad3c:	3501      	adds	r5, #1
 800ad3e:	2301      	movs	r3, #1
 800ad40:	1076      	asrs	r6, r6, #1
 800ad42:	3708      	adds	r7, #8
 800ad44:	e773      	b.n	800ac2e <_dtoa_r+0x3d6>
 800ad46:	2502      	movs	r5, #2
 800ad48:	e775      	b.n	800ac36 <_dtoa_r+0x3de>
 800ad4a:	9e04      	ldr	r6, [sp, #16]
 800ad4c:	465f      	mov	r7, fp
 800ad4e:	e792      	b.n	800ac76 <_dtoa_r+0x41e>
 800ad50:	9900      	ldr	r1, [sp, #0]
 800ad52:	4b50      	ldr	r3, [pc, #320]	; (800ae94 <_dtoa_r+0x63c>)
 800ad54:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad58:	4431      	add	r1, r6
 800ad5a:	9102      	str	r1, [sp, #8]
 800ad5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad5e:	eeb0 9a47 	vmov.f32	s18, s14
 800ad62:	eef0 9a67 	vmov.f32	s19, s15
 800ad66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ad6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad6e:	2900      	cmp	r1, #0
 800ad70:	d044      	beq.n	800adfc <_dtoa_r+0x5a4>
 800ad72:	494e      	ldr	r1, [pc, #312]	; (800aeac <_dtoa_r+0x654>)
 800ad74:	2000      	movs	r0, #0
 800ad76:	f7f5 fd73 	bl	8000860 <__aeabi_ddiv>
 800ad7a:	ec53 2b19 	vmov	r2, r3, d9
 800ad7e:	f7f5 fa8d 	bl	800029c <__aeabi_dsub>
 800ad82:	9d00      	ldr	r5, [sp, #0]
 800ad84:	ec41 0b19 	vmov	d9, r0, r1
 800ad88:	4649      	mov	r1, r9
 800ad8a:	4640      	mov	r0, r8
 800ad8c:	f7f5 feee 	bl	8000b6c <__aeabi_d2iz>
 800ad90:	4606      	mov	r6, r0
 800ad92:	f7f5 fbd1 	bl	8000538 <__aeabi_i2d>
 800ad96:	4602      	mov	r2, r0
 800ad98:	460b      	mov	r3, r1
 800ad9a:	4640      	mov	r0, r8
 800ad9c:	4649      	mov	r1, r9
 800ad9e:	f7f5 fa7d 	bl	800029c <__aeabi_dsub>
 800ada2:	3630      	adds	r6, #48	; 0x30
 800ada4:	f805 6b01 	strb.w	r6, [r5], #1
 800ada8:	ec53 2b19 	vmov	r2, r3, d9
 800adac:	4680      	mov	r8, r0
 800adae:	4689      	mov	r9, r1
 800adb0:	f7f5 fe9e 	bl	8000af0 <__aeabi_dcmplt>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	d164      	bne.n	800ae82 <_dtoa_r+0x62a>
 800adb8:	4642      	mov	r2, r8
 800adba:	464b      	mov	r3, r9
 800adbc:	4937      	ldr	r1, [pc, #220]	; (800ae9c <_dtoa_r+0x644>)
 800adbe:	2000      	movs	r0, #0
 800adc0:	f7f5 fa6c 	bl	800029c <__aeabi_dsub>
 800adc4:	ec53 2b19 	vmov	r2, r3, d9
 800adc8:	f7f5 fe92 	bl	8000af0 <__aeabi_dcmplt>
 800adcc:	2800      	cmp	r0, #0
 800adce:	f040 80b6 	bne.w	800af3e <_dtoa_r+0x6e6>
 800add2:	9b02      	ldr	r3, [sp, #8]
 800add4:	429d      	cmp	r5, r3
 800add6:	f43f af7c 	beq.w	800acd2 <_dtoa_r+0x47a>
 800adda:	4b31      	ldr	r3, [pc, #196]	; (800aea0 <_dtoa_r+0x648>)
 800addc:	ec51 0b19 	vmov	r0, r1, d9
 800ade0:	2200      	movs	r2, #0
 800ade2:	f7f5 fc13 	bl	800060c <__aeabi_dmul>
 800ade6:	4b2e      	ldr	r3, [pc, #184]	; (800aea0 <_dtoa_r+0x648>)
 800ade8:	ec41 0b19 	vmov	d9, r0, r1
 800adec:	2200      	movs	r2, #0
 800adee:	4640      	mov	r0, r8
 800adf0:	4649      	mov	r1, r9
 800adf2:	f7f5 fc0b 	bl	800060c <__aeabi_dmul>
 800adf6:	4680      	mov	r8, r0
 800adf8:	4689      	mov	r9, r1
 800adfa:	e7c5      	b.n	800ad88 <_dtoa_r+0x530>
 800adfc:	ec51 0b17 	vmov	r0, r1, d7
 800ae00:	f7f5 fc04 	bl	800060c <__aeabi_dmul>
 800ae04:	9b02      	ldr	r3, [sp, #8]
 800ae06:	9d00      	ldr	r5, [sp, #0]
 800ae08:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae0a:	ec41 0b19 	vmov	d9, r0, r1
 800ae0e:	4649      	mov	r1, r9
 800ae10:	4640      	mov	r0, r8
 800ae12:	f7f5 feab 	bl	8000b6c <__aeabi_d2iz>
 800ae16:	4606      	mov	r6, r0
 800ae18:	f7f5 fb8e 	bl	8000538 <__aeabi_i2d>
 800ae1c:	3630      	adds	r6, #48	; 0x30
 800ae1e:	4602      	mov	r2, r0
 800ae20:	460b      	mov	r3, r1
 800ae22:	4640      	mov	r0, r8
 800ae24:	4649      	mov	r1, r9
 800ae26:	f7f5 fa39 	bl	800029c <__aeabi_dsub>
 800ae2a:	f805 6b01 	strb.w	r6, [r5], #1
 800ae2e:	9b02      	ldr	r3, [sp, #8]
 800ae30:	429d      	cmp	r5, r3
 800ae32:	4680      	mov	r8, r0
 800ae34:	4689      	mov	r9, r1
 800ae36:	f04f 0200 	mov.w	r2, #0
 800ae3a:	d124      	bne.n	800ae86 <_dtoa_r+0x62e>
 800ae3c:	4b1b      	ldr	r3, [pc, #108]	; (800aeac <_dtoa_r+0x654>)
 800ae3e:	ec51 0b19 	vmov	r0, r1, d9
 800ae42:	f7f5 fa2d 	bl	80002a0 <__adddf3>
 800ae46:	4602      	mov	r2, r0
 800ae48:	460b      	mov	r3, r1
 800ae4a:	4640      	mov	r0, r8
 800ae4c:	4649      	mov	r1, r9
 800ae4e:	f7f5 fe6d 	bl	8000b2c <__aeabi_dcmpgt>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	d173      	bne.n	800af3e <_dtoa_r+0x6e6>
 800ae56:	ec53 2b19 	vmov	r2, r3, d9
 800ae5a:	4914      	ldr	r1, [pc, #80]	; (800aeac <_dtoa_r+0x654>)
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	f7f5 fa1d 	bl	800029c <__aeabi_dsub>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	4640      	mov	r0, r8
 800ae68:	4649      	mov	r1, r9
 800ae6a:	f7f5 fe41 	bl	8000af0 <__aeabi_dcmplt>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	f43f af2f 	beq.w	800acd2 <_dtoa_r+0x47a>
 800ae74:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ae76:	1e6b      	subs	r3, r5, #1
 800ae78:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae7e:	2b30      	cmp	r3, #48	; 0x30
 800ae80:	d0f8      	beq.n	800ae74 <_dtoa_r+0x61c>
 800ae82:	46bb      	mov	fp, r7
 800ae84:	e04a      	b.n	800af1c <_dtoa_r+0x6c4>
 800ae86:	4b06      	ldr	r3, [pc, #24]	; (800aea0 <_dtoa_r+0x648>)
 800ae88:	f7f5 fbc0 	bl	800060c <__aeabi_dmul>
 800ae8c:	4680      	mov	r8, r0
 800ae8e:	4689      	mov	r9, r1
 800ae90:	e7bd      	b.n	800ae0e <_dtoa_r+0x5b6>
 800ae92:	bf00      	nop
 800ae94:	0800fc78 	.word	0x0800fc78
 800ae98:	0800fc50 	.word	0x0800fc50
 800ae9c:	3ff00000 	.word	0x3ff00000
 800aea0:	40240000 	.word	0x40240000
 800aea4:	401c0000 	.word	0x401c0000
 800aea8:	40140000 	.word	0x40140000
 800aeac:	3fe00000 	.word	0x3fe00000
 800aeb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aeb4:	9d00      	ldr	r5, [sp, #0]
 800aeb6:	4642      	mov	r2, r8
 800aeb8:	464b      	mov	r3, r9
 800aeba:	4630      	mov	r0, r6
 800aebc:	4639      	mov	r1, r7
 800aebe:	f7f5 fccf 	bl	8000860 <__aeabi_ddiv>
 800aec2:	f7f5 fe53 	bl	8000b6c <__aeabi_d2iz>
 800aec6:	9001      	str	r0, [sp, #4]
 800aec8:	f7f5 fb36 	bl	8000538 <__aeabi_i2d>
 800aecc:	4642      	mov	r2, r8
 800aece:	464b      	mov	r3, r9
 800aed0:	f7f5 fb9c 	bl	800060c <__aeabi_dmul>
 800aed4:	4602      	mov	r2, r0
 800aed6:	460b      	mov	r3, r1
 800aed8:	4630      	mov	r0, r6
 800aeda:	4639      	mov	r1, r7
 800aedc:	f7f5 f9de 	bl	800029c <__aeabi_dsub>
 800aee0:	9e01      	ldr	r6, [sp, #4]
 800aee2:	9f04      	ldr	r7, [sp, #16]
 800aee4:	3630      	adds	r6, #48	; 0x30
 800aee6:	f805 6b01 	strb.w	r6, [r5], #1
 800aeea:	9e00      	ldr	r6, [sp, #0]
 800aeec:	1bae      	subs	r6, r5, r6
 800aeee:	42b7      	cmp	r7, r6
 800aef0:	4602      	mov	r2, r0
 800aef2:	460b      	mov	r3, r1
 800aef4:	d134      	bne.n	800af60 <_dtoa_r+0x708>
 800aef6:	f7f5 f9d3 	bl	80002a0 <__adddf3>
 800aefa:	4642      	mov	r2, r8
 800aefc:	464b      	mov	r3, r9
 800aefe:	4606      	mov	r6, r0
 800af00:	460f      	mov	r7, r1
 800af02:	f7f5 fe13 	bl	8000b2c <__aeabi_dcmpgt>
 800af06:	b9c8      	cbnz	r0, 800af3c <_dtoa_r+0x6e4>
 800af08:	4642      	mov	r2, r8
 800af0a:	464b      	mov	r3, r9
 800af0c:	4630      	mov	r0, r6
 800af0e:	4639      	mov	r1, r7
 800af10:	f7f5 fde4 	bl	8000adc <__aeabi_dcmpeq>
 800af14:	b110      	cbz	r0, 800af1c <_dtoa_r+0x6c4>
 800af16:	9b01      	ldr	r3, [sp, #4]
 800af18:	07db      	lsls	r3, r3, #31
 800af1a:	d40f      	bmi.n	800af3c <_dtoa_r+0x6e4>
 800af1c:	4651      	mov	r1, sl
 800af1e:	4620      	mov	r0, r4
 800af20:	f000 fd30 	bl	800b984 <_Bfree>
 800af24:	2300      	movs	r3, #0
 800af26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af28:	702b      	strb	r3, [r5, #0]
 800af2a:	f10b 0301 	add.w	r3, fp, #1
 800af2e:	6013      	str	r3, [r2, #0]
 800af30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af32:	2b00      	cmp	r3, #0
 800af34:	f43f ace2 	beq.w	800a8fc <_dtoa_r+0xa4>
 800af38:	601d      	str	r5, [r3, #0]
 800af3a:	e4df      	b.n	800a8fc <_dtoa_r+0xa4>
 800af3c:	465f      	mov	r7, fp
 800af3e:	462b      	mov	r3, r5
 800af40:	461d      	mov	r5, r3
 800af42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af46:	2a39      	cmp	r2, #57	; 0x39
 800af48:	d106      	bne.n	800af58 <_dtoa_r+0x700>
 800af4a:	9a00      	ldr	r2, [sp, #0]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d1f7      	bne.n	800af40 <_dtoa_r+0x6e8>
 800af50:	9900      	ldr	r1, [sp, #0]
 800af52:	2230      	movs	r2, #48	; 0x30
 800af54:	3701      	adds	r7, #1
 800af56:	700a      	strb	r2, [r1, #0]
 800af58:	781a      	ldrb	r2, [r3, #0]
 800af5a:	3201      	adds	r2, #1
 800af5c:	701a      	strb	r2, [r3, #0]
 800af5e:	e790      	b.n	800ae82 <_dtoa_r+0x62a>
 800af60:	4ba3      	ldr	r3, [pc, #652]	; (800b1f0 <_dtoa_r+0x998>)
 800af62:	2200      	movs	r2, #0
 800af64:	f7f5 fb52 	bl	800060c <__aeabi_dmul>
 800af68:	2200      	movs	r2, #0
 800af6a:	2300      	movs	r3, #0
 800af6c:	4606      	mov	r6, r0
 800af6e:	460f      	mov	r7, r1
 800af70:	f7f5 fdb4 	bl	8000adc <__aeabi_dcmpeq>
 800af74:	2800      	cmp	r0, #0
 800af76:	d09e      	beq.n	800aeb6 <_dtoa_r+0x65e>
 800af78:	e7d0      	b.n	800af1c <_dtoa_r+0x6c4>
 800af7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af7c:	2a00      	cmp	r2, #0
 800af7e:	f000 80ca 	beq.w	800b116 <_dtoa_r+0x8be>
 800af82:	9a07      	ldr	r2, [sp, #28]
 800af84:	2a01      	cmp	r2, #1
 800af86:	f300 80ad 	bgt.w	800b0e4 <_dtoa_r+0x88c>
 800af8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af8c:	2a00      	cmp	r2, #0
 800af8e:	f000 80a5 	beq.w	800b0dc <_dtoa_r+0x884>
 800af92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af96:	9e08      	ldr	r6, [sp, #32]
 800af98:	9d05      	ldr	r5, [sp, #20]
 800af9a:	9a05      	ldr	r2, [sp, #20]
 800af9c:	441a      	add	r2, r3
 800af9e:	9205      	str	r2, [sp, #20]
 800afa0:	9a06      	ldr	r2, [sp, #24]
 800afa2:	2101      	movs	r1, #1
 800afa4:	441a      	add	r2, r3
 800afa6:	4620      	mov	r0, r4
 800afa8:	9206      	str	r2, [sp, #24]
 800afaa:	f000 fda1 	bl	800baf0 <__i2b>
 800afae:	4607      	mov	r7, r0
 800afb0:	b165      	cbz	r5, 800afcc <_dtoa_r+0x774>
 800afb2:	9b06      	ldr	r3, [sp, #24]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	dd09      	ble.n	800afcc <_dtoa_r+0x774>
 800afb8:	42ab      	cmp	r3, r5
 800afba:	9a05      	ldr	r2, [sp, #20]
 800afbc:	bfa8      	it	ge
 800afbe:	462b      	movge	r3, r5
 800afc0:	1ad2      	subs	r2, r2, r3
 800afc2:	9205      	str	r2, [sp, #20]
 800afc4:	9a06      	ldr	r2, [sp, #24]
 800afc6:	1aed      	subs	r5, r5, r3
 800afc8:	1ad3      	subs	r3, r2, r3
 800afca:	9306      	str	r3, [sp, #24]
 800afcc:	9b08      	ldr	r3, [sp, #32]
 800afce:	b1f3      	cbz	r3, 800b00e <_dtoa_r+0x7b6>
 800afd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f000 80a3 	beq.w	800b11e <_dtoa_r+0x8c6>
 800afd8:	2e00      	cmp	r6, #0
 800afda:	dd10      	ble.n	800affe <_dtoa_r+0x7a6>
 800afdc:	4639      	mov	r1, r7
 800afde:	4632      	mov	r2, r6
 800afe0:	4620      	mov	r0, r4
 800afe2:	f000 fe45 	bl	800bc70 <__pow5mult>
 800afe6:	4652      	mov	r2, sl
 800afe8:	4601      	mov	r1, r0
 800afea:	4607      	mov	r7, r0
 800afec:	4620      	mov	r0, r4
 800afee:	f000 fd95 	bl	800bb1c <__multiply>
 800aff2:	4651      	mov	r1, sl
 800aff4:	4680      	mov	r8, r0
 800aff6:	4620      	mov	r0, r4
 800aff8:	f000 fcc4 	bl	800b984 <_Bfree>
 800affc:	46c2      	mov	sl, r8
 800affe:	9b08      	ldr	r3, [sp, #32]
 800b000:	1b9a      	subs	r2, r3, r6
 800b002:	d004      	beq.n	800b00e <_dtoa_r+0x7b6>
 800b004:	4651      	mov	r1, sl
 800b006:	4620      	mov	r0, r4
 800b008:	f000 fe32 	bl	800bc70 <__pow5mult>
 800b00c:	4682      	mov	sl, r0
 800b00e:	2101      	movs	r1, #1
 800b010:	4620      	mov	r0, r4
 800b012:	f000 fd6d 	bl	800baf0 <__i2b>
 800b016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b018:	2b00      	cmp	r3, #0
 800b01a:	4606      	mov	r6, r0
 800b01c:	f340 8081 	ble.w	800b122 <_dtoa_r+0x8ca>
 800b020:	461a      	mov	r2, r3
 800b022:	4601      	mov	r1, r0
 800b024:	4620      	mov	r0, r4
 800b026:	f000 fe23 	bl	800bc70 <__pow5mult>
 800b02a:	9b07      	ldr	r3, [sp, #28]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	4606      	mov	r6, r0
 800b030:	dd7a      	ble.n	800b128 <_dtoa_r+0x8d0>
 800b032:	f04f 0800 	mov.w	r8, #0
 800b036:	6933      	ldr	r3, [r6, #16]
 800b038:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b03c:	6918      	ldr	r0, [r3, #16]
 800b03e:	f000 fd09 	bl	800ba54 <__hi0bits>
 800b042:	f1c0 0020 	rsb	r0, r0, #32
 800b046:	9b06      	ldr	r3, [sp, #24]
 800b048:	4418      	add	r0, r3
 800b04a:	f010 001f 	ands.w	r0, r0, #31
 800b04e:	f000 8094 	beq.w	800b17a <_dtoa_r+0x922>
 800b052:	f1c0 0320 	rsb	r3, r0, #32
 800b056:	2b04      	cmp	r3, #4
 800b058:	f340 8085 	ble.w	800b166 <_dtoa_r+0x90e>
 800b05c:	9b05      	ldr	r3, [sp, #20]
 800b05e:	f1c0 001c 	rsb	r0, r0, #28
 800b062:	4403      	add	r3, r0
 800b064:	9305      	str	r3, [sp, #20]
 800b066:	9b06      	ldr	r3, [sp, #24]
 800b068:	4403      	add	r3, r0
 800b06a:	4405      	add	r5, r0
 800b06c:	9306      	str	r3, [sp, #24]
 800b06e:	9b05      	ldr	r3, [sp, #20]
 800b070:	2b00      	cmp	r3, #0
 800b072:	dd05      	ble.n	800b080 <_dtoa_r+0x828>
 800b074:	4651      	mov	r1, sl
 800b076:	461a      	mov	r2, r3
 800b078:	4620      	mov	r0, r4
 800b07a:	f000 fe53 	bl	800bd24 <__lshift>
 800b07e:	4682      	mov	sl, r0
 800b080:	9b06      	ldr	r3, [sp, #24]
 800b082:	2b00      	cmp	r3, #0
 800b084:	dd05      	ble.n	800b092 <_dtoa_r+0x83a>
 800b086:	4631      	mov	r1, r6
 800b088:	461a      	mov	r2, r3
 800b08a:	4620      	mov	r0, r4
 800b08c:	f000 fe4a 	bl	800bd24 <__lshift>
 800b090:	4606      	mov	r6, r0
 800b092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b094:	2b00      	cmp	r3, #0
 800b096:	d072      	beq.n	800b17e <_dtoa_r+0x926>
 800b098:	4631      	mov	r1, r6
 800b09a:	4650      	mov	r0, sl
 800b09c:	f000 feae 	bl	800bdfc <__mcmp>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	da6c      	bge.n	800b17e <_dtoa_r+0x926>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	4651      	mov	r1, sl
 800b0a8:	220a      	movs	r2, #10
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f000 fc8c 	bl	800b9c8 <__multadd>
 800b0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b0b6:	4682      	mov	sl, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	f000 81b0 	beq.w	800b41e <_dtoa_r+0xbc6>
 800b0be:	2300      	movs	r3, #0
 800b0c0:	4639      	mov	r1, r7
 800b0c2:	220a      	movs	r2, #10
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f000 fc7f 	bl	800b9c8 <__multadd>
 800b0ca:	9b01      	ldr	r3, [sp, #4]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	4607      	mov	r7, r0
 800b0d0:	f300 8096 	bgt.w	800b200 <_dtoa_r+0x9a8>
 800b0d4:	9b07      	ldr	r3, [sp, #28]
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	dc59      	bgt.n	800b18e <_dtoa_r+0x936>
 800b0da:	e091      	b.n	800b200 <_dtoa_r+0x9a8>
 800b0dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b0e2:	e758      	b.n	800af96 <_dtoa_r+0x73e>
 800b0e4:	9b04      	ldr	r3, [sp, #16]
 800b0e6:	1e5e      	subs	r6, r3, #1
 800b0e8:	9b08      	ldr	r3, [sp, #32]
 800b0ea:	42b3      	cmp	r3, r6
 800b0ec:	bfbf      	itttt	lt
 800b0ee:	9b08      	ldrlt	r3, [sp, #32]
 800b0f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b0f2:	9608      	strlt	r6, [sp, #32]
 800b0f4:	1af3      	sublt	r3, r6, r3
 800b0f6:	bfb4      	ite	lt
 800b0f8:	18d2      	addlt	r2, r2, r3
 800b0fa:	1b9e      	subge	r6, r3, r6
 800b0fc:	9b04      	ldr	r3, [sp, #16]
 800b0fe:	bfbc      	itt	lt
 800b100:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b102:	2600      	movlt	r6, #0
 800b104:	2b00      	cmp	r3, #0
 800b106:	bfb7      	itett	lt
 800b108:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b10c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b110:	1a9d      	sublt	r5, r3, r2
 800b112:	2300      	movlt	r3, #0
 800b114:	e741      	b.n	800af9a <_dtoa_r+0x742>
 800b116:	9e08      	ldr	r6, [sp, #32]
 800b118:	9d05      	ldr	r5, [sp, #20]
 800b11a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b11c:	e748      	b.n	800afb0 <_dtoa_r+0x758>
 800b11e:	9a08      	ldr	r2, [sp, #32]
 800b120:	e770      	b.n	800b004 <_dtoa_r+0x7ac>
 800b122:	9b07      	ldr	r3, [sp, #28]
 800b124:	2b01      	cmp	r3, #1
 800b126:	dc19      	bgt.n	800b15c <_dtoa_r+0x904>
 800b128:	9b02      	ldr	r3, [sp, #8]
 800b12a:	b9bb      	cbnz	r3, 800b15c <_dtoa_r+0x904>
 800b12c:	9b03      	ldr	r3, [sp, #12]
 800b12e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b132:	b99b      	cbnz	r3, 800b15c <_dtoa_r+0x904>
 800b134:	9b03      	ldr	r3, [sp, #12]
 800b136:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b13a:	0d1b      	lsrs	r3, r3, #20
 800b13c:	051b      	lsls	r3, r3, #20
 800b13e:	b183      	cbz	r3, 800b162 <_dtoa_r+0x90a>
 800b140:	9b05      	ldr	r3, [sp, #20]
 800b142:	3301      	adds	r3, #1
 800b144:	9305      	str	r3, [sp, #20]
 800b146:	9b06      	ldr	r3, [sp, #24]
 800b148:	3301      	adds	r3, #1
 800b14a:	9306      	str	r3, [sp, #24]
 800b14c:	f04f 0801 	mov.w	r8, #1
 800b150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b152:	2b00      	cmp	r3, #0
 800b154:	f47f af6f 	bne.w	800b036 <_dtoa_r+0x7de>
 800b158:	2001      	movs	r0, #1
 800b15a:	e774      	b.n	800b046 <_dtoa_r+0x7ee>
 800b15c:	f04f 0800 	mov.w	r8, #0
 800b160:	e7f6      	b.n	800b150 <_dtoa_r+0x8f8>
 800b162:	4698      	mov	r8, r3
 800b164:	e7f4      	b.n	800b150 <_dtoa_r+0x8f8>
 800b166:	d082      	beq.n	800b06e <_dtoa_r+0x816>
 800b168:	9a05      	ldr	r2, [sp, #20]
 800b16a:	331c      	adds	r3, #28
 800b16c:	441a      	add	r2, r3
 800b16e:	9205      	str	r2, [sp, #20]
 800b170:	9a06      	ldr	r2, [sp, #24]
 800b172:	441a      	add	r2, r3
 800b174:	441d      	add	r5, r3
 800b176:	9206      	str	r2, [sp, #24]
 800b178:	e779      	b.n	800b06e <_dtoa_r+0x816>
 800b17a:	4603      	mov	r3, r0
 800b17c:	e7f4      	b.n	800b168 <_dtoa_r+0x910>
 800b17e:	9b04      	ldr	r3, [sp, #16]
 800b180:	2b00      	cmp	r3, #0
 800b182:	dc37      	bgt.n	800b1f4 <_dtoa_r+0x99c>
 800b184:	9b07      	ldr	r3, [sp, #28]
 800b186:	2b02      	cmp	r3, #2
 800b188:	dd34      	ble.n	800b1f4 <_dtoa_r+0x99c>
 800b18a:	9b04      	ldr	r3, [sp, #16]
 800b18c:	9301      	str	r3, [sp, #4]
 800b18e:	9b01      	ldr	r3, [sp, #4]
 800b190:	b963      	cbnz	r3, 800b1ac <_dtoa_r+0x954>
 800b192:	4631      	mov	r1, r6
 800b194:	2205      	movs	r2, #5
 800b196:	4620      	mov	r0, r4
 800b198:	f000 fc16 	bl	800b9c8 <__multadd>
 800b19c:	4601      	mov	r1, r0
 800b19e:	4606      	mov	r6, r0
 800b1a0:	4650      	mov	r0, sl
 800b1a2:	f000 fe2b 	bl	800bdfc <__mcmp>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	f73f adbb 	bgt.w	800ad22 <_dtoa_r+0x4ca>
 800b1ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1ae:	9d00      	ldr	r5, [sp, #0]
 800b1b0:	ea6f 0b03 	mvn.w	fp, r3
 800b1b4:	f04f 0800 	mov.w	r8, #0
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 fbe2 	bl	800b984 <_Bfree>
 800b1c0:	2f00      	cmp	r7, #0
 800b1c2:	f43f aeab 	beq.w	800af1c <_dtoa_r+0x6c4>
 800b1c6:	f1b8 0f00 	cmp.w	r8, #0
 800b1ca:	d005      	beq.n	800b1d8 <_dtoa_r+0x980>
 800b1cc:	45b8      	cmp	r8, r7
 800b1ce:	d003      	beq.n	800b1d8 <_dtoa_r+0x980>
 800b1d0:	4641      	mov	r1, r8
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f000 fbd6 	bl	800b984 <_Bfree>
 800b1d8:	4639      	mov	r1, r7
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f000 fbd2 	bl	800b984 <_Bfree>
 800b1e0:	e69c      	b.n	800af1c <_dtoa_r+0x6c4>
 800b1e2:	2600      	movs	r6, #0
 800b1e4:	4637      	mov	r7, r6
 800b1e6:	e7e1      	b.n	800b1ac <_dtoa_r+0x954>
 800b1e8:	46bb      	mov	fp, r7
 800b1ea:	4637      	mov	r7, r6
 800b1ec:	e599      	b.n	800ad22 <_dtoa_r+0x4ca>
 800b1ee:	bf00      	nop
 800b1f0:	40240000 	.word	0x40240000
 800b1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f000 80c8 	beq.w	800b38c <_dtoa_r+0xb34>
 800b1fc:	9b04      	ldr	r3, [sp, #16]
 800b1fe:	9301      	str	r3, [sp, #4]
 800b200:	2d00      	cmp	r5, #0
 800b202:	dd05      	ble.n	800b210 <_dtoa_r+0x9b8>
 800b204:	4639      	mov	r1, r7
 800b206:	462a      	mov	r2, r5
 800b208:	4620      	mov	r0, r4
 800b20a:	f000 fd8b 	bl	800bd24 <__lshift>
 800b20e:	4607      	mov	r7, r0
 800b210:	f1b8 0f00 	cmp.w	r8, #0
 800b214:	d05b      	beq.n	800b2ce <_dtoa_r+0xa76>
 800b216:	6879      	ldr	r1, [r7, #4]
 800b218:	4620      	mov	r0, r4
 800b21a:	f000 fb73 	bl	800b904 <_Balloc>
 800b21e:	4605      	mov	r5, r0
 800b220:	b928      	cbnz	r0, 800b22e <_dtoa_r+0x9d6>
 800b222:	4b83      	ldr	r3, [pc, #524]	; (800b430 <_dtoa_r+0xbd8>)
 800b224:	4602      	mov	r2, r0
 800b226:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b22a:	f7ff bb2e 	b.w	800a88a <_dtoa_r+0x32>
 800b22e:	693a      	ldr	r2, [r7, #16]
 800b230:	3202      	adds	r2, #2
 800b232:	0092      	lsls	r2, r2, #2
 800b234:	f107 010c 	add.w	r1, r7, #12
 800b238:	300c      	adds	r0, #12
 800b23a:	f7ff fa59 	bl	800a6f0 <memcpy>
 800b23e:	2201      	movs	r2, #1
 800b240:	4629      	mov	r1, r5
 800b242:	4620      	mov	r0, r4
 800b244:	f000 fd6e 	bl	800bd24 <__lshift>
 800b248:	9b00      	ldr	r3, [sp, #0]
 800b24a:	3301      	adds	r3, #1
 800b24c:	9304      	str	r3, [sp, #16]
 800b24e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b252:	4413      	add	r3, r2
 800b254:	9308      	str	r3, [sp, #32]
 800b256:	9b02      	ldr	r3, [sp, #8]
 800b258:	f003 0301 	and.w	r3, r3, #1
 800b25c:	46b8      	mov	r8, r7
 800b25e:	9306      	str	r3, [sp, #24]
 800b260:	4607      	mov	r7, r0
 800b262:	9b04      	ldr	r3, [sp, #16]
 800b264:	4631      	mov	r1, r6
 800b266:	3b01      	subs	r3, #1
 800b268:	4650      	mov	r0, sl
 800b26a:	9301      	str	r3, [sp, #4]
 800b26c:	f7ff fa6c 	bl	800a748 <quorem>
 800b270:	4641      	mov	r1, r8
 800b272:	9002      	str	r0, [sp, #8]
 800b274:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b278:	4650      	mov	r0, sl
 800b27a:	f000 fdbf 	bl	800bdfc <__mcmp>
 800b27e:	463a      	mov	r2, r7
 800b280:	9005      	str	r0, [sp, #20]
 800b282:	4631      	mov	r1, r6
 800b284:	4620      	mov	r0, r4
 800b286:	f000 fdd5 	bl	800be34 <__mdiff>
 800b28a:	68c2      	ldr	r2, [r0, #12]
 800b28c:	4605      	mov	r5, r0
 800b28e:	bb02      	cbnz	r2, 800b2d2 <_dtoa_r+0xa7a>
 800b290:	4601      	mov	r1, r0
 800b292:	4650      	mov	r0, sl
 800b294:	f000 fdb2 	bl	800bdfc <__mcmp>
 800b298:	4602      	mov	r2, r0
 800b29a:	4629      	mov	r1, r5
 800b29c:	4620      	mov	r0, r4
 800b29e:	9209      	str	r2, [sp, #36]	; 0x24
 800b2a0:	f000 fb70 	bl	800b984 <_Bfree>
 800b2a4:	9b07      	ldr	r3, [sp, #28]
 800b2a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2a8:	9d04      	ldr	r5, [sp, #16]
 800b2aa:	ea43 0102 	orr.w	r1, r3, r2
 800b2ae:	9b06      	ldr	r3, [sp, #24]
 800b2b0:	4319      	orrs	r1, r3
 800b2b2:	d110      	bne.n	800b2d6 <_dtoa_r+0xa7e>
 800b2b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b2b8:	d029      	beq.n	800b30e <_dtoa_r+0xab6>
 800b2ba:	9b05      	ldr	r3, [sp, #20]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	dd02      	ble.n	800b2c6 <_dtoa_r+0xa6e>
 800b2c0:	9b02      	ldr	r3, [sp, #8]
 800b2c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b2c6:	9b01      	ldr	r3, [sp, #4]
 800b2c8:	f883 9000 	strb.w	r9, [r3]
 800b2cc:	e774      	b.n	800b1b8 <_dtoa_r+0x960>
 800b2ce:	4638      	mov	r0, r7
 800b2d0:	e7ba      	b.n	800b248 <_dtoa_r+0x9f0>
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	e7e1      	b.n	800b29a <_dtoa_r+0xa42>
 800b2d6:	9b05      	ldr	r3, [sp, #20]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	db04      	blt.n	800b2e6 <_dtoa_r+0xa8e>
 800b2dc:	9907      	ldr	r1, [sp, #28]
 800b2de:	430b      	orrs	r3, r1
 800b2e0:	9906      	ldr	r1, [sp, #24]
 800b2e2:	430b      	orrs	r3, r1
 800b2e4:	d120      	bne.n	800b328 <_dtoa_r+0xad0>
 800b2e6:	2a00      	cmp	r2, #0
 800b2e8:	dded      	ble.n	800b2c6 <_dtoa_r+0xa6e>
 800b2ea:	4651      	mov	r1, sl
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f000 fd18 	bl	800bd24 <__lshift>
 800b2f4:	4631      	mov	r1, r6
 800b2f6:	4682      	mov	sl, r0
 800b2f8:	f000 fd80 	bl	800bdfc <__mcmp>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	dc03      	bgt.n	800b308 <_dtoa_r+0xab0>
 800b300:	d1e1      	bne.n	800b2c6 <_dtoa_r+0xa6e>
 800b302:	f019 0f01 	tst.w	r9, #1
 800b306:	d0de      	beq.n	800b2c6 <_dtoa_r+0xa6e>
 800b308:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b30c:	d1d8      	bne.n	800b2c0 <_dtoa_r+0xa68>
 800b30e:	9a01      	ldr	r2, [sp, #4]
 800b310:	2339      	movs	r3, #57	; 0x39
 800b312:	7013      	strb	r3, [r2, #0]
 800b314:	462b      	mov	r3, r5
 800b316:	461d      	mov	r5, r3
 800b318:	3b01      	subs	r3, #1
 800b31a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b31e:	2a39      	cmp	r2, #57	; 0x39
 800b320:	d06c      	beq.n	800b3fc <_dtoa_r+0xba4>
 800b322:	3201      	adds	r2, #1
 800b324:	701a      	strb	r2, [r3, #0]
 800b326:	e747      	b.n	800b1b8 <_dtoa_r+0x960>
 800b328:	2a00      	cmp	r2, #0
 800b32a:	dd07      	ble.n	800b33c <_dtoa_r+0xae4>
 800b32c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b330:	d0ed      	beq.n	800b30e <_dtoa_r+0xab6>
 800b332:	9a01      	ldr	r2, [sp, #4]
 800b334:	f109 0301 	add.w	r3, r9, #1
 800b338:	7013      	strb	r3, [r2, #0]
 800b33a:	e73d      	b.n	800b1b8 <_dtoa_r+0x960>
 800b33c:	9b04      	ldr	r3, [sp, #16]
 800b33e:	9a08      	ldr	r2, [sp, #32]
 800b340:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b344:	4293      	cmp	r3, r2
 800b346:	d043      	beq.n	800b3d0 <_dtoa_r+0xb78>
 800b348:	4651      	mov	r1, sl
 800b34a:	2300      	movs	r3, #0
 800b34c:	220a      	movs	r2, #10
 800b34e:	4620      	mov	r0, r4
 800b350:	f000 fb3a 	bl	800b9c8 <__multadd>
 800b354:	45b8      	cmp	r8, r7
 800b356:	4682      	mov	sl, r0
 800b358:	f04f 0300 	mov.w	r3, #0
 800b35c:	f04f 020a 	mov.w	r2, #10
 800b360:	4641      	mov	r1, r8
 800b362:	4620      	mov	r0, r4
 800b364:	d107      	bne.n	800b376 <_dtoa_r+0xb1e>
 800b366:	f000 fb2f 	bl	800b9c8 <__multadd>
 800b36a:	4680      	mov	r8, r0
 800b36c:	4607      	mov	r7, r0
 800b36e:	9b04      	ldr	r3, [sp, #16]
 800b370:	3301      	adds	r3, #1
 800b372:	9304      	str	r3, [sp, #16]
 800b374:	e775      	b.n	800b262 <_dtoa_r+0xa0a>
 800b376:	f000 fb27 	bl	800b9c8 <__multadd>
 800b37a:	4639      	mov	r1, r7
 800b37c:	4680      	mov	r8, r0
 800b37e:	2300      	movs	r3, #0
 800b380:	220a      	movs	r2, #10
 800b382:	4620      	mov	r0, r4
 800b384:	f000 fb20 	bl	800b9c8 <__multadd>
 800b388:	4607      	mov	r7, r0
 800b38a:	e7f0      	b.n	800b36e <_dtoa_r+0xb16>
 800b38c:	9b04      	ldr	r3, [sp, #16]
 800b38e:	9301      	str	r3, [sp, #4]
 800b390:	9d00      	ldr	r5, [sp, #0]
 800b392:	4631      	mov	r1, r6
 800b394:	4650      	mov	r0, sl
 800b396:	f7ff f9d7 	bl	800a748 <quorem>
 800b39a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b39e:	9b00      	ldr	r3, [sp, #0]
 800b3a0:	f805 9b01 	strb.w	r9, [r5], #1
 800b3a4:	1aea      	subs	r2, r5, r3
 800b3a6:	9b01      	ldr	r3, [sp, #4]
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	dd07      	ble.n	800b3bc <_dtoa_r+0xb64>
 800b3ac:	4651      	mov	r1, sl
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	220a      	movs	r2, #10
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	f000 fb08 	bl	800b9c8 <__multadd>
 800b3b8:	4682      	mov	sl, r0
 800b3ba:	e7ea      	b.n	800b392 <_dtoa_r+0xb3a>
 800b3bc:	9b01      	ldr	r3, [sp, #4]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	bfc8      	it	gt
 800b3c2:	461d      	movgt	r5, r3
 800b3c4:	9b00      	ldr	r3, [sp, #0]
 800b3c6:	bfd8      	it	le
 800b3c8:	2501      	movle	r5, #1
 800b3ca:	441d      	add	r5, r3
 800b3cc:	f04f 0800 	mov.w	r8, #0
 800b3d0:	4651      	mov	r1, sl
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f000 fca5 	bl	800bd24 <__lshift>
 800b3da:	4631      	mov	r1, r6
 800b3dc:	4682      	mov	sl, r0
 800b3de:	f000 fd0d 	bl	800bdfc <__mcmp>
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	dc96      	bgt.n	800b314 <_dtoa_r+0xabc>
 800b3e6:	d102      	bne.n	800b3ee <_dtoa_r+0xb96>
 800b3e8:	f019 0f01 	tst.w	r9, #1
 800b3ec:	d192      	bne.n	800b314 <_dtoa_r+0xabc>
 800b3ee:	462b      	mov	r3, r5
 800b3f0:	461d      	mov	r5, r3
 800b3f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3f6:	2a30      	cmp	r2, #48	; 0x30
 800b3f8:	d0fa      	beq.n	800b3f0 <_dtoa_r+0xb98>
 800b3fa:	e6dd      	b.n	800b1b8 <_dtoa_r+0x960>
 800b3fc:	9a00      	ldr	r2, [sp, #0]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d189      	bne.n	800b316 <_dtoa_r+0xabe>
 800b402:	f10b 0b01 	add.w	fp, fp, #1
 800b406:	2331      	movs	r3, #49	; 0x31
 800b408:	e796      	b.n	800b338 <_dtoa_r+0xae0>
 800b40a:	4b0a      	ldr	r3, [pc, #40]	; (800b434 <_dtoa_r+0xbdc>)
 800b40c:	f7ff ba99 	b.w	800a942 <_dtoa_r+0xea>
 800b410:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b412:	2b00      	cmp	r3, #0
 800b414:	f47f aa6d 	bne.w	800a8f2 <_dtoa_r+0x9a>
 800b418:	4b07      	ldr	r3, [pc, #28]	; (800b438 <_dtoa_r+0xbe0>)
 800b41a:	f7ff ba92 	b.w	800a942 <_dtoa_r+0xea>
 800b41e:	9b01      	ldr	r3, [sp, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	dcb5      	bgt.n	800b390 <_dtoa_r+0xb38>
 800b424:	9b07      	ldr	r3, [sp, #28]
 800b426:	2b02      	cmp	r3, #2
 800b428:	f73f aeb1 	bgt.w	800b18e <_dtoa_r+0x936>
 800b42c:	e7b0      	b.n	800b390 <_dtoa_r+0xb38>
 800b42e:	bf00      	nop
 800b430:	0800fbd5 	.word	0x0800fbd5
 800b434:	0800f358 	.word	0x0800f358
 800b438:	0800fb59 	.word	0x0800fb59

0800b43c <_free_r>:
 800b43c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b43e:	2900      	cmp	r1, #0
 800b440:	d044      	beq.n	800b4cc <_free_r+0x90>
 800b442:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b446:	9001      	str	r0, [sp, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f1a1 0404 	sub.w	r4, r1, #4
 800b44e:	bfb8      	it	lt
 800b450:	18e4      	addlt	r4, r4, r3
 800b452:	f7fe fd4d 	bl	8009ef0 <__malloc_lock>
 800b456:	4a1e      	ldr	r2, [pc, #120]	; (800b4d0 <_free_r+0x94>)
 800b458:	9801      	ldr	r0, [sp, #4]
 800b45a:	6813      	ldr	r3, [r2, #0]
 800b45c:	b933      	cbnz	r3, 800b46c <_free_r+0x30>
 800b45e:	6063      	str	r3, [r4, #4]
 800b460:	6014      	str	r4, [r2, #0]
 800b462:	b003      	add	sp, #12
 800b464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b468:	f7fe bd48 	b.w	8009efc <__malloc_unlock>
 800b46c:	42a3      	cmp	r3, r4
 800b46e:	d908      	bls.n	800b482 <_free_r+0x46>
 800b470:	6825      	ldr	r5, [r4, #0]
 800b472:	1961      	adds	r1, r4, r5
 800b474:	428b      	cmp	r3, r1
 800b476:	bf01      	itttt	eq
 800b478:	6819      	ldreq	r1, [r3, #0]
 800b47a:	685b      	ldreq	r3, [r3, #4]
 800b47c:	1949      	addeq	r1, r1, r5
 800b47e:	6021      	streq	r1, [r4, #0]
 800b480:	e7ed      	b.n	800b45e <_free_r+0x22>
 800b482:	461a      	mov	r2, r3
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	b10b      	cbz	r3, 800b48c <_free_r+0x50>
 800b488:	42a3      	cmp	r3, r4
 800b48a:	d9fa      	bls.n	800b482 <_free_r+0x46>
 800b48c:	6811      	ldr	r1, [r2, #0]
 800b48e:	1855      	adds	r5, r2, r1
 800b490:	42a5      	cmp	r5, r4
 800b492:	d10b      	bne.n	800b4ac <_free_r+0x70>
 800b494:	6824      	ldr	r4, [r4, #0]
 800b496:	4421      	add	r1, r4
 800b498:	1854      	adds	r4, r2, r1
 800b49a:	42a3      	cmp	r3, r4
 800b49c:	6011      	str	r1, [r2, #0]
 800b49e:	d1e0      	bne.n	800b462 <_free_r+0x26>
 800b4a0:	681c      	ldr	r4, [r3, #0]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	6053      	str	r3, [r2, #4]
 800b4a6:	440c      	add	r4, r1
 800b4a8:	6014      	str	r4, [r2, #0]
 800b4aa:	e7da      	b.n	800b462 <_free_r+0x26>
 800b4ac:	d902      	bls.n	800b4b4 <_free_r+0x78>
 800b4ae:	230c      	movs	r3, #12
 800b4b0:	6003      	str	r3, [r0, #0]
 800b4b2:	e7d6      	b.n	800b462 <_free_r+0x26>
 800b4b4:	6825      	ldr	r5, [r4, #0]
 800b4b6:	1961      	adds	r1, r4, r5
 800b4b8:	428b      	cmp	r3, r1
 800b4ba:	bf04      	itt	eq
 800b4bc:	6819      	ldreq	r1, [r3, #0]
 800b4be:	685b      	ldreq	r3, [r3, #4]
 800b4c0:	6063      	str	r3, [r4, #4]
 800b4c2:	bf04      	itt	eq
 800b4c4:	1949      	addeq	r1, r1, r5
 800b4c6:	6021      	streq	r1, [r4, #0]
 800b4c8:	6054      	str	r4, [r2, #4]
 800b4ca:	e7ca      	b.n	800b462 <_free_r+0x26>
 800b4cc:	b003      	add	sp, #12
 800b4ce:	bd30      	pop	{r4, r5, pc}
 800b4d0:	20000a74 	.word	0x20000a74

0800b4d4 <__ssputs_r>:
 800b4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d8:	688e      	ldr	r6, [r1, #8]
 800b4da:	461f      	mov	r7, r3
 800b4dc:	42be      	cmp	r6, r7
 800b4de:	680b      	ldr	r3, [r1, #0]
 800b4e0:	4682      	mov	sl, r0
 800b4e2:	460c      	mov	r4, r1
 800b4e4:	4690      	mov	r8, r2
 800b4e6:	d82c      	bhi.n	800b542 <__ssputs_r+0x6e>
 800b4e8:	898a      	ldrh	r2, [r1, #12]
 800b4ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4ee:	d026      	beq.n	800b53e <__ssputs_r+0x6a>
 800b4f0:	6965      	ldr	r5, [r4, #20]
 800b4f2:	6909      	ldr	r1, [r1, #16]
 800b4f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4f8:	eba3 0901 	sub.w	r9, r3, r1
 800b4fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b500:	1c7b      	adds	r3, r7, #1
 800b502:	444b      	add	r3, r9
 800b504:	106d      	asrs	r5, r5, #1
 800b506:	429d      	cmp	r5, r3
 800b508:	bf38      	it	cc
 800b50a:	461d      	movcc	r5, r3
 800b50c:	0553      	lsls	r3, r2, #21
 800b50e:	d527      	bpl.n	800b560 <__ssputs_r+0x8c>
 800b510:	4629      	mov	r1, r5
 800b512:	f7fe faa9 	bl	8009a68 <_malloc_r>
 800b516:	4606      	mov	r6, r0
 800b518:	b360      	cbz	r0, 800b574 <__ssputs_r+0xa0>
 800b51a:	6921      	ldr	r1, [r4, #16]
 800b51c:	464a      	mov	r2, r9
 800b51e:	f7ff f8e7 	bl	800a6f0 <memcpy>
 800b522:	89a3      	ldrh	r3, [r4, #12]
 800b524:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b52c:	81a3      	strh	r3, [r4, #12]
 800b52e:	6126      	str	r6, [r4, #16]
 800b530:	6165      	str	r5, [r4, #20]
 800b532:	444e      	add	r6, r9
 800b534:	eba5 0509 	sub.w	r5, r5, r9
 800b538:	6026      	str	r6, [r4, #0]
 800b53a:	60a5      	str	r5, [r4, #8]
 800b53c:	463e      	mov	r6, r7
 800b53e:	42be      	cmp	r6, r7
 800b540:	d900      	bls.n	800b544 <__ssputs_r+0x70>
 800b542:	463e      	mov	r6, r7
 800b544:	6820      	ldr	r0, [r4, #0]
 800b546:	4632      	mov	r2, r6
 800b548:	4641      	mov	r1, r8
 800b54a:	f7fe ffd5 	bl	800a4f8 <memmove>
 800b54e:	68a3      	ldr	r3, [r4, #8]
 800b550:	1b9b      	subs	r3, r3, r6
 800b552:	60a3      	str	r3, [r4, #8]
 800b554:	6823      	ldr	r3, [r4, #0]
 800b556:	4433      	add	r3, r6
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	2000      	movs	r0, #0
 800b55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b560:	462a      	mov	r2, r5
 800b562:	f000 fd5d 	bl	800c020 <_realloc_r>
 800b566:	4606      	mov	r6, r0
 800b568:	2800      	cmp	r0, #0
 800b56a:	d1e0      	bne.n	800b52e <__ssputs_r+0x5a>
 800b56c:	6921      	ldr	r1, [r4, #16]
 800b56e:	4650      	mov	r0, sl
 800b570:	f7ff ff64 	bl	800b43c <_free_r>
 800b574:	230c      	movs	r3, #12
 800b576:	f8ca 3000 	str.w	r3, [sl]
 800b57a:	89a3      	ldrh	r3, [r4, #12]
 800b57c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b580:	81a3      	strh	r3, [r4, #12]
 800b582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b586:	e7e9      	b.n	800b55c <__ssputs_r+0x88>

0800b588 <_svfiprintf_r>:
 800b588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58c:	4698      	mov	r8, r3
 800b58e:	898b      	ldrh	r3, [r1, #12]
 800b590:	061b      	lsls	r3, r3, #24
 800b592:	b09d      	sub	sp, #116	; 0x74
 800b594:	4607      	mov	r7, r0
 800b596:	460d      	mov	r5, r1
 800b598:	4614      	mov	r4, r2
 800b59a:	d50e      	bpl.n	800b5ba <_svfiprintf_r+0x32>
 800b59c:	690b      	ldr	r3, [r1, #16]
 800b59e:	b963      	cbnz	r3, 800b5ba <_svfiprintf_r+0x32>
 800b5a0:	2140      	movs	r1, #64	; 0x40
 800b5a2:	f7fe fa61 	bl	8009a68 <_malloc_r>
 800b5a6:	6028      	str	r0, [r5, #0]
 800b5a8:	6128      	str	r0, [r5, #16]
 800b5aa:	b920      	cbnz	r0, 800b5b6 <_svfiprintf_r+0x2e>
 800b5ac:	230c      	movs	r3, #12
 800b5ae:	603b      	str	r3, [r7, #0]
 800b5b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5b4:	e0d0      	b.n	800b758 <_svfiprintf_r+0x1d0>
 800b5b6:	2340      	movs	r3, #64	; 0x40
 800b5b8:	616b      	str	r3, [r5, #20]
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b5be:	2320      	movs	r3, #32
 800b5c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5c8:	2330      	movs	r3, #48	; 0x30
 800b5ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b770 <_svfiprintf_r+0x1e8>
 800b5ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5d2:	f04f 0901 	mov.w	r9, #1
 800b5d6:	4623      	mov	r3, r4
 800b5d8:	469a      	mov	sl, r3
 800b5da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5de:	b10a      	cbz	r2, 800b5e4 <_svfiprintf_r+0x5c>
 800b5e0:	2a25      	cmp	r2, #37	; 0x25
 800b5e2:	d1f9      	bne.n	800b5d8 <_svfiprintf_r+0x50>
 800b5e4:	ebba 0b04 	subs.w	fp, sl, r4
 800b5e8:	d00b      	beq.n	800b602 <_svfiprintf_r+0x7a>
 800b5ea:	465b      	mov	r3, fp
 800b5ec:	4622      	mov	r2, r4
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	4638      	mov	r0, r7
 800b5f2:	f7ff ff6f 	bl	800b4d4 <__ssputs_r>
 800b5f6:	3001      	adds	r0, #1
 800b5f8:	f000 80a9 	beq.w	800b74e <_svfiprintf_r+0x1c6>
 800b5fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5fe:	445a      	add	r2, fp
 800b600:	9209      	str	r2, [sp, #36]	; 0x24
 800b602:	f89a 3000 	ldrb.w	r3, [sl]
 800b606:	2b00      	cmp	r3, #0
 800b608:	f000 80a1 	beq.w	800b74e <_svfiprintf_r+0x1c6>
 800b60c:	2300      	movs	r3, #0
 800b60e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b616:	f10a 0a01 	add.w	sl, sl, #1
 800b61a:	9304      	str	r3, [sp, #16]
 800b61c:	9307      	str	r3, [sp, #28]
 800b61e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b622:	931a      	str	r3, [sp, #104]	; 0x68
 800b624:	4654      	mov	r4, sl
 800b626:	2205      	movs	r2, #5
 800b628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b62c:	4850      	ldr	r0, [pc, #320]	; (800b770 <_svfiprintf_r+0x1e8>)
 800b62e:	f7f4 fdcf 	bl	80001d0 <memchr>
 800b632:	9a04      	ldr	r2, [sp, #16]
 800b634:	b9d8      	cbnz	r0, 800b66e <_svfiprintf_r+0xe6>
 800b636:	06d0      	lsls	r0, r2, #27
 800b638:	bf44      	itt	mi
 800b63a:	2320      	movmi	r3, #32
 800b63c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b640:	0711      	lsls	r1, r2, #28
 800b642:	bf44      	itt	mi
 800b644:	232b      	movmi	r3, #43	; 0x2b
 800b646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b64a:	f89a 3000 	ldrb.w	r3, [sl]
 800b64e:	2b2a      	cmp	r3, #42	; 0x2a
 800b650:	d015      	beq.n	800b67e <_svfiprintf_r+0xf6>
 800b652:	9a07      	ldr	r2, [sp, #28]
 800b654:	4654      	mov	r4, sl
 800b656:	2000      	movs	r0, #0
 800b658:	f04f 0c0a 	mov.w	ip, #10
 800b65c:	4621      	mov	r1, r4
 800b65e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b662:	3b30      	subs	r3, #48	; 0x30
 800b664:	2b09      	cmp	r3, #9
 800b666:	d94d      	bls.n	800b704 <_svfiprintf_r+0x17c>
 800b668:	b1b0      	cbz	r0, 800b698 <_svfiprintf_r+0x110>
 800b66a:	9207      	str	r2, [sp, #28]
 800b66c:	e014      	b.n	800b698 <_svfiprintf_r+0x110>
 800b66e:	eba0 0308 	sub.w	r3, r0, r8
 800b672:	fa09 f303 	lsl.w	r3, r9, r3
 800b676:	4313      	orrs	r3, r2
 800b678:	9304      	str	r3, [sp, #16]
 800b67a:	46a2      	mov	sl, r4
 800b67c:	e7d2      	b.n	800b624 <_svfiprintf_r+0x9c>
 800b67e:	9b03      	ldr	r3, [sp, #12]
 800b680:	1d19      	adds	r1, r3, #4
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	9103      	str	r1, [sp, #12]
 800b686:	2b00      	cmp	r3, #0
 800b688:	bfbb      	ittet	lt
 800b68a:	425b      	neglt	r3, r3
 800b68c:	f042 0202 	orrlt.w	r2, r2, #2
 800b690:	9307      	strge	r3, [sp, #28]
 800b692:	9307      	strlt	r3, [sp, #28]
 800b694:	bfb8      	it	lt
 800b696:	9204      	strlt	r2, [sp, #16]
 800b698:	7823      	ldrb	r3, [r4, #0]
 800b69a:	2b2e      	cmp	r3, #46	; 0x2e
 800b69c:	d10c      	bne.n	800b6b8 <_svfiprintf_r+0x130>
 800b69e:	7863      	ldrb	r3, [r4, #1]
 800b6a0:	2b2a      	cmp	r3, #42	; 0x2a
 800b6a2:	d134      	bne.n	800b70e <_svfiprintf_r+0x186>
 800b6a4:	9b03      	ldr	r3, [sp, #12]
 800b6a6:	1d1a      	adds	r2, r3, #4
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	9203      	str	r2, [sp, #12]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	bfb8      	it	lt
 800b6b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b6b4:	3402      	adds	r4, #2
 800b6b6:	9305      	str	r3, [sp, #20]
 800b6b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b780 <_svfiprintf_r+0x1f8>
 800b6bc:	7821      	ldrb	r1, [r4, #0]
 800b6be:	2203      	movs	r2, #3
 800b6c0:	4650      	mov	r0, sl
 800b6c2:	f7f4 fd85 	bl	80001d0 <memchr>
 800b6c6:	b138      	cbz	r0, 800b6d8 <_svfiprintf_r+0x150>
 800b6c8:	9b04      	ldr	r3, [sp, #16]
 800b6ca:	eba0 000a 	sub.w	r0, r0, sl
 800b6ce:	2240      	movs	r2, #64	; 0x40
 800b6d0:	4082      	lsls	r2, r0
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	3401      	adds	r4, #1
 800b6d6:	9304      	str	r3, [sp, #16]
 800b6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6dc:	4825      	ldr	r0, [pc, #148]	; (800b774 <_svfiprintf_r+0x1ec>)
 800b6de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6e2:	2206      	movs	r2, #6
 800b6e4:	f7f4 fd74 	bl	80001d0 <memchr>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d038      	beq.n	800b75e <_svfiprintf_r+0x1d6>
 800b6ec:	4b22      	ldr	r3, [pc, #136]	; (800b778 <_svfiprintf_r+0x1f0>)
 800b6ee:	bb1b      	cbnz	r3, 800b738 <_svfiprintf_r+0x1b0>
 800b6f0:	9b03      	ldr	r3, [sp, #12]
 800b6f2:	3307      	adds	r3, #7
 800b6f4:	f023 0307 	bic.w	r3, r3, #7
 800b6f8:	3308      	adds	r3, #8
 800b6fa:	9303      	str	r3, [sp, #12]
 800b6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6fe:	4433      	add	r3, r6
 800b700:	9309      	str	r3, [sp, #36]	; 0x24
 800b702:	e768      	b.n	800b5d6 <_svfiprintf_r+0x4e>
 800b704:	fb0c 3202 	mla	r2, ip, r2, r3
 800b708:	460c      	mov	r4, r1
 800b70a:	2001      	movs	r0, #1
 800b70c:	e7a6      	b.n	800b65c <_svfiprintf_r+0xd4>
 800b70e:	2300      	movs	r3, #0
 800b710:	3401      	adds	r4, #1
 800b712:	9305      	str	r3, [sp, #20]
 800b714:	4619      	mov	r1, r3
 800b716:	f04f 0c0a 	mov.w	ip, #10
 800b71a:	4620      	mov	r0, r4
 800b71c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b720:	3a30      	subs	r2, #48	; 0x30
 800b722:	2a09      	cmp	r2, #9
 800b724:	d903      	bls.n	800b72e <_svfiprintf_r+0x1a6>
 800b726:	2b00      	cmp	r3, #0
 800b728:	d0c6      	beq.n	800b6b8 <_svfiprintf_r+0x130>
 800b72a:	9105      	str	r1, [sp, #20]
 800b72c:	e7c4      	b.n	800b6b8 <_svfiprintf_r+0x130>
 800b72e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b732:	4604      	mov	r4, r0
 800b734:	2301      	movs	r3, #1
 800b736:	e7f0      	b.n	800b71a <_svfiprintf_r+0x192>
 800b738:	ab03      	add	r3, sp, #12
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	462a      	mov	r2, r5
 800b73e:	4b0f      	ldr	r3, [pc, #60]	; (800b77c <_svfiprintf_r+0x1f4>)
 800b740:	a904      	add	r1, sp, #16
 800b742:	4638      	mov	r0, r7
 800b744:	f7fd ff2a 	bl	800959c <_printf_float>
 800b748:	1c42      	adds	r2, r0, #1
 800b74a:	4606      	mov	r6, r0
 800b74c:	d1d6      	bne.n	800b6fc <_svfiprintf_r+0x174>
 800b74e:	89ab      	ldrh	r3, [r5, #12]
 800b750:	065b      	lsls	r3, r3, #25
 800b752:	f53f af2d 	bmi.w	800b5b0 <_svfiprintf_r+0x28>
 800b756:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b758:	b01d      	add	sp, #116	; 0x74
 800b75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b75e:	ab03      	add	r3, sp, #12
 800b760:	9300      	str	r3, [sp, #0]
 800b762:	462a      	mov	r2, r5
 800b764:	4b05      	ldr	r3, [pc, #20]	; (800b77c <_svfiprintf_r+0x1f4>)
 800b766:	a904      	add	r1, sp, #16
 800b768:	4638      	mov	r0, r7
 800b76a:	f7fe fa6b 	bl	8009c44 <_printf_i>
 800b76e:	e7eb      	b.n	800b748 <_svfiprintf_r+0x1c0>
 800b770:	0800fbe6 	.word	0x0800fbe6
 800b774:	0800fbf0 	.word	0x0800fbf0
 800b778:	0800959d 	.word	0x0800959d
 800b77c:	0800b4d5 	.word	0x0800b4d5
 800b780:	0800fbec 	.word	0x0800fbec

0800b784 <__ascii_mbtowc>:
 800b784:	b082      	sub	sp, #8
 800b786:	b901      	cbnz	r1, 800b78a <__ascii_mbtowc+0x6>
 800b788:	a901      	add	r1, sp, #4
 800b78a:	b142      	cbz	r2, 800b79e <__ascii_mbtowc+0x1a>
 800b78c:	b14b      	cbz	r3, 800b7a2 <__ascii_mbtowc+0x1e>
 800b78e:	7813      	ldrb	r3, [r2, #0]
 800b790:	600b      	str	r3, [r1, #0]
 800b792:	7812      	ldrb	r2, [r2, #0]
 800b794:	1e10      	subs	r0, r2, #0
 800b796:	bf18      	it	ne
 800b798:	2001      	movne	r0, #1
 800b79a:	b002      	add	sp, #8
 800b79c:	4770      	bx	lr
 800b79e:	4610      	mov	r0, r2
 800b7a0:	e7fb      	b.n	800b79a <__ascii_mbtowc+0x16>
 800b7a2:	f06f 0001 	mvn.w	r0, #1
 800b7a6:	e7f8      	b.n	800b79a <__ascii_mbtowc+0x16>

0800b7a8 <__sflush_r>:
 800b7a8:	898a      	ldrh	r2, [r1, #12]
 800b7aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ae:	4605      	mov	r5, r0
 800b7b0:	0710      	lsls	r0, r2, #28
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	d458      	bmi.n	800b868 <__sflush_r+0xc0>
 800b7b6:	684b      	ldr	r3, [r1, #4]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	dc05      	bgt.n	800b7c8 <__sflush_r+0x20>
 800b7bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	dc02      	bgt.n	800b7c8 <__sflush_r+0x20>
 800b7c2:	2000      	movs	r0, #0
 800b7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7ca:	2e00      	cmp	r6, #0
 800b7cc:	d0f9      	beq.n	800b7c2 <__sflush_r+0x1a>
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7d4:	682f      	ldr	r7, [r5, #0]
 800b7d6:	6a21      	ldr	r1, [r4, #32]
 800b7d8:	602b      	str	r3, [r5, #0]
 800b7da:	d032      	beq.n	800b842 <__sflush_r+0x9a>
 800b7dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7de:	89a3      	ldrh	r3, [r4, #12]
 800b7e0:	075a      	lsls	r2, r3, #29
 800b7e2:	d505      	bpl.n	800b7f0 <__sflush_r+0x48>
 800b7e4:	6863      	ldr	r3, [r4, #4]
 800b7e6:	1ac0      	subs	r0, r0, r3
 800b7e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b7ea:	b10b      	cbz	r3, 800b7f0 <__sflush_r+0x48>
 800b7ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7ee:	1ac0      	subs	r0, r0, r3
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7f6:	6a21      	ldr	r1, [r4, #32]
 800b7f8:	4628      	mov	r0, r5
 800b7fa:	47b0      	blx	r6
 800b7fc:	1c43      	adds	r3, r0, #1
 800b7fe:	89a3      	ldrh	r3, [r4, #12]
 800b800:	d106      	bne.n	800b810 <__sflush_r+0x68>
 800b802:	6829      	ldr	r1, [r5, #0]
 800b804:	291d      	cmp	r1, #29
 800b806:	d82b      	bhi.n	800b860 <__sflush_r+0xb8>
 800b808:	4a29      	ldr	r2, [pc, #164]	; (800b8b0 <__sflush_r+0x108>)
 800b80a:	410a      	asrs	r2, r1
 800b80c:	07d6      	lsls	r6, r2, #31
 800b80e:	d427      	bmi.n	800b860 <__sflush_r+0xb8>
 800b810:	2200      	movs	r2, #0
 800b812:	6062      	str	r2, [r4, #4]
 800b814:	04d9      	lsls	r1, r3, #19
 800b816:	6922      	ldr	r2, [r4, #16]
 800b818:	6022      	str	r2, [r4, #0]
 800b81a:	d504      	bpl.n	800b826 <__sflush_r+0x7e>
 800b81c:	1c42      	adds	r2, r0, #1
 800b81e:	d101      	bne.n	800b824 <__sflush_r+0x7c>
 800b820:	682b      	ldr	r3, [r5, #0]
 800b822:	b903      	cbnz	r3, 800b826 <__sflush_r+0x7e>
 800b824:	6560      	str	r0, [r4, #84]	; 0x54
 800b826:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b828:	602f      	str	r7, [r5, #0]
 800b82a:	2900      	cmp	r1, #0
 800b82c:	d0c9      	beq.n	800b7c2 <__sflush_r+0x1a>
 800b82e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b832:	4299      	cmp	r1, r3
 800b834:	d002      	beq.n	800b83c <__sflush_r+0x94>
 800b836:	4628      	mov	r0, r5
 800b838:	f7ff fe00 	bl	800b43c <_free_r>
 800b83c:	2000      	movs	r0, #0
 800b83e:	6360      	str	r0, [r4, #52]	; 0x34
 800b840:	e7c0      	b.n	800b7c4 <__sflush_r+0x1c>
 800b842:	2301      	movs	r3, #1
 800b844:	4628      	mov	r0, r5
 800b846:	47b0      	blx	r6
 800b848:	1c41      	adds	r1, r0, #1
 800b84a:	d1c8      	bne.n	800b7de <__sflush_r+0x36>
 800b84c:	682b      	ldr	r3, [r5, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d0c5      	beq.n	800b7de <__sflush_r+0x36>
 800b852:	2b1d      	cmp	r3, #29
 800b854:	d001      	beq.n	800b85a <__sflush_r+0xb2>
 800b856:	2b16      	cmp	r3, #22
 800b858:	d101      	bne.n	800b85e <__sflush_r+0xb6>
 800b85a:	602f      	str	r7, [r5, #0]
 800b85c:	e7b1      	b.n	800b7c2 <__sflush_r+0x1a>
 800b85e:	89a3      	ldrh	r3, [r4, #12]
 800b860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b864:	81a3      	strh	r3, [r4, #12]
 800b866:	e7ad      	b.n	800b7c4 <__sflush_r+0x1c>
 800b868:	690f      	ldr	r7, [r1, #16]
 800b86a:	2f00      	cmp	r7, #0
 800b86c:	d0a9      	beq.n	800b7c2 <__sflush_r+0x1a>
 800b86e:	0793      	lsls	r3, r2, #30
 800b870:	680e      	ldr	r6, [r1, #0]
 800b872:	bf08      	it	eq
 800b874:	694b      	ldreq	r3, [r1, #20]
 800b876:	600f      	str	r7, [r1, #0]
 800b878:	bf18      	it	ne
 800b87a:	2300      	movne	r3, #0
 800b87c:	eba6 0807 	sub.w	r8, r6, r7
 800b880:	608b      	str	r3, [r1, #8]
 800b882:	f1b8 0f00 	cmp.w	r8, #0
 800b886:	dd9c      	ble.n	800b7c2 <__sflush_r+0x1a>
 800b888:	6a21      	ldr	r1, [r4, #32]
 800b88a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b88c:	4643      	mov	r3, r8
 800b88e:	463a      	mov	r2, r7
 800b890:	4628      	mov	r0, r5
 800b892:	47b0      	blx	r6
 800b894:	2800      	cmp	r0, #0
 800b896:	dc06      	bgt.n	800b8a6 <__sflush_r+0xfe>
 800b898:	89a3      	ldrh	r3, [r4, #12]
 800b89a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b89e:	81a3      	strh	r3, [r4, #12]
 800b8a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8a4:	e78e      	b.n	800b7c4 <__sflush_r+0x1c>
 800b8a6:	4407      	add	r7, r0
 800b8a8:	eba8 0800 	sub.w	r8, r8, r0
 800b8ac:	e7e9      	b.n	800b882 <__sflush_r+0xda>
 800b8ae:	bf00      	nop
 800b8b0:	dfbffffe 	.word	0xdfbffffe

0800b8b4 <_fflush_r>:
 800b8b4:	b538      	push	{r3, r4, r5, lr}
 800b8b6:	690b      	ldr	r3, [r1, #16]
 800b8b8:	4605      	mov	r5, r0
 800b8ba:	460c      	mov	r4, r1
 800b8bc:	b913      	cbnz	r3, 800b8c4 <_fflush_r+0x10>
 800b8be:	2500      	movs	r5, #0
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	bd38      	pop	{r3, r4, r5, pc}
 800b8c4:	b118      	cbz	r0, 800b8ce <_fflush_r+0x1a>
 800b8c6:	6a03      	ldr	r3, [r0, #32]
 800b8c8:	b90b      	cbnz	r3, 800b8ce <_fflush_r+0x1a>
 800b8ca:	f7fe fbed 	bl	800a0a8 <__sinit>
 800b8ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d0f3      	beq.n	800b8be <_fflush_r+0xa>
 800b8d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b8d8:	07d0      	lsls	r0, r2, #31
 800b8da:	d404      	bmi.n	800b8e6 <_fflush_r+0x32>
 800b8dc:	0599      	lsls	r1, r3, #22
 800b8de:	d402      	bmi.n	800b8e6 <_fflush_r+0x32>
 800b8e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8e2:	f7fe fef4 	bl	800a6ce <__retarget_lock_acquire_recursive>
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	f7ff ff5d 	bl	800b7a8 <__sflush_r>
 800b8ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8f0:	07da      	lsls	r2, r3, #31
 800b8f2:	4605      	mov	r5, r0
 800b8f4:	d4e4      	bmi.n	800b8c0 <_fflush_r+0xc>
 800b8f6:	89a3      	ldrh	r3, [r4, #12]
 800b8f8:	059b      	lsls	r3, r3, #22
 800b8fa:	d4e1      	bmi.n	800b8c0 <_fflush_r+0xc>
 800b8fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8fe:	f7fe fee7 	bl	800a6d0 <__retarget_lock_release_recursive>
 800b902:	e7dd      	b.n	800b8c0 <_fflush_r+0xc>

0800b904 <_Balloc>:
 800b904:	b570      	push	{r4, r5, r6, lr}
 800b906:	69c6      	ldr	r6, [r0, #28]
 800b908:	4604      	mov	r4, r0
 800b90a:	460d      	mov	r5, r1
 800b90c:	b976      	cbnz	r6, 800b92c <_Balloc+0x28>
 800b90e:	2010      	movs	r0, #16
 800b910:	f7fe f87a 	bl	8009a08 <malloc>
 800b914:	4602      	mov	r2, r0
 800b916:	61e0      	str	r0, [r4, #28]
 800b918:	b920      	cbnz	r0, 800b924 <_Balloc+0x20>
 800b91a:	4b18      	ldr	r3, [pc, #96]	; (800b97c <_Balloc+0x78>)
 800b91c:	4818      	ldr	r0, [pc, #96]	; (800b980 <_Balloc+0x7c>)
 800b91e:	216b      	movs	r1, #107	; 0x6b
 800b920:	f7fe fef4 	bl	800a70c <__assert_func>
 800b924:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b928:	6006      	str	r6, [r0, #0]
 800b92a:	60c6      	str	r6, [r0, #12]
 800b92c:	69e6      	ldr	r6, [r4, #28]
 800b92e:	68f3      	ldr	r3, [r6, #12]
 800b930:	b183      	cbz	r3, 800b954 <_Balloc+0x50>
 800b932:	69e3      	ldr	r3, [r4, #28]
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b93a:	b9b8      	cbnz	r0, 800b96c <_Balloc+0x68>
 800b93c:	2101      	movs	r1, #1
 800b93e:	fa01 f605 	lsl.w	r6, r1, r5
 800b942:	1d72      	adds	r2, r6, #5
 800b944:	0092      	lsls	r2, r2, #2
 800b946:	4620      	mov	r0, r4
 800b948:	f000 fba6 	bl	800c098 <_calloc_r>
 800b94c:	b160      	cbz	r0, 800b968 <_Balloc+0x64>
 800b94e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b952:	e00e      	b.n	800b972 <_Balloc+0x6e>
 800b954:	2221      	movs	r2, #33	; 0x21
 800b956:	2104      	movs	r1, #4
 800b958:	4620      	mov	r0, r4
 800b95a:	f000 fb9d 	bl	800c098 <_calloc_r>
 800b95e:	69e3      	ldr	r3, [r4, #28]
 800b960:	60f0      	str	r0, [r6, #12]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1e4      	bne.n	800b932 <_Balloc+0x2e>
 800b968:	2000      	movs	r0, #0
 800b96a:	bd70      	pop	{r4, r5, r6, pc}
 800b96c:	6802      	ldr	r2, [r0, #0]
 800b96e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b972:	2300      	movs	r3, #0
 800b974:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b978:	e7f7      	b.n	800b96a <_Balloc+0x66>
 800b97a:	bf00      	nop
 800b97c:	0800fb66 	.word	0x0800fb66
 800b980:	0800fbf7 	.word	0x0800fbf7

0800b984 <_Bfree>:
 800b984:	b570      	push	{r4, r5, r6, lr}
 800b986:	69c6      	ldr	r6, [r0, #28]
 800b988:	4605      	mov	r5, r0
 800b98a:	460c      	mov	r4, r1
 800b98c:	b976      	cbnz	r6, 800b9ac <_Bfree+0x28>
 800b98e:	2010      	movs	r0, #16
 800b990:	f7fe f83a 	bl	8009a08 <malloc>
 800b994:	4602      	mov	r2, r0
 800b996:	61e8      	str	r0, [r5, #28]
 800b998:	b920      	cbnz	r0, 800b9a4 <_Bfree+0x20>
 800b99a:	4b09      	ldr	r3, [pc, #36]	; (800b9c0 <_Bfree+0x3c>)
 800b99c:	4809      	ldr	r0, [pc, #36]	; (800b9c4 <_Bfree+0x40>)
 800b99e:	218f      	movs	r1, #143	; 0x8f
 800b9a0:	f7fe feb4 	bl	800a70c <__assert_func>
 800b9a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9a8:	6006      	str	r6, [r0, #0]
 800b9aa:	60c6      	str	r6, [r0, #12]
 800b9ac:	b13c      	cbz	r4, 800b9be <_Bfree+0x3a>
 800b9ae:	69eb      	ldr	r3, [r5, #28]
 800b9b0:	6862      	ldr	r2, [r4, #4]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9b8:	6021      	str	r1, [r4, #0]
 800b9ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b9be:	bd70      	pop	{r4, r5, r6, pc}
 800b9c0:	0800fb66 	.word	0x0800fb66
 800b9c4:	0800fbf7 	.word	0x0800fbf7

0800b9c8 <__multadd>:
 800b9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9cc:	690d      	ldr	r5, [r1, #16]
 800b9ce:	4607      	mov	r7, r0
 800b9d0:	460c      	mov	r4, r1
 800b9d2:	461e      	mov	r6, r3
 800b9d4:	f101 0c14 	add.w	ip, r1, #20
 800b9d8:	2000      	movs	r0, #0
 800b9da:	f8dc 3000 	ldr.w	r3, [ip]
 800b9de:	b299      	uxth	r1, r3
 800b9e0:	fb02 6101 	mla	r1, r2, r1, r6
 800b9e4:	0c1e      	lsrs	r6, r3, #16
 800b9e6:	0c0b      	lsrs	r3, r1, #16
 800b9e8:	fb02 3306 	mla	r3, r2, r6, r3
 800b9ec:	b289      	uxth	r1, r1
 800b9ee:	3001      	adds	r0, #1
 800b9f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b9f4:	4285      	cmp	r5, r0
 800b9f6:	f84c 1b04 	str.w	r1, [ip], #4
 800b9fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b9fe:	dcec      	bgt.n	800b9da <__multadd+0x12>
 800ba00:	b30e      	cbz	r6, 800ba46 <__multadd+0x7e>
 800ba02:	68a3      	ldr	r3, [r4, #8]
 800ba04:	42ab      	cmp	r3, r5
 800ba06:	dc19      	bgt.n	800ba3c <__multadd+0x74>
 800ba08:	6861      	ldr	r1, [r4, #4]
 800ba0a:	4638      	mov	r0, r7
 800ba0c:	3101      	adds	r1, #1
 800ba0e:	f7ff ff79 	bl	800b904 <_Balloc>
 800ba12:	4680      	mov	r8, r0
 800ba14:	b928      	cbnz	r0, 800ba22 <__multadd+0x5a>
 800ba16:	4602      	mov	r2, r0
 800ba18:	4b0c      	ldr	r3, [pc, #48]	; (800ba4c <__multadd+0x84>)
 800ba1a:	480d      	ldr	r0, [pc, #52]	; (800ba50 <__multadd+0x88>)
 800ba1c:	21ba      	movs	r1, #186	; 0xba
 800ba1e:	f7fe fe75 	bl	800a70c <__assert_func>
 800ba22:	6922      	ldr	r2, [r4, #16]
 800ba24:	3202      	adds	r2, #2
 800ba26:	f104 010c 	add.w	r1, r4, #12
 800ba2a:	0092      	lsls	r2, r2, #2
 800ba2c:	300c      	adds	r0, #12
 800ba2e:	f7fe fe5f 	bl	800a6f0 <memcpy>
 800ba32:	4621      	mov	r1, r4
 800ba34:	4638      	mov	r0, r7
 800ba36:	f7ff ffa5 	bl	800b984 <_Bfree>
 800ba3a:	4644      	mov	r4, r8
 800ba3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba40:	3501      	adds	r5, #1
 800ba42:	615e      	str	r6, [r3, #20]
 800ba44:	6125      	str	r5, [r4, #16]
 800ba46:	4620      	mov	r0, r4
 800ba48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba4c:	0800fbd5 	.word	0x0800fbd5
 800ba50:	0800fbf7 	.word	0x0800fbf7

0800ba54 <__hi0bits>:
 800ba54:	0c03      	lsrs	r3, r0, #16
 800ba56:	041b      	lsls	r3, r3, #16
 800ba58:	b9d3      	cbnz	r3, 800ba90 <__hi0bits+0x3c>
 800ba5a:	0400      	lsls	r0, r0, #16
 800ba5c:	2310      	movs	r3, #16
 800ba5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ba62:	bf04      	itt	eq
 800ba64:	0200      	lsleq	r0, r0, #8
 800ba66:	3308      	addeq	r3, #8
 800ba68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ba6c:	bf04      	itt	eq
 800ba6e:	0100      	lsleq	r0, r0, #4
 800ba70:	3304      	addeq	r3, #4
 800ba72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ba76:	bf04      	itt	eq
 800ba78:	0080      	lsleq	r0, r0, #2
 800ba7a:	3302      	addeq	r3, #2
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	db05      	blt.n	800ba8c <__hi0bits+0x38>
 800ba80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ba84:	f103 0301 	add.w	r3, r3, #1
 800ba88:	bf08      	it	eq
 800ba8a:	2320      	moveq	r3, #32
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	4770      	bx	lr
 800ba90:	2300      	movs	r3, #0
 800ba92:	e7e4      	b.n	800ba5e <__hi0bits+0xa>

0800ba94 <__lo0bits>:
 800ba94:	6803      	ldr	r3, [r0, #0]
 800ba96:	f013 0207 	ands.w	r2, r3, #7
 800ba9a:	d00c      	beq.n	800bab6 <__lo0bits+0x22>
 800ba9c:	07d9      	lsls	r1, r3, #31
 800ba9e:	d422      	bmi.n	800bae6 <__lo0bits+0x52>
 800baa0:	079a      	lsls	r2, r3, #30
 800baa2:	bf49      	itett	mi
 800baa4:	085b      	lsrmi	r3, r3, #1
 800baa6:	089b      	lsrpl	r3, r3, #2
 800baa8:	6003      	strmi	r3, [r0, #0]
 800baaa:	2201      	movmi	r2, #1
 800baac:	bf5c      	itt	pl
 800baae:	6003      	strpl	r3, [r0, #0]
 800bab0:	2202      	movpl	r2, #2
 800bab2:	4610      	mov	r0, r2
 800bab4:	4770      	bx	lr
 800bab6:	b299      	uxth	r1, r3
 800bab8:	b909      	cbnz	r1, 800babe <__lo0bits+0x2a>
 800baba:	0c1b      	lsrs	r3, r3, #16
 800babc:	2210      	movs	r2, #16
 800babe:	b2d9      	uxtb	r1, r3
 800bac0:	b909      	cbnz	r1, 800bac6 <__lo0bits+0x32>
 800bac2:	3208      	adds	r2, #8
 800bac4:	0a1b      	lsrs	r3, r3, #8
 800bac6:	0719      	lsls	r1, r3, #28
 800bac8:	bf04      	itt	eq
 800baca:	091b      	lsreq	r3, r3, #4
 800bacc:	3204      	addeq	r2, #4
 800bace:	0799      	lsls	r1, r3, #30
 800bad0:	bf04      	itt	eq
 800bad2:	089b      	lsreq	r3, r3, #2
 800bad4:	3202      	addeq	r2, #2
 800bad6:	07d9      	lsls	r1, r3, #31
 800bad8:	d403      	bmi.n	800bae2 <__lo0bits+0x4e>
 800bada:	085b      	lsrs	r3, r3, #1
 800badc:	f102 0201 	add.w	r2, r2, #1
 800bae0:	d003      	beq.n	800baea <__lo0bits+0x56>
 800bae2:	6003      	str	r3, [r0, #0]
 800bae4:	e7e5      	b.n	800bab2 <__lo0bits+0x1e>
 800bae6:	2200      	movs	r2, #0
 800bae8:	e7e3      	b.n	800bab2 <__lo0bits+0x1e>
 800baea:	2220      	movs	r2, #32
 800baec:	e7e1      	b.n	800bab2 <__lo0bits+0x1e>
	...

0800baf0 <__i2b>:
 800baf0:	b510      	push	{r4, lr}
 800baf2:	460c      	mov	r4, r1
 800baf4:	2101      	movs	r1, #1
 800baf6:	f7ff ff05 	bl	800b904 <_Balloc>
 800bafa:	4602      	mov	r2, r0
 800bafc:	b928      	cbnz	r0, 800bb0a <__i2b+0x1a>
 800bafe:	4b05      	ldr	r3, [pc, #20]	; (800bb14 <__i2b+0x24>)
 800bb00:	4805      	ldr	r0, [pc, #20]	; (800bb18 <__i2b+0x28>)
 800bb02:	f240 1145 	movw	r1, #325	; 0x145
 800bb06:	f7fe fe01 	bl	800a70c <__assert_func>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	6144      	str	r4, [r0, #20]
 800bb0e:	6103      	str	r3, [r0, #16]
 800bb10:	bd10      	pop	{r4, pc}
 800bb12:	bf00      	nop
 800bb14:	0800fbd5 	.word	0x0800fbd5
 800bb18:	0800fbf7 	.word	0x0800fbf7

0800bb1c <__multiply>:
 800bb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb20:	4691      	mov	r9, r2
 800bb22:	690a      	ldr	r2, [r1, #16]
 800bb24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	bfb8      	it	lt
 800bb2c:	460b      	movlt	r3, r1
 800bb2e:	460c      	mov	r4, r1
 800bb30:	bfbc      	itt	lt
 800bb32:	464c      	movlt	r4, r9
 800bb34:	4699      	movlt	r9, r3
 800bb36:	6927      	ldr	r7, [r4, #16]
 800bb38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bb3c:	68a3      	ldr	r3, [r4, #8]
 800bb3e:	6861      	ldr	r1, [r4, #4]
 800bb40:	eb07 060a 	add.w	r6, r7, sl
 800bb44:	42b3      	cmp	r3, r6
 800bb46:	b085      	sub	sp, #20
 800bb48:	bfb8      	it	lt
 800bb4a:	3101      	addlt	r1, #1
 800bb4c:	f7ff feda 	bl	800b904 <_Balloc>
 800bb50:	b930      	cbnz	r0, 800bb60 <__multiply+0x44>
 800bb52:	4602      	mov	r2, r0
 800bb54:	4b44      	ldr	r3, [pc, #272]	; (800bc68 <__multiply+0x14c>)
 800bb56:	4845      	ldr	r0, [pc, #276]	; (800bc6c <__multiply+0x150>)
 800bb58:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bb5c:	f7fe fdd6 	bl	800a70c <__assert_func>
 800bb60:	f100 0514 	add.w	r5, r0, #20
 800bb64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb68:	462b      	mov	r3, r5
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	4543      	cmp	r3, r8
 800bb6e:	d321      	bcc.n	800bbb4 <__multiply+0x98>
 800bb70:	f104 0314 	add.w	r3, r4, #20
 800bb74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bb78:	f109 0314 	add.w	r3, r9, #20
 800bb7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bb80:	9202      	str	r2, [sp, #8]
 800bb82:	1b3a      	subs	r2, r7, r4
 800bb84:	3a15      	subs	r2, #21
 800bb86:	f022 0203 	bic.w	r2, r2, #3
 800bb8a:	3204      	adds	r2, #4
 800bb8c:	f104 0115 	add.w	r1, r4, #21
 800bb90:	428f      	cmp	r7, r1
 800bb92:	bf38      	it	cc
 800bb94:	2204      	movcc	r2, #4
 800bb96:	9201      	str	r2, [sp, #4]
 800bb98:	9a02      	ldr	r2, [sp, #8]
 800bb9a:	9303      	str	r3, [sp, #12]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d80c      	bhi.n	800bbba <__multiply+0x9e>
 800bba0:	2e00      	cmp	r6, #0
 800bba2:	dd03      	ble.n	800bbac <__multiply+0x90>
 800bba4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d05b      	beq.n	800bc64 <__multiply+0x148>
 800bbac:	6106      	str	r6, [r0, #16]
 800bbae:	b005      	add	sp, #20
 800bbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb4:	f843 2b04 	str.w	r2, [r3], #4
 800bbb8:	e7d8      	b.n	800bb6c <__multiply+0x50>
 800bbba:	f8b3 a000 	ldrh.w	sl, [r3]
 800bbbe:	f1ba 0f00 	cmp.w	sl, #0
 800bbc2:	d024      	beq.n	800bc0e <__multiply+0xf2>
 800bbc4:	f104 0e14 	add.w	lr, r4, #20
 800bbc8:	46a9      	mov	r9, r5
 800bbca:	f04f 0c00 	mov.w	ip, #0
 800bbce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bbd2:	f8d9 1000 	ldr.w	r1, [r9]
 800bbd6:	fa1f fb82 	uxth.w	fp, r2
 800bbda:	b289      	uxth	r1, r1
 800bbdc:	fb0a 110b 	mla	r1, sl, fp, r1
 800bbe0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bbe4:	f8d9 2000 	ldr.w	r2, [r9]
 800bbe8:	4461      	add	r1, ip
 800bbea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bbee:	fb0a c20b 	mla	r2, sl, fp, ip
 800bbf2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bbf6:	b289      	uxth	r1, r1
 800bbf8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bbfc:	4577      	cmp	r7, lr
 800bbfe:	f849 1b04 	str.w	r1, [r9], #4
 800bc02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc06:	d8e2      	bhi.n	800bbce <__multiply+0xb2>
 800bc08:	9a01      	ldr	r2, [sp, #4]
 800bc0a:	f845 c002 	str.w	ip, [r5, r2]
 800bc0e:	9a03      	ldr	r2, [sp, #12]
 800bc10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc14:	3304      	adds	r3, #4
 800bc16:	f1b9 0f00 	cmp.w	r9, #0
 800bc1a:	d021      	beq.n	800bc60 <__multiply+0x144>
 800bc1c:	6829      	ldr	r1, [r5, #0]
 800bc1e:	f104 0c14 	add.w	ip, r4, #20
 800bc22:	46ae      	mov	lr, r5
 800bc24:	f04f 0a00 	mov.w	sl, #0
 800bc28:	f8bc b000 	ldrh.w	fp, [ip]
 800bc2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bc30:	fb09 220b 	mla	r2, r9, fp, r2
 800bc34:	4452      	add	r2, sl
 800bc36:	b289      	uxth	r1, r1
 800bc38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc3c:	f84e 1b04 	str.w	r1, [lr], #4
 800bc40:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bc44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc48:	f8be 1000 	ldrh.w	r1, [lr]
 800bc4c:	fb09 110a 	mla	r1, r9, sl, r1
 800bc50:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bc54:	4567      	cmp	r7, ip
 800bc56:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc5a:	d8e5      	bhi.n	800bc28 <__multiply+0x10c>
 800bc5c:	9a01      	ldr	r2, [sp, #4]
 800bc5e:	50a9      	str	r1, [r5, r2]
 800bc60:	3504      	adds	r5, #4
 800bc62:	e799      	b.n	800bb98 <__multiply+0x7c>
 800bc64:	3e01      	subs	r6, #1
 800bc66:	e79b      	b.n	800bba0 <__multiply+0x84>
 800bc68:	0800fbd5 	.word	0x0800fbd5
 800bc6c:	0800fbf7 	.word	0x0800fbf7

0800bc70 <__pow5mult>:
 800bc70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc74:	4615      	mov	r5, r2
 800bc76:	f012 0203 	ands.w	r2, r2, #3
 800bc7a:	4606      	mov	r6, r0
 800bc7c:	460f      	mov	r7, r1
 800bc7e:	d007      	beq.n	800bc90 <__pow5mult+0x20>
 800bc80:	4c25      	ldr	r4, [pc, #148]	; (800bd18 <__pow5mult+0xa8>)
 800bc82:	3a01      	subs	r2, #1
 800bc84:	2300      	movs	r3, #0
 800bc86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc8a:	f7ff fe9d 	bl	800b9c8 <__multadd>
 800bc8e:	4607      	mov	r7, r0
 800bc90:	10ad      	asrs	r5, r5, #2
 800bc92:	d03d      	beq.n	800bd10 <__pow5mult+0xa0>
 800bc94:	69f4      	ldr	r4, [r6, #28]
 800bc96:	b97c      	cbnz	r4, 800bcb8 <__pow5mult+0x48>
 800bc98:	2010      	movs	r0, #16
 800bc9a:	f7fd feb5 	bl	8009a08 <malloc>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	61f0      	str	r0, [r6, #28]
 800bca2:	b928      	cbnz	r0, 800bcb0 <__pow5mult+0x40>
 800bca4:	4b1d      	ldr	r3, [pc, #116]	; (800bd1c <__pow5mult+0xac>)
 800bca6:	481e      	ldr	r0, [pc, #120]	; (800bd20 <__pow5mult+0xb0>)
 800bca8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bcac:	f7fe fd2e 	bl	800a70c <__assert_func>
 800bcb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bcb4:	6004      	str	r4, [r0, #0]
 800bcb6:	60c4      	str	r4, [r0, #12]
 800bcb8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bcbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bcc0:	b94c      	cbnz	r4, 800bcd6 <__pow5mult+0x66>
 800bcc2:	f240 2171 	movw	r1, #625	; 0x271
 800bcc6:	4630      	mov	r0, r6
 800bcc8:	f7ff ff12 	bl	800baf0 <__i2b>
 800bccc:	2300      	movs	r3, #0
 800bcce:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	6003      	str	r3, [r0, #0]
 800bcd6:	f04f 0900 	mov.w	r9, #0
 800bcda:	07eb      	lsls	r3, r5, #31
 800bcdc:	d50a      	bpl.n	800bcf4 <__pow5mult+0x84>
 800bcde:	4639      	mov	r1, r7
 800bce0:	4622      	mov	r2, r4
 800bce2:	4630      	mov	r0, r6
 800bce4:	f7ff ff1a 	bl	800bb1c <__multiply>
 800bce8:	4639      	mov	r1, r7
 800bcea:	4680      	mov	r8, r0
 800bcec:	4630      	mov	r0, r6
 800bcee:	f7ff fe49 	bl	800b984 <_Bfree>
 800bcf2:	4647      	mov	r7, r8
 800bcf4:	106d      	asrs	r5, r5, #1
 800bcf6:	d00b      	beq.n	800bd10 <__pow5mult+0xa0>
 800bcf8:	6820      	ldr	r0, [r4, #0]
 800bcfa:	b938      	cbnz	r0, 800bd0c <__pow5mult+0x9c>
 800bcfc:	4622      	mov	r2, r4
 800bcfe:	4621      	mov	r1, r4
 800bd00:	4630      	mov	r0, r6
 800bd02:	f7ff ff0b 	bl	800bb1c <__multiply>
 800bd06:	6020      	str	r0, [r4, #0]
 800bd08:	f8c0 9000 	str.w	r9, [r0]
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	e7e4      	b.n	800bcda <__pow5mult+0x6a>
 800bd10:	4638      	mov	r0, r7
 800bd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd16:	bf00      	nop
 800bd18:	0800fd40 	.word	0x0800fd40
 800bd1c:	0800fb66 	.word	0x0800fb66
 800bd20:	0800fbf7 	.word	0x0800fbf7

0800bd24 <__lshift>:
 800bd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd28:	460c      	mov	r4, r1
 800bd2a:	6849      	ldr	r1, [r1, #4]
 800bd2c:	6923      	ldr	r3, [r4, #16]
 800bd2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd32:	68a3      	ldr	r3, [r4, #8]
 800bd34:	4607      	mov	r7, r0
 800bd36:	4691      	mov	r9, r2
 800bd38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd3c:	f108 0601 	add.w	r6, r8, #1
 800bd40:	42b3      	cmp	r3, r6
 800bd42:	db0b      	blt.n	800bd5c <__lshift+0x38>
 800bd44:	4638      	mov	r0, r7
 800bd46:	f7ff fddd 	bl	800b904 <_Balloc>
 800bd4a:	4605      	mov	r5, r0
 800bd4c:	b948      	cbnz	r0, 800bd62 <__lshift+0x3e>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	4b28      	ldr	r3, [pc, #160]	; (800bdf4 <__lshift+0xd0>)
 800bd52:	4829      	ldr	r0, [pc, #164]	; (800bdf8 <__lshift+0xd4>)
 800bd54:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bd58:	f7fe fcd8 	bl	800a70c <__assert_func>
 800bd5c:	3101      	adds	r1, #1
 800bd5e:	005b      	lsls	r3, r3, #1
 800bd60:	e7ee      	b.n	800bd40 <__lshift+0x1c>
 800bd62:	2300      	movs	r3, #0
 800bd64:	f100 0114 	add.w	r1, r0, #20
 800bd68:	f100 0210 	add.w	r2, r0, #16
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	4553      	cmp	r3, sl
 800bd70:	db33      	blt.n	800bdda <__lshift+0xb6>
 800bd72:	6920      	ldr	r0, [r4, #16]
 800bd74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd78:	f104 0314 	add.w	r3, r4, #20
 800bd7c:	f019 091f 	ands.w	r9, r9, #31
 800bd80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd88:	d02b      	beq.n	800bde2 <__lshift+0xbe>
 800bd8a:	f1c9 0e20 	rsb	lr, r9, #32
 800bd8e:	468a      	mov	sl, r1
 800bd90:	2200      	movs	r2, #0
 800bd92:	6818      	ldr	r0, [r3, #0]
 800bd94:	fa00 f009 	lsl.w	r0, r0, r9
 800bd98:	4310      	orrs	r0, r2
 800bd9a:	f84a 0b04 	str.w	r0, [sl], #4
 800bd9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bda2:	459c      	cmp	ip, r3
 800bda4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bda8:	d8f3      	bhi.n	800bd92 <__lshift+0x6e>
 800bdaa:	ebac 0304 	sub.w	r3, ip, r4
 800bdae:	3b15      	subs	r3, #21
 800bdb0:	f023 0303 	bic.w	r3, r3, #3
 800bdb4:	3304      	adds	r3, #4
 800bdb6:	f104 0015 	add.w	r0, r4, #21
 800bdba:	4584      	cmp	ip, r0
 800bdbc:	bf38      	it	cc
 800bdbe:	2304      	movcc	r3, #4
 800bdc0:	50ca      	str	r2, [r1, r3]
 800bdc2:	b10a      	cbz	r2, 800bdc8 <__lshift+0xa4>
 800bdc4:	f108 0602 	add.w	r6, r8, #2
 800bdc8:	3e01      	subs	r6, #1
 800bdca:	4638      	mov	r0, r7
 800bdcc:	612e      	str	r6, [r5, #16]
 800bdce:	4621      	mov	r1, r4
 800bdd0:	f7ff fdd8 	bl	800b984 <_Bfree>
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdda:	f842 0f04 	str.w	r0, [r2, #4]!
 800bdde:	3301      	adds	r3, #1
 800bde0:	e7c5      	b.n	800bd6e <__lshift+0x4a>
 800bde2:	3904      	subs	r1, #4
 800bde4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bde8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bdec:	459c      	cmp	ip, r3
 800bdee:	d8f9      	bhi.n	800bde4 <__lshift+0xc0>
 800bdf0:	e7ea      	b.n	800bdc8 <__lshift+0xa4>
 800bdf2:	bf00      	nop
 800bdf4:	0800fbd5 	.word	0x0800fbd5
 800bdf8:	0800fbf7 	.word	0x0800fbf7

0800bdfc <__mcmp>:
 800bdfc:	b530      	push	{r4, r5, lr}
 800bdfe:	6902      	ldr	r2, [r0, #16]
 800be00:	690c      	ldr	r4, [r1, #16]
 800be02:	1b12      	subs	r2, r2, r4
 800be04:	d10e      	bne.n	800be24 <__mcmp+0x28>
 800be06:	f100 0314 	add.w	r3, r0, #20
 800be0a:	3114      	adds	r1, #20
 800be0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800be10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800be14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800be18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800be1c:	42a5      	cmp	r5, r4
 800be1e:	d003      	beq.n	800be28 <__mcmp+0x2c>
 800be20:	d305      	bcc.n	800be2e <__mcmp+0x32>
 800be22:	2201      	movs	r2, #1
 800be24:	4610      	mov	r0, r2
 800be26:	bd30      	pop	{r4, r5, pc}
 800be28:	4283      	cmp	r3, r0
 800be2a:	d3f3      	bcc.n	800be14 <__mcmp+0x18>
 800be2c:	e7fa      	b.n	800be24 <__mcmp+0x28>
 800be2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be32:	e7f7      	b.n	800be24 <__mcmp+0x28>

0800be34 <__mdiff>:
 800be34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be38:	460c      	mov	r4, r1
 800be3a:	4606      	mov	r6, r0
 800be3c:	4611      	mov	r1, r2
 800be3e:	4620      	mov	r0, r4
 800be40:	4690      	mov	r8, r2
 800be42:	f7ff ffdb 	bl	800bdfc <__mcmp>
 800be46:	1e05      	subs	r5, r0, #0
 800be48:	d110      	bne.n	800be6c <__mdiff+0x38>
 800be4a:	4629      	mov	r1, r5
 800be4c:	4630      	mov	r0, r6
 800be4e:	f7ff fd59 	bl	800b904 <_Balloc>
 800be52:	b930      	cbnz	r0, 800be62 <__mdiff+0x2e>
 800be54:	4b3a      	ldr	r3, [pc, #232]	; (800bf40 <__mdiff+0x10c>)
 800be56:	4602      	mov	r2, r0
 800be58:	f240 2137 	movw	r1, #567	; 0x237
 800be5c:	4839      	ldr	r0, [pc, #228]	; (800bf44 <__mdiff+0x110>)
 800be5e:	f7fe fc55 	bl	800a70c <__assert_func>
 800be62:	2301      	movs	r3, #1
 800be64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6c:	bfa4      	itt	ge
 800be6e:	4643      	movge	r3, r8
 800be70:	46a0      	movge	r8, r4
 800be72:	4630      	mov	r0, r6
 800be74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800be78:	bfa6      	itte	ge
 800be7a:	461c      	movge	r4, r3
 800be7c:	2500      	movge	r5, #0
 800be7e:	2501      	movlt	r5, #1
 800be80:	f7ff fd40 	bl	800b904 <_Balloc>
 800be84:	b920      	cbnz	r0, 800be90 <__mdiff+0x5c>
 800be86:	4b2e      	ldr	r3, [pc, #184]	; (800bf40 <__mdiff+0x10c>)
 800be88:	4602      	mov	r2, r0
 800be8a:	f240 2145 	movw	r1, #581	; 0x245
 800be8e:	e7e5      	b.n	800be5c <__mdiff+0x28>
 800be90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800be94:	6926      	ldr	r6, [r4, #16]
 800be96:	60c5      	str	r5, [r0, #12]
 800be98:	f104 0914 	add.w	r9, r4, #20
 800be9c:	f108 0514 	add.w	r5, r8, #20
 800bea0:	f100 0e14 	add.w	lr, r0, #20
 800bea4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bea8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800beac:	f108 0210 	add.w	r2, r8, #16
 800beb0:	46f2      	mov	sl, lr
 800beb2:	2100      	movs	r1, #0
 800beb4:	f859 3b04 	ldr.w	r3, [r9], #4
 800beb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bebc:	fa11 f88b 	uxtah	r8, r1, fp
 800bec0:	b299      	uxth	r1, r3
 800bec2:	0c1b      	lsrs	r3, r3, #16
 800bec4:	eba8 0801 	sub.w	r8, r8, r1
 800bec8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800becc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bed0:	fa1f f888 	uxth.w	r8, r8
 800bed4:	1419      	asrs	r1, r3, #16
 800bed6:	454e      	cmp	r6, r9
 800bed8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bedc:	f84a 3b04 	str.w	r3, [sl], #4
 800bee0:	d8e8      	bhi.n	800beb4 <__mdiff+0x80>
 800bee2:	1b33      	subs	r3, r6, r4
 800bee4:	3b15      	subs	r3, #21
 800bee6:	f023 0303 	bic.w	r3, r3, #3
 800beea:	3304      	adds	r3, #4
 800beec:	3415      	adds	r4, #21
 800beee:	42a6      	cmp	r6, r4
 800bef0:	bf38      	it	cc
 800bef2:	2304      	movcc	r3, #4
 800bef4:	441d      	add	r5, r3
 800bef6:	4473      	add	r3, lr
 800bef8:	469e      	mov	lr, r3
 800befa:	462e      	mov	r6, r5
 800befc:	4566      	cmp	r6, ip
 800befe:	d30e      	bcc.n	800bf1e <__mdiff+0xea>
 800bf00:	f10c 0203 	add.w	r2, ip, #3
 800bf04:	1b52      	subs	r2, r2, r5
 800bf06:	f022 0203 	bic.w	r2, r2, #3
 800bf0a:	3d03      	subs	r5, #3
 800bf0c:	45ac      	cmp	ip, r5
 800bf0e:	bf38      	it	cc
 800bf10:	2200      	movcc	r2, #0
 800bf12:	4413      	add	r3, r2
 800bf14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bf18:	b17a      	cbz	r2, 800bf3a <__mdiff+0x106>
 800bf1a:	6107      	str	r7, [r0, #16]
 800bf1c:	e7a4      	b.n	800be68 <__mdiff+0x34>
 800bf1e:	f856 8b04 	ldr.w	r8, [r6], #4
 800bf22:	fa11 f288 	uxtah	r2, r1, r8
 800bf26:	1414      	asrs	r4, r2, #16
 800bf28:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bf2c:	b292      	uxth	r2, r2
 800bf2e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bf32:	f84e 2b04 	str.w	r2, [lr], #4
 800bf36:	1421      	asrs	r1, r4, #16
 800bf38:	e7e0      	b.n	800befc <__mdiff+0xc8>
 800bf3a:	3f01      	subs	r7, #1
 800bf3c:	e7ea      	b.n	800bf14 <__mdiff+0xe0>
 800bf3e:	bf00      	nop
 800bf40:	0800fbd5 	.word	0x0800fbd5
 800bf44:	0800fbf7 	.word	0x0800fbf7

0800bf48 <__d2b>:
 800bf48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf4c:	460f      	mov	r7, r1
 800bf4e:	2101      	movs	r1, #1
 800bf50:	ec59 8b10 	vmov	r8, r9, d0
 800bf54:	4616      	mov	r6, r2
 800bf56:	f7ff fcd5 	bl	800b904 <_Balloc>
 800bf5a:	4604      	mov	r4, r0
 800bf5c:	b930      	cbnz	r0, 800bf6c <__d2b+0x24>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	4b24      	ldr	r3, [pc, #144]	; (800bff4 <__d2b+0xac>)
 800bf62:	4825      	ldr	r0, [pc, #148]	; (800bff8 <__d2b+0xb0>)
 800bf64:	f240 310f 	movw	r1, #783	; 0x30f
 800bf68:	f7fe fbd0 	bl	800a70c <__assert_func>
 800bf6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf74:	bb2d      	cbnz	r5, 800bfc2 <__d2b+0x7a>
 800bf76:	9301      	str	r3, [sp, #4]
 800bf78:	f1b8 0300 	subs.w	r3, r8, #0
 800bf7c:	d026      	beq.n	800bfcc <__d2b+0x84>
 800bf7e:	4668      	mov	r0, sp
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	f7ff fd87 	bl	800ba94 <__lo0bits>
 800bf86:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf8a:	b1e8      	cbz	r0, 800bfc8 <__d2b+0x80>
 800bf8c:	f1c0 0320 	rsb	r3, r0, #32
 800bf90:	fa02 f303 	lsl.w	r3, r2, r3
 800bf94:	430b      	orrs	r3, r1
 800bf96:	40c2      	lsrs	r2, r0
 800bf98:	6163      	str	r3, [r4, #20]
 800bf9a:	9201      	str	r2, [sp, #4]
 800bf9c:	9b01      	ldr	r3, [sp, #4]
 800bf9e:	61a3      	str	r3, [r4, #24]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	bf14      	ite	ne
 800bfa4:	2202      	movne	r2, #2
 800bfa6:	2201      	moveq	r2, #1
 800bfa8:	6122      	str	r2, [r4, #16]
 800bfaa:	b1bd      	cbz	r5, 800bfdc <__d2b+0x94>
 800bfac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bfb0:	4405      	add	r5, r0
 800bfb2:	603d      	str	r5, [r7, #0]
 800bfb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bfb8:	6030      	str	r0, [r6, #0]
 800bfba:	4620      	mov	r0, r4
 800bfbc:	b003      	add	sp, #12
 800bfbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfc6:	e7d6      	b.n	800bf76 <__d2b+0x2e>
 800bfc8:	6161      	str	r1, [r4, #20]
 800bfca:	e7e7      	b.n	800bf9c <__d2b+0x54>
 800bfcc:	a801      	add	r0, sp, #4
 800bfce:	f7ff fd61 	bl	800ba94 <__lo0bits>
 800bfd2:	9b01      	ldr	r3, [sp, #4]
 800bfd4:	6163      	str	r3, [r4, #20]
 800bfd6:	3020      	adds	r0, #32
 800bfd8:	2201      	movs	r2, #1
 800bfda:	e7e5      	b.n	800bfa8 <__d2b+0x60>
 800bfdc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bfe0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bfe4:	6038      	str	r0, [r7, #0]
 800bfe6:	6918      	ldr	r0, [r3, #16]
 800bfe8:	f7ff fd34 	bl	800ba54 <__hi0bits>
 800bfec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bff0:	e7e2      	b.n	800bfb8 <__d2b+0x70>
 800bff2:	bf00      	nop
 800bff4:	0800fbd5 	.word	0x0800fbd5
 800bff8:	0800fbf7 	.word	0x0800fbf7

0800bffc <fiprintf>:
 800bffc:	b40e      	push	{r1, r2, r3}
 800bffe:	b503      	push	{r0, r1, lr}
 800c000:	4601      	mov	r1, r0
 800c002:	ab03      	add	r3, sp, #12
 800c004:	4805      	ldr	r0, [pc, #20]	; (800c01c <fiprintf+0x20>)
 800c006:	f853 2b04 	ldr.w	r2, [r3], #4
 800c00a:	6800      	ldr	r0, [r0, #0]
 800c00c:	9301      	str	r3, [sp, #4]
 800c00e:	f000 f883 	bl	800c118 <_vfiprintf_r>
 800c012:	b002      	add	sp, #8
 800c014:	f85d eb04 	ldr.w	lr, [sp], #4
 800c018:	b003      	add	sp, #12
 800c01a:	4770      	bx	lr
 800c01c:	200001f8 	.word	0x200001f8

0800c020 <_realloc_r>:
 800c020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c024:	4680      	mov	r8, r0
 800c026:	4614      	mov	r4, r2
 800c028:	460e      	mov	r6, r1
 800c02a:	b921      	cbnz	r1, 800c036 <_realloc_r+0x16>
 800c02c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c030:	4611      	mov	r1, r2
 800c032:	f7fd bd19 	b.w	8009a68 <_malloc_r>
 800c036:	b92a      	cbnz	r2, 800c044 <_realloc_r+0x24>
 800c038:	f7ff fa00 	bl	800b43c <_free_r>
 800c03c:	4625      	mov	r5, r4
 800c03e:	4628      	mov	r0, r5
 800c040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c044:	f000 f982 	bl	800c34c <_malloc_usable_size_r>
 800c048:	4284      	cmp	r4, r0
 800c04a:	4607      	mov	r7, r0
 800c04c:	d802      	bhi.n	800c054 <_realloc_r+0x34>
 800c04e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c052:	d812      	bhi.n	800c07a <_realloc_r+0x5a>
 800c054:	4621      	mov	r1, r4
 800c056:	4640      	mov	r0, r8
 800c058:	f7fd fd06 	bl	8009a68 <_malloc_r>
 800c05c:	4605      	mov	r5, r0
 800c05e:	2800      	cmp	r0, #0
 800c060:	d0ed      	beq.n	800c03e <_realloc_r+0x1e>
 800c062:	42bc      	cmp	r4, r7
 800c064:	4622      	mov	r2, r4
 800c066:	4631      	mov	r1, r6
 800c068:	bf28      	it	cs
 800c06a:	463a      	movcs	r2, r7
 800c06c:	f7fe fb40 	bl	800a6f0 <memcpy>
 800c070:	4631      	mov	r1, r6
 800c072:	4640      	mov	r0, r8
 800c074:	f7ff f9e2 	bl	800b43c <_free_r>
 800c078:	e7e1      	b.n	800c03e <_realloc_r+0x1e>
 800c07a:	4635      	mov	r5, r6
 800c07c:	e7df      	b.n	800c03e <_realloc_r+0x1e>

0800c07e <__ascii_wctomb>:
 800c07e:	b149      	cbz	r1, 800c094 <__ascii_wctomb+0x16>
 800c080:	2aff      	cmp	r2, #255	; 0xff
 800c082:	bf85      	ittet	hi
 800c084:	238a      	movhi	r3, #138	; 0x8a
 800c086:	6003      	strhi	r3, [r0, #0]
 800c088:	700a      	strbls	r2, [r1, #0]
 800c08a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c08e:	bf98      	it	ls
 800c090:	2001      	movls	r0, #1
 800c092:	4770      	bx	lr
 800c094:	4608      	mov	r0, r1
 800c096:	4770      	bx	lr

0800c098 <_calloc_r>:
 800c098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c09a:	fba1 2402 	umull	r2, r4, r1, r2
 800c09e:	b94c      	cbnz	r4, 800c0b4 <_calloc_r+0x1c>
 800c0a0:	4611      	mov	r1, r2
 800c0a2:	9201      	str	r2, [sp, #4]
 800c0a4:	f7fd fce0 	bl	8009a68 <_malloc_r>
 800c0a8:	9a01      	ldr	r2, [sp, #4]
 800c0aa:	4605      	mov	r5, r0
 800c0ac:	b930      	cbnz	r0, 800c0bc <_calloc_r+0x24>
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	b003      	add	sp, #12
 800c0b2:	bd30      	pop	{r4, r5, pc}
 800c0b4:	220c      	movs	r2, #12
 800c0b6:	6002      	str	r2, [r0, #0]
 800c0b8:	2500      	movs	r5, #0
 800c0ba:	e7f8      	b.n	800c0ae <_calloc_r+0x16>
 800c0bc:	4621      	mov	r1, r4
 800c0be:	f7fe fa35 	bl	800a52c <memset>
 800c0c2:	e7f4      	b.n	800c0ae <_calloc_r+0x16>

0800c0c4 <__sfputc_r>:
 800c0c4:	6893      	ldr	r3, [r2, #8]
 800c0c6:	3b01      	subs	r3, #1
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	b410      	push	{r4}
 800c0cc:	6093      	str	r3, [r2, #8]
 800c0ce:	da08      	bge.n	800c0e2 <__sfputc_r+0x1e>
 800c0d0:	6994      	ldr	r4, [r2, #24]
 800c0d2:	42a3      	cmp	r3, r4
 800c0d4:	db01      	blt.n	800c0da <__sfputc_r+0x16>
 800c0d6:	290a      	cmp	r1, #10
 800c0d8:	d103      	bne.n	800c0e2 <__sfputc_r+0x1e>
 800c0da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0de:	f000 b93d 	b.w	800c35c <__swbuf_r>
 800c0e2:	6813      	ldr	r3, [r2, #0]
 800c0e4:	1c58      	adds	r0, r3, #1
 800c0e6:	6010      	str	r0, [r2, #0]
 800c0e8:	7019      	strb	r1, [r3, #0]
 800c0ea:	4608      	mov	r0, r1
 800c0ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0f0:	4770      	bx	lr

0800c0f2 <__sfputs_r>:
 800c0f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f4:	4606      	mov	r6, r0
 800c0f6:	460f      	mov	r7, r1
 800c0f8:	4614      	mov	r4, r2
 800c0fa:	18d5      	adds	r5, r2, r3
 800c0fc:	42ac      	cmp	r4, r5
 800c0fe:	d101      	bne.n	800c104 <__sfputs_r+0x12>
 800c100:	2000      	movs	r0, #0
 800c102:	e007      	b.n	800c114 <__sfputs_r+0x22>
 800c104:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c108:	463a      	mov	r2, r7
 800c10a:	4630      	mov	r0, r6
 800c10c:	f7ff ffda 	bl	800c0c4 <__sfputc_r>
 800c110:	1c43      	adds	r3, r0, #1
 800c112:	d1f3      	bne.n	800c0fc <__sfputs_r+0xa>
 800c114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c118 <_vfiprintf_r>:
 800c118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c11c:	460d      	mov	r5, r1
 800c11e:	b09d      	sub	sp, #116	; 0x74
 800c120:	4614      	mov	r4, r2
 800c122:	4698      	mov	r8, r3
 800c124:	4606      	mov	r6, r0
 800c126:	b118      	cbz	r0, 800c130 <_vfiprintf_r+0x18>
 800c128:	6a03      	ldr	r3, [r0, #32]
 800c12a:	b90b      	cbnz	r3, 800c130 <_vfiprintf_r+0x18>
 800c12c:	f7fd ffbc 	bl	800a0a8 <__sinit>
 800c130:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c132:	07d9      	lsls	r1, r3, #31
 800c134:	d405      	bmi.n	800c142 <_vfiprintf_r+0x2a>
 800c136:	89ab      	ldrh	r3, [r5, #12]
 800c138:	059a      	lsls	r2, r3, #22
 800c13a:	d402      	bmi.n	800c142 <_vfiprintf_r+0x2a>
 800c13c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c13e:	f7fe fac6 	bl	800a6ce <__retarget_lock_acquire_recursive>
 800c142:	89ab      	ldrh	r3, [r5, #12]
 800c144:	071b      	lsls	r3, r3, #28
 800c146:	d501      	bpl.n	800c14c <_vfiprintf_r+0x34>
 800c148:	692b      	ldr	r3, [r5, #16]
 800c14a:	b99b      	cbnz	r3, 800c174 <_vfiprintf_r+0x5c>
 800c14c:	4629      	mov	r1, r5
 800c14e:	4630      	mov	r0, r6
 800c150:	f000 f942 	bl	800c3d8 <__swsetup_r>
 800c154:	b170      	cbz	r0, 800c174 <_vfiprintf_r+0x5c>
 800c156:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c158:	07dc      	lsls	r4, r3, #31
 800c15a:	d504      	bpl.n	800c166 <_vfiprintf_r+0x4e>
 800c15c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c160:	b01d      	add	sp, #116	; 0x74
 800c162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c166:	89ab      	ldrh	r3, [r5, #12]
 800c168:	0598      	lsls	r0, r3, #22
 800c16a:	d4f7      	bmi.n	800c15c <_vfiprintf_r+0x44>
 800c16c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c16e:	f7fe faaf 	bl	800a6d0 <__retarget_lock_release_recursive>
 800c172:	e7f3      	b.n	800c15c <_vfiprintf_r+0x44>
 800c174:	2300      	movs	r3, #0
 800c176:	9309      	str	r3, [sp, #36]	; 0x24
 800c178:	2320      	movs	r3, #32
 800c17a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c17e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c182:	2330      	movs	r3, #48	; 0x30
 800c184:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c338 <_vfiprintf_r+0x220>
 800c188:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c18c:	f04f 0901 	mov.w	r9, #1
 800c190:	4623      	mov	r3, r4
 800c192:	469a      	mov	sl, r3
 800c194:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c198:	b10a      	cbz	r2, 800c19e <_vfiprintf_r+0x86>
 800c19a:	2a25      	cmp	r2, #37	; 0x25
 800c19c:	d1f9      	bne.n	800c192 <_vfiprintf_r+0x7a>
 800c19e:	ebba 0b04 	subs.w	fp, sl, r4
 800c1a2:	d00b      	beq.n	800c1bc <_vfiprintf_r+0xa4>
 800c1a4:	465b      	mov	r3, fp
 800c1a6:	4622      	mov	r2, r4
 800c1a8:	4629      	mov	r1, r5
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	f7ff ffa1 	bl	800c0f2 <__sfputs_r>
 800c1b0:	3001      	adds	r0, #1
 800c1b2:	f000 80a9 	beq.w	800c308 <_vfiprintf_r+0x1f0>
 800c1b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1b8:	445a      	add	r2, fp
 800c1ba:	9209      	str	r2, [sp, #36]	; 0x24
 800c1bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f000 80a1 	beq.w	800c308 <_vfiprintf_r+0x1f0>
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1d0:	f10a 0a01 	add.w	sl, sl, #1
 800c1d4:	9304      	str	r3, [sp, #16]
 800c1d6:	9307      	str	r3, [sp, #28]
 800c1d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1dc:	931a      	str	r3, [sp, #104]	; 0x68
 800c1de:	4654      	mov	r4, sl
 800c1e0:	2205      	movs	r2, #5
 800c1e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1e6:	4854      	ldr	r0, [pc, #336]	; (800c338 <_vfiprintf_r+0x220>)
 800c1e8:	f7f3 fff2 	bl	80001d0 <memchr>
 800c1ec:	9a04      	ldr	r2, [sp, #16]
 800c1ee:	b9d8      	cbnz	r0, 800c228 <_vfiprintf_r+0x110>
 800c1f0:	06d1      	lsls	r1, r2, #27
 800c1f2:	bf44      	itt	mi
 800c1f4:	2320      	movmi	r3, #32
 800c1f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1fa:	0713      	lsls	r3, r2, #28
 800c1fc:	bf44      	itt	mi
 800c1fe:	232b      	movmi	r3, #43	; 0x2b
 800c200:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c204:	f89a 3000 	ldrb.w	r3, [sl]
 800c208:	2b2a      	cmp	r3, #42	; 0x2a
 800c20a:	d015      	beq.n	800c238 <_vfiprintf_r+0x120>
 800c20c:	9a07      	ldr	r2, [sp, #28]
 800c20e:	4654      	mov	r4, sl
 800c210:	2000      	movs	r0, #0
 800c212:	f04f 0c0a 	mov.w	ip, #10
 800c216:	4621      	mov	r1, r4
 800c218:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c21c:	3b30      	subs	r3, #48	; 0x30
 800c21e:	2b09      	cmp	r3, #9
 800c220:	d94d      	bls.n	800c2be <_vfiprintf_r+0x1a6>
 800c222:	b1b0      	cbz	r0, 800c252 <_vfiprintf_r+0x13a>
 800c224:	9207      	str	r2, [sp, #28]
 800c226:	e014      	b.n	800c252 <_vfiprintf_r+0x13a>
 800c228:	eba0 0308 	sub.w	r3, r0, r8
 800c22c:	fa09 f303 	lsl.w	r3, r9, r3
 800c230:	4313      	orrs	r3, r2
 800c232:	9304      	str	r3, [sp, #16]
 800c234:	46a2      	mov	sl, r4
 800c236:	e7d2      	b.n	800c1de <_vfiprintf_r+0xc6>
 800c238:	9b03      	ldr	r3, [sp, #12]
 800c23a:	1d19      	adds	r1, r3, #4
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	9103      	str	r1, [sp, #12]
 800c240:	2b00      	cmp	r3, #0
 800c242:	bfbb      	ittet	lt
 800c244:	425b      	neglt	r3, r3
 800c246:	f042 0202 	orrlt.w	r2, r2, #2
 800c24a:	9307      	strge	r3, [sp, #28]
 800c24c:	9307      	strlt	r3, [sp, #28]
 800c24e:	bfb8      	it	lt
 800c250:	9204      	strlt	r2, [sp, #16]
 800c252:	7823      	ldrb	r3, [r4, #0]
 800c254:	2b2e      	cmp	r3, #46	; 0x2e
 800c256:	d10c      	bne.n	800c272 <_vfiprintf_r+0x15a>
 800c258:	7863      	ldrb	r3, [r4, #1]
 800c25a:	2b2a      	cmp	r3, #42	; 0x2a
 800c25c:	d134      	bne.n	800c2c8 <_vfiprintf_r+0x1b0>
 800c25e:	9b03      	ldr	r3, [sp, #12]
 800c260:	1d1a      	adds	r2, r3, #4
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	9203      	str	r2, [sp, #12]
 800c266:	2b00      	cmp	r3, #0
 800c268:	bfb8      	it	lt
 800c26a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c26e:	3402      	adds	r4, #2
 800c270:	9305      	str	r3, [sp, #20]
 800c272:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c348 <_vfiprintf_r+0x230>
 800c276:	7821      	ldrb	r1, [r4, #0]
 800c278:	2203      	movs	r2, #3
 800c27a:	4650      	mov	r0, sl
 800c27c:	f7f3 ffa8 	bl	80001d0 <memchr>
 800c280:	b138      	cbz	r0, 800c292 <_vfiprintf_r+0x17a>
 800c282:	9b04      	ldr	r3, [sp, #16]
 800c284:	eba0 000a 	sub.w	r0, r0, sl
 800c288:	2240      	movs	r2, #64	; 0x40
 800c28a:	4082      	lsls	r2, r0
 800c28c:	4313      	orrs	r3, r2
 800c28e:	3401      	adds	r4, #1
 800c290:	9304      	str	r3, [sp, #16]
 800c292:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c296:	4829      	ldr	r0, [pc, #164]	; (800c33c <_vfiprintf_r+0x224>)
 800c298:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c29c:	2206      	movs	r2, #6
 800c29e:	f7f3 ff97 	bl	80001d0 <memchr>
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	d03f      	beq.n	800c326 <_vfiprintf_r+0x20e>
 800c2a6:	4b26      	ldr	r3, [pc, #152]	; (800c340 <_vfiprintf_r+0x228>)
 800c2a8:	bb1b      	cbnz	r3, 800c2f2 <_vfiprintf_r+0x1da>
 800c2aa:	9b03      	ldr	r3, [sp, #12]
 800c2ac:	3307      	adds	r3, #7
 800c2ae:	f023 0307 	bic.w	r3, r3, #7
 800c2b2:	3308      	adds	r3, #8
 800c2b4:	9303      	str	r3, [sp, #12]
 800c2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2b8:	443b      	add	r3, r7
 800c2ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c2bc:	e768      	b.n	800c190 <_vfiprintf_r+0x78>
 800c2be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2c2:	460c      	mov	r4, r1
 800c2c4:	2001      	movs	r0, #1
 800c2c6:	e7a6      	b.n	800c216 <_vfiprintf_r+0xfe>
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	3401      	adds	r4, #1
 800c2cc:	9305      	str	r3, [sp, #20]
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	f04f 0c0a 	mov.w	ip, #10
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2da:	3a30      	subs	r2, #48	; 0x30
 800c2dc:	2a09      	cmp	r2, #9
 800c2de:	d903      	bls.n	800c2e8 <_vfiprintf_r+0x1d0>
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d0c6      	beq.n	800c272 <_vfiprintf_r+0x15a>
 800c2e4:	9105      	str	r1, [sp, #20]
 800c2e6:	e7c4      	b.n	800c272 <_vfiprintf_r+0x15a>
 800c2e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	e7f0      	b.n	800c2d4 <_vfiprintf_r+0x1bc>
 800c2f2:	ab03      	add	r3, sp, #12
 800c2f4:	9300      	str	r3, [sp, #0]
 800c2f6:	462a      	mov	r2, r5
 800c2f8:	4b12      	ldr	r3, [pc, #72]	; (800c344 <_vfiprintf_r+0x22c>)
 800c2fa:	a904      	add	r1, sp, #16
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	f7fd f94d 	bl	800959c <_printf_float>
 800c302:	4607      	mov	r7, r0
 800c304:	1c78      	adds	r0, r7, #1
 800c306:	d1d6      	bne.n	800c2b6 <_vfiprintf_r+0x19e>
 800c308:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c30a:	07d9      	lsls	r1, r3, #31
 800c30c:	d405      	bmi.n	800c31a <_vfiprintf_r+0x202>
 800c30e:	89ab      	ldrh	r3, [r5, #12]
 800c310:	059a      	lsls	r2, r3, #22
 800c312:	d402      	bmi.n	800c31a <_vfiprintf_r+0x202>
 800c314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c316:	f7fe f9db 	bl	800a6d0 <__retarget_lock_release_recursive>
 800c31a:	89ab      	ldrh	r3, [r5, #12]
 800c31c:	065b      	lsls	r3, r3, #25
 800c31e:	f53f af1d 	bmi.w	800c15c <_vfiprintf_r+0x44>
 800c322:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c324:	e71c      	b.n	800c160 <_vfiprintf_r+0x48>
 800c326:	ab03      	add	r3, sp, #12
 800c328:	9300      	str	r3, [sp, #0]
 800c32a:	462a      	mov	r2, r5
 800c32c:	4b05      	ldr	r3, [pc, #20]	; (800c344 <_vfiprintf_r+0x22c>)
 800c32e:	a904      	add	r1, sp, #16
 800c330:	4630      	mov	r0, r6
 800c332:	f7fd fc87 	bl	8009c44 <_printf_i>
 800c336:	e7e4      	b.n	800c302 <_vfiprintf_r+0x1ea>
 800c338:	0800fbe6 	.word	0x0800fbe6
 800c33c:	0800fbf0 	.word	0x0800fbf0
 800c340:	0800959d 	.word	0x0800959d
 800c344:	0800c0f3 	.word	0x0800c0f3
 800c348:	0800fbec 	.word	0x0800fbec

0800c34c <_malloc_usable_size_r>:
 800c34c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c350:	1f18      	subs	r0, r3, #4
 800c352:	2b00      	cmp	r3, #0
 800c354:	bfbc      	itt	lt
 800c356:	580b      	ldrlt	r3, [r1, r0]
 800c358:	18c0      	addlt	r0, r0, r3
 800c35a:	4770      	bx	lr

0800c35c <__swbuf_r>:
 800c35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35e:	460e      	mov	r6, r1
 800c360:	4614      	mov	r4, r2
 800c362:	4605      	mov	r5, r0
 800c364:	b118      	cbz	r0, 800c36e <__swbuf_r+0x12>
 800c366:	6a03      	ldr	r3, [r0, #32]
 800c368:	b90b      	cbnz	r3, 800c36e <__swbuf_r+0x12>
 800c36a:	f7fd fe9d 	bl	800a0a8 <__sinit>
 800c36e:	69a3      	ldr	r3, [r4, #24]
 800c370:	60a3      	str	r3, [r4, #8]
 800c372:	89a3      	ldrh	r3, [r4, #12]
 800c374:	071a      	lsls	r2, r3, #28
 800c376:	d525      	bpl.n	800c3c4 <__swbuf_r+0x68>
 800c378:	6923      	ldr	r3, [r4, #16]
 800c37a:	b31b      	cbz	r3, 800c3c4 <__swbuf_r+0x68>
 800c37c:	6823      	ldr	r3, [r4, #0]
 800c37e:	6922      	ldr	r2, [r4, #16]
 800c380:	1a98      	subs	r0, r3, r2
 800c382:	6963      	ldr	r3, [r4, #20]
 800c384:	b2f6      	uxtb	r6, r6
 800c386:	4283      	cmp	r3, r0
 800c388:	4637      	mov	r7, r6
 800c38a:	dc04      	bgt.n	800c396 <__swbuf_r+0x3a>
 800c38c:	4621      	mov	r1, r4
 800c38e:	4628      	mov	r0, r5
 800c390:	f7ff fa90 	bl	800b8b4 <_fflush_r>
 800c394:	b9e0      	cbnz	r0, 800c3d0 <__swbuf_r+0x74>
 800c396:	68a3      	ldr	r3, [r4, #8]
 800c398:	3b01      	subs	r3, #1
 800c39a:	60a3      	str	r3, [r4, #8]
 800c39c:	6823      	ldr	r3, [r4, #0]
 800c39e:	1c5a      	adds	r2, r3, #1
 800c3a0:	6022      	str	r2, [r4, #0]
 800c3a2:	701e      	strb	r6, [r3, #0]
 800c3a4:	6962      	ldr	r2, [r4, #20]
 800c3a6:	1c43      	adds	r3, r0, #1
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d004      	beq.n	800c3b6 <__swbuf_r+0x5a>
 800c3ac:	89a3      	ldrh	r3, [r4, #12]
 800c3ae:	07db      	lsls	r3, r3, #31
 800c3b0:	d506      	bpl.n	800c3c0 <__swbuf_r+0x64>
 800c3b2:	2e0a      	cmp	r6, #10
 800c3b4:	d104      	bne.n	800c3c0 <__swbuf_r+0x64>
 800c3b6:	4621      	mov	r1, r4
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	f7ff fa7b 	bl	800b8b4 <_fflush_r>
 800c3be:	b938      	cbnz	r0, 800c3d0 <__swbuf_r+0x74>
 800c3c0:	4638      	mov	r0, r7
 800c3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3c4:	4621      	mov	r1, r4
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	f000 f806 	bl	800c3d8 <__swsetup_r>
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d0d5      	beq.n	800c37c <__swbuf_r+0x20>
 800c3d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c3d4:	e7f4      	b.n	800c3c0 <__swbuf_r+0x64>
	...

0800c3d8 <__swsetup_r>:
 800c3d8:	b538      	push	{r3, r4, r5, lr}
 800c3da:	4b2a      	ldr	r3, [pc, #168]	; (800c484 <__swsetup_r+0xac>)
 800c3dc:	4605      	mov	r5, r0
 800c3de:	6818      	ldr	r0, [r3, #0]
 800c3e0:	460c      	mov	r4, r1
 800c3e2:	b118      	cbz	r0, 800c3ec <__swsetup_r+0x14>
 800c3e4:	6a03      	ldr	r3, [r0, #32]
 800c3e6:	b90b      	cbnz	r3, 800c3ec <__swsetup_r+0x14>
 800c3e8:	f7fd fe5e 	bl	800a0a8 <__sinit>
 800c3ec:	89a3      	ldrh	r3, [r4, #12]
 800c3ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3f2:	0718      	lsls	r0, r3, #28
 800c3f4:	d422      	bmi.n	800c43c <__swsetup_r+0x64>
 800c3f6:	06d9      	lsls	r1, r3, #27
 800c3f8:	d407      	bmi.n	800c40a <__swsetup_r+0x32>
 800c3fa:	2309      	movs	r3, #9
 800c3fc:	602b      	str	r3, [r5, #0]
 800c3fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c402:	81a3      	strh	r3, [r4, #12]
 800c404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c408:	e034      	b.n	800c474 <__swsetup_r+0x9c>
 800c40a:	0758      	lsls	r0, r3, #29
 800c40c:	d512      	bpl.n	800c434 <__swsetup_r+0x5c>
 800c40e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c410:	b141      	cbz	r1, 800c424 <__swsetup_r+0x4c>
 800c412:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c416:	4299      	cmp	r1, r3
 800c418:	d002      	beq.n	800c420 <__swsetup_r+0x48>
 800c41a:	4628      	mov	r0, r5
 800c41c:	f7ff f80e 	bl	800b43c <_free_r>
 800c420:	2300      	movs	r3, #0
 800c422:	6363      	str	r3, [r4, #52]	; 0x34
 800c424:	89a3      	ldrh	r3, [r4, #12]
 800c426:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c42a:	81a3      	strh	r3, [r4, #12]
 800c42c:	2300      	movs	r3, #0
 800c42e:	6063      	str	r3, [r4, #4]
 800c430:	6923      	ldr	r3, [r4, #16]
 800c432:	6023      	str	r3, [r4, #0]
 800c434:	89a3      	ldrh	r3, [r4, #12]
 800c436:	f043 0308 	orr.w	r3, r3, #8
 800c43a:	81a3      	strh	r3, [r4, #12]
 800c43c:	6923      	ldr	r3, [r4, #16]
 800c43e:	b94b      	cbnz	r3, 800c454 <__swsetup_r+0x7c>
 800c440:	89a3      	ldrh	r3, [r4, #12]
 800c442:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c44a:	d003      	beq.n	800c454 <__swsetup_r+0x7c>
 800c44c:	4621      	mov	r1, r4
 800c44e:	4628      	mov	r0, r5
 800c450:	f000 f840 	bl	800c4d4 <__smakebuf_r>
 800c454:	89a0      	ldrh	r0, [r4, #12]
 800c456:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c45a:	f010 0301 	ands.w	r3, r0, #1
 800c45e:	d00a      	beq.n	800c476 <__swsetup_r+0x9e>
 800c460:	2300      	movs	r3, #0
 800c462:	60a3      	str	r3, [r4, #8]
 800c464:	6963      	ldr	r3, [r4, #20]
 800c466:	425b      	negs	r3, r3
 800c468:	61a3      	str	r3, [r4, #24]
 800c46a:	6923      	ldr	r3, [r4, #16]
 800c46c:	b943      	cbnz	r3, 800c480 <__swsetup_r+0xa8>
 800c46e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c472:	d1c4      	bne.n	800c3fe <__swsetup_r+0x26>
 800c474:	bd38      	pop	{r3, r4, r5, pc}
 800c476:	0781      	lsls	r1, r0, #30
 800c478:	bf58      	it	pl
 800c47a:	6963      	ldrpl	r3, [r4, #20]
 800c47c:	60a3      	str	r3, [r4, #8]
 800c47e:	e7f4      	b.n	800c46a <__swsetup_r+0x92>
 800c480:	2000      	movs	r0, #0
 800c482:	e7f7      	b.n	800c474 <__swsetup_r+0x9c>
 800c484:	200001f8 	.word	0x200001f8

0800c488 <__swhatbuf_r>:
 800c488:	b570      	push	{r4, r5, r6, lr}
 800c48a:	460c      	mov	r4, r1
 800c48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c490:	2900      	cmp	r1, #0
 800c492:	b096      	sub	sp, #88	; 0x58
 800c494:	4615      	mov	r5, r2
 800c496:	461e      	mov	r6, r3
 800c498:	da0d      	bge.n	800c4b6 <__swhatbuf_r+0x2e>
 800c49a:	89a3      	ldrh	r3, [r4, #12]
 800c49c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c4a0:	f04f 0100 	mov.w	r1, #0
 800c4a4:	bf0c      	ite	eq
 800c4a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c4aa:	2340      	movne	r3, #64	; 0x40
 800c4ac:	2000      	movs	r0, #0
 800c4ae:	6031      	str	r1, [r6, #0]
 800c4b0:	602b      	str	r3, [r5, #0]
 800c4b2:	b016      	add	sp, #88	; 0x58
 800c4b4:	bd70      	pop	{r4, r5, r6, pc}
 800c4b6:	466a      	mov	r2, sp
 800c4b8:	f000 f848 	bl	800c54c <_fstat_r>
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	dbec      	blt.n	800c49a <__swhatbuf_r+0x12>
 800c4c0:	9901      	ldr	r1, [sp, #4]
 800c4c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c4c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c4ca:	4259      	negs	r1, r3
 800c4cc:	4159      	adcs	r1, r3
 800c4ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4d2:	e7eb      	b.n	800c4ac <__swhatbuf_r+0x24>

0800c4d4 <__smakebuf_r>:
 800c4d4:	898b      	ldrh	r3, [r1, #12]
 800c4d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4d8:	079d      	lsls	r5, r3, #30
 800c4da:	4606      	mov	r6, r0
 800c4dc:	460c      	mov	r4, r1
 800c4de:	d507      	bpl.n	800c4f0 <__smakebuf_r+0x1c>
 800c4e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4e4:	6023      	str	r3, [r4, #0]
 800c4e6:	6123      	str	r3, [r4, #16]
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	6163      	str	r3, [r4, #20]
 800c4ec:	b002      	add	sp, #8
 800c4ee:	bd70      	pop	{r4, r5, r6, pc}
 800c4f0:	ab01      	add	r3, sp, #4
 800c4f2:	466a      	mov	r2, sp
 800c4f4:	f7ff ffc8 	bl	800c488 <__swhatbuf_r>
 800c4f8:	9900      	ldr	r1, [sp, #0]
 800c4fa:	4605      	mov	r5, r0
 800c4fc:	4630      	mov	r0, r6
 800c4fe:	f7fd fab3 	bl	8009a68 <_malloc_r>
 800c502:	b948      	cbnz	r0, 800c518 <__smakebuf_r+0x44>
 800c504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c508:	059a      	lsls	r2, r3, #22
 800c50a:	d4ef      	bmi.n	800c4ec <__smakebuf_r+0x18>
 800c50c:	f023 0303 	bic.w	r3, r3, #3
 800c510:	f043 0302 	orr.w	r3, r3, #2
 800c514:	81a3      	strh	r3, [r4, #12]
 800c516:	e7e3      	b.n	800c4e0 <__smakebuf_r+0xc>
 800c518:	89a3      	ldrh	r3, [r4, #12]
 800c51a:	6020      	str	r0, [r4, #0]
 800c51c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c520:	81a3      	strh	r3, [r4, #12]
 800c522:	9b00      	ldr	r3, [sp, #0]
 800c524:	6163      	str	r3, [r4, #20]
 800c526:	9b01      	ldr	r3, [sp, #4]
 800c528:	6120      	str	r0, [r4, #16]
 800c52a:	b15b      	cbz	r3, 800c544 <__smakebuf_r+0x70>
 800c52c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c530:	4630      	mov	r0, r6
 800c532:	f000 f81d 	bl	800c570 <_isatty_r>
 800c536:	b128      	cbz	r0, 800c544 <__smakebuf_r+0x70>
 800c538:	89a3      	ldrh	r3, [r4, #12]
 800c53a:	f023 0303 	bic.w	r3, r3, #3
 800c53e:	f043 0301 	orr.w	r3, r3, #1
 800c542:	81a3      	strh	r3, [r4, #12]
 800c544:	89a3      	ldrh	r3, [r4, #12]
 800c546:	431d      	orrs	r5, r3
 800c548:	81a5      	strh	r5, [r4, #12]
 800c54a:	e7cf      	b.n	800c4ec <__smakebuf_r+0x18>

0800c54c <_fstat_r>:
 800c54c:	b538      	push	{r3, r4, r5, lr}
 800c54e:	4d07      	ldr	r5, [pc, #28]	; (800c56c <_fstat_r+0x20>)
 800c550:	2300      	movs	r3, #0
 800c552:	4604      	mov	r4, r0
 800c554:	4608      	mov	r0, r1
 800c556:	4611      	mov	r1, r2
 800c558:	602b      	str	r3, [r5, #0]
 800c55a:	f7f6 f954 	bl	8002806 <_fstat>
 800c55e:	1c43      	adds	r3, r0, #1
 800c560:	d102      	bne.n	800c568 <_fstat_r+0x1c>
 800c562:	682b      	ldr	r3, [r5, #0]
 800c564:	b103      	cbz	r3, 800c568 <_fstat_r+0x1c>
 800c566:	6023      	str	r3, [r4, #0]
 800c568:	bd38      	pop	{r3, r4, r5, pc}
 800c56a:	bf00      	nop
 800c56c:	20000bb8 	.word	0x20000bb8

0800c570 <_isatty_r>:
 800c570:	b538      	push	{r3, r4, r5, lr}
 800c572:	4d06      	ldr	r5, [pc, #24]	; (800c58c <_isatty_r+0x1c>)
 800c574:	2300      	movs	r3, #0
 800c576:	4604      	mov	r4, r0
 800c578:	4608      	mov	r0, r1
 800c57a:	602b      	str	r3, [r5, #0]
 800c57c:	f7f6 f953 	bl	8002826 <_isatty>
 800c580:	1c43      	adds	r3, r0, #1
 800c582:	d102      	bne.n	800c58a <_isatty_r+0x1a>
 800c584:	682b      	ldr	r3, [r5, #0]
 800c586:	b103      	cbz	r3, 800c58a <_isatty_r+0x1a>
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	bd38      	pop	{r3, r4, r5, pc}
 800c58c:	20000bb8 	.word	0x20000bb8

0800c590 <_init>:
 800c590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c592:	bf00      	nop
 800c594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c596:	bc08      	pop	{r3}
 800c598:	469e      	mov	lr, r3
 800c59a:	4770      	bx	lr

0800c59c <_fini>:
 800c59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c59e:	bf00      	nop
 800c5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5a2:	bc08      	pop	{r3}
 800c5a4:	469e      	mov	lr, r3
 800c5a6:	4770      	bx	lr
